var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHHHSSSHHHHHHHHHH","n":["constants_gen","generate_mode","main","verify_header","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","generate_header","normalize_constant_name","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[4,"gen::constants_gen"],[17,"alloc::string"],[18,"core::option"],[19,"syn::expr"],[20,"core::ops::function"],[21,"syn::stmt"],[22,"alloc::vec"]],"i":"`````````````````","f":"`{{}b}0{{}d}{{}f}0{{}h}{{{A`{{n{{l{jh}}}}}}{A`{{n{{l{jh}}}}}}}f}{{{A`{Ab}}}{{Ad{f}}}}{{{A`{Af}}{A`{Ahc}}}b{{Al{{A`{{n{Aj}}}}}}}}{{{A`{{n{An}}}}{A`{Ahc}}}b{{Al{{A`{{n{Aj}}}}}}}}{{{A`{{n{{l{jh}}}}}}{A`{{n{{l{jh}}}}}}}j}{{{A`{Ab}}}j}{{{A`{Aj}}}{{Ad{{l{jh}}}}}}{{}{{B`{{l{jh}}}}}}10","D":"B`","p":[[1,"unit"],[1,"never"],[1,"u64"],[1,"i32"],[5,"String",17],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",18,null,1],[6,"Expr",19],[0,"mut"],[5,"Arm",19],[10,"FnMut",20],[6,"Stmt",21],[5,"Vec",22]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAMABgA=","P":[[9,"F"],[11,""]]}],["roup",{"t":"CCCCFFFFSSSNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHNNNNNNNNNNNNPPPPPPPPPPPPPPFPPGPPPPPGPPPPPPPPPPGGPPPPPPEPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPGPPFGPPPPPPPPPPPPPPPFPPPPPPPPGPGPPGPPPPPPGPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPGGPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPEEFPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOOONONNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGPPPPNNNNNHNNNNNHHHHHHHHNNNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHNNNNPPFGFFGPPFFFGPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","borrow","","","","borrow_mut","","","","from","","","","into","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_parse","roup_parse_with_language","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","try_into","","","","type_id","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","And","Any","ArrayAccess","ArraySection","Atomic","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","Auto","Bare","Barrier","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","DistSchedule","Distribute","DistributeParallelFor","DistributeParallelForSimd","DistributeSimd","Div","Dynamic","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Ge","Generic","Grainsize","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelFor","ParallelForSimd","ParallelLoop","ParallelMasked","ParallelMaster","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Spread","Static","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetParallel","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetUpdate","Task","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeSimd","TeamsLoop","ThreadLimit","Threadprivate","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","Unparsed","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workshare","Write","all","array_sections","as_ast","as_str","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","length","line","location","lower_bound","map","name","","","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","ConversionError","InvalidClauseSyntax","UnknownClause","UnknownDirective","Unsupported","borrow","borrow_mut","clone","clone_into","clone_to_uninit","convert_directive","eq","fmt","","from","into","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","to_owned","to_string","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_clause","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_free_sentinel","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","borrow_mut","","","","","","","","","","build","","builder","","clauses","clone","","clone_into","","clone_to_uninit","","default","","","","","eq","","","fmt","","","","","from","","","","","","","","","","into","","","","","","","","","","kind","name","","new","","","openmp","parse","","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","to_pragma_string","to_source_string","to_string","","try_from","","","","","","","","","","try_into","","","","","","","","","","type_id","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_language","ALL","","AcqRel","Acquire","Affinity","Aligned","Allocate","Allocator","Assume","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginDeclareTarget","Bind","Cancel","CancellationPoint","Capture","Collapse","Compare","Copyin","Copyprivate","Critical","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndDeclareTarget","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Grainsize","Hint","Holds","If","InReduction","Inbranch","Inclusive","Init","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Loop","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","Match","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpRoutines","NoParallelism","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Priority","Private","ProcBind","Public","Reduction","Relaxed","Release","Reproducible","Requires","Reverse","Safelen","Schedule","Scope","Sections","SeqCst","Shared","Simd","Simdlen","Single","Sizes","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","UnifiedAddress","UnifiedSharedMemory","Unroll","Untied","Update","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[56,"roup::ir"],[856,"roup::ir::ClauseData"],[906,"roup::ir::ExpressionKind"],[918,"roup::ir::convert"],[947,"roup::ir::validate"],[978,"roup::ir::validate::ValidationError"],[988,"roup::lexer"],[1017,"roup::parser"],[1162,"roup::parser::openmp"],[1398,"std::os::raw"],[1399,"core::result"],[1400,"core::any"],[1401,"roup::ir::variable"],[1402,"alloc::vec"],[1403,"roup::ir::expression"],[1404,"core::option"],[1405,"roup::ir::types"],[1406,"roup::ir::directive"],[1407,"roup::ir::builder"],[1408,"roup::ir::clause"],[1409,"core::ops::function"],[1410,"core::fmt"],[1411,"alloc::string"],[1412,"core::hash"],[1413,"core::convert"],[1414,"alloc::boxed"],[1415,"roup::parser::directive"],[1416,"roup::parser::clause"],[1417,"nom::internal"],[1418,"alloc::borrow"]],"i":"```````````A`hln321032103210`````````````````321032103210Db0CdEfEhC`0Cf1E`24DfEd`24`4Ch531`8768787Bj2Dd``D`84DlDj6`::48=88888:`9:`Cl9<;`;```;9999=6=9`Dn<``<Cn=;;;7<?==?8=:`19=229==`=`?=`Cd?0<Ef?`=7=1`=110Cj1251Eh>41?C`0030`0E`800000000?An`<272`2=2`DhDbCf14Ch656``552;6998565==`D`1:;66666666666666666666666666667622Ed`7Bj7Dd::77```Dn:1AhAj;;BfBlBnCd<;CjClCn=Db;DfDhDjDl>C`E`<EbAnB`EdEfEhBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjBn<CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjBn5`<0;540001CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAj;;BnCd0Cf0Ch0Cj0Cl0Cn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0C`0E`0Bl0EbAn0B`EdEfEhBh0Bj0Bf0Ah0Aj0Bn<0CdCfChCjClCnD`DbDdDfDhDjDlDn000C`E`BlEbAnB`EdEfEhBhBjBf00AhAj000;<CdCfChCjClCnD`DbDdDfDhDjDlE`EfEhBhBjBfBn0CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAj103=<====3===<===<9===0==<1<<<<<;8;:14;1Bn<310<;:53210000090<0;40000000<252;00<<0CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlAnBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnB`EdEfEhBhBjBfAhAj9`;:0GbGdGfGhGjGlGnH`Hb3HdHfHhHjHlHnI`IbIdIfIh<IjIlGbGdInJ`GhGjJbJdJf??JhHj;6JjJlGnJnK`Kb7HnKdIlKfKhKjKn021L`0Lb012`Ld00000000`00000````````00000G`000``Lj101111111010100110101010Ll0LnM`1Mb2310Md00`0000000000```````````0000NhNb`````0Nd````1021`1MlMjN`MnNf7Lh7Lf7654329180753640878787654329109110065432918076543291807110532`42`6455335558701106543291807654329180765432918076543532O`Nn11111100001000001001111100000011101111101000000000011001111100011111111110111110100001110111110111111``110000000000000001111111110111001101010000000000000000000000000001000000000000000001011111111111101010`101010`10101010101`110101010","f":"````````{{}b}00{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000{cc{}}000{{}c{}}000{hb}{hj}{lj}{{lh}b}333{hn}{A`b}{A`l}{A`j}2{AbA`}{{Abb}A`}{nj}{{nb}Ab}{nb}{c{{Ad{e}}}{}{}}000{{}{{Ad{c}}}{}}000{dAf}000```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Ah}{AjAl}{{{d{An}}}{{Bb{{d{B`}}}}}}{{{d{An}}}{{d{Bd}}}}{{{d{Bf}}}{{d{Bd}}}}{{BhBj}Bl}{d{{d{c}}}{}}0000000000000000000000000000{{{d{f}}}{{d{fc}}}{}}0000000000000000000000000000{{BnBhBj}Bl}{{{d{Bl}}}{{d{{Cb{C`}}}}}}{{{d{Cd}}}Cd}{{{d{Cf}}}Cf}{{{d{Ch}}}Ch}{{{d{Cj}}}Cj}{{{d{Cl}}}Cl}{{{d{Cn}}}Cn}{{{d{D`}}}D`}{{{d{Db}}}Db}{{{d{Dd}}}Dd}{{{d{Df}}}Df}{{{d{Dh}}}Dh}{{{d{Dj}}}Dj}{{{d{Dl}}}Dl}{{{d{Dn}}}Dn}{{{d{C`}}}C`}{{{d{E`}}}E`}{{{d{Bl}}}Bl}{{{d{Eb}}}Eb}{{{d{An}}}An}{{{d{B`}}}B`}{{{d{Ed}}}Ed}{{{d{Ef}}}Ef}{{{d{Eh}}}Eh}{{{d{Bh}}}Bh}{{{d{Bj}}}Bj}{{{d{Bf}}}Bf}{{{d{Ah}}}Ah}{{{d{Aj}}}Aj}{{d{d{fc}}}j{}}000000000000000000000000000{{dEj}j}000000000000000000000000000{{Bn{d{Bd}}}Bn}{BhEl}`{{{d{Bl}}c}En{{Fd{{d{C`}}}{{F`{Fb}}}}}}{{BnCn}Bn}{{}Eb}{{}Bh}{{}Bj}{BnBn}0{{BnCl{d{{Cb{{d{Bd}}}}}}}Bn}{{{d{Aj}}}En}{{{d{Cd}}{d{Cd}}}Fb}{{{d{Cf}}{d{Cf}}}Fb}{{{d{Ch}}{d{Ch}}}Fb}{{{d{Cj}}{d{Cj}}}Fb}{{{d{Cl}}{d{Cl}}}Fb}{{{d{Cn}}{d{Cn}}}Fb}{{{d{D`}}{d{D`}}}Fb}{{{d{Db}}{d{Db}}}Fb}{{{d{Dd}}{d{Dd}}}Fb}{{{d{Df}}{d{Df}}}Fb}{{{d{Dh}}{d{Dh}}}Fb}{{{d{Dj}}{d{Dj}}}Fb}{{{d{Dl}}{d{Dl}}}Fb}{{{d{Dn}}{d{Dn}}}Fb}{{{d{C`}}{d{C`}}}Fb}{{{d{E`}}{d{E`}}}Fb}{{{d{Bl}}{d{Bl}}}Fb}{{{d{Eb}}{d{Eb}}}Fb}{{{d{An}}{d{An}}}Fb}{{{d{B`}}{d{B`}}}Fb}{{{d{Ed}}{d{Ed}}}Fb}{{{d{Ef}}{d{Ef}}}Fb}{{{d{Eh}}{d{Eh}}}Fb}{{{d{Bh}}{d{Bh}}}Fb}{{{d{Bj}}{d{Bj}}}Fb}{{{d{Bf}}{d{Bf}}}Fb}{{{d{Ah}}{d{Ah}}}Fb}{{{d{Aj}}{d{Aj}}}Fb}{{{d{Bl}}c}{{Al{{d{C`}}}}}{{Fd{{d{C`}}}{{F`{Fb}}}}}}{{{d{Bl}}c}{{Bb{{d{C`}}}}}{{Fd{{d{C`}}}{{F`{Fb}}}}}}{{Bn{d{{Cb{{d{Bd}}}}}}}Bn}{{{d{Cd}}{d{fFf}}}Fh}0{{{d{Cf}}{d{fFf}}}Fh}0{{{d{Ch}}{d{fFf}}}Fh}0{{{d{Cj}}{d{fFf}}}Fh}0{{{d{Cl}}{d{fFf}}}Fh}0{{{d{Cn}}{d{fFf}}}Fh}0{{{d{D`}}{d{fFf}}}Fh}0{{{d{Db}}{d{fFf}}}Fh}0{{{d{Dd}}{d{fFf}}}Fh}0{{{d{Df}}{d{fFf}}}Fh}0{{{d{Dh}}{d{fFf}}}Fh}0{{{d{Dj}}{d{fFf}}}Fh}0{{{d{Dl}}{d{fFf}}}Fh}0{{{d{Dn}}{d{fFf}}}Fh}0{{{d{C`}}{d{fFf}}}Fh}0{{{d{E`}}{d{fFf}}}Fh}0{{{d{Bl}}{d{fFf}}}Fh}0{{{d{Eb}}{d{fFf}}}Fh}{{{d{An}}{d{fFf}}}Fh}0{{{d{B`}}{d{fFf}}}Fh}{{{d{Ed}}{d{fFf}}}Fh}{{{d{Ef}}{d{fFf}}}Fh}{{{d{Eh}}{d{fFf}}}Fh}{{{d{Bh}}{d{fFf}}}Fh}0{{{d{Bj}}{d{fFf}}}Fh}0{{{d{Bf}}{d{fFf}}}Fh}0{{{d{Ah}}{d{fFf}}}Fh}0{{{d{Aj}}{d{fFf}}}Fh}0{{}Bn}{{Ch{Bb{An}}BhBj}Bl}{cc{}}0000000000000{AnDn}{AjDn}{BfDn}333333333333{{{d{Bd}}}Bf}4{FjBf}5{BfAj}6{{{d{Bd}}}Aj}{FjAj}{{{d{Bl}}c}Fb{{Fd{{d{C`}}}{{F`{Fb}}}}}}{{{d{E`}}}Fb}{{{d{Cd}}{d{fc}}}jFl}{{{d{Cf}}{d{fc}}}jFl}{{{d{Ch}}{d{fc}}}jFl}{{{d{Cj}}{d{fc}}}jFl}{{{d{Cl}}{d{fc}}}jFl}{{{d{Cn}}{d{fc}}}jFl}{{{d{D`}}{d{fc}}}jFl}{{{d{Db}}{d{fc}}}jFl}{{{d{Dd}}{d{fc}}}jFl}{{{d{Df}}{d{fc}}}jFl}{{{d{Dh}}{d{fc}}}jFl}{{{d{Dj}}{d{fc}}}jFl}{{{d{Dl}}{d{fc}}}jFl}{{{d{E`}}{d{fc}}}jFl}{{{d{Ef}}{d{fc}}}jFl}{{{d{Eh}}{d{fc}}}jFl}{{{d{Bh}}{d{fc}}}jFl}{{{d{Bj}}{d{fc}}}jFl}{{{d{Bf}}{d{fc}}}jFl}{{Bn{d{Bd}}}Bn}{{}c{}}0000000000000000000000000000{{{d{Ah}}}Fb}{{{d{Aj}}}Fb}{BjFb}{{{d{C`}}}Fb}{{{d{E`}}}Fb}1111211101110{{{d{An}}}Fb}2224221511111{{{d{Bl}}}E`}{B`Ed}{{{d{Bl}}}Bj}{EbBj}{AhBb}{BhEl}{{{d{Bl}}}Bh}2{{BnCf{d{{Cb{{d{Bd}}}}}}}Bn}{{{d{Bl}}}{{d{Bd}}}}{{{d{Bf}}}{{d{Bd}}}}{{{d{Aj}}}{{d{Bd}}}}{E`Bn}{{E`{d{Bd}}{Al{C`}}BhBj}Bl}{{FbBj}Eb}{{c{d{Eb}}}An{{Fn{Fj}}}}{{ElEl}Bh}{cBf{{Fn{Fj}}}}{{{Bb{An}}{Bb{An}}{Bb{An}}}Ah}{cAj{{Fn{Fj}}}}{BnBn}{{Bnb}Bn}{{Bn{d{Bd}}}Bn}20{B`Fj}{{}Bn}{{{Bb{Cn}}BhBj}Bl}1{EbFb}{Bj{{d{Bd}}}}{{Bn{d{{Cb{{d{Bd}}}}}}}Bn}{{BnD`}Bn}{{BnCd{d{{Cb{{d{Bd}}}}}}}Bn}{{BnCh{Bb{{d{Bd}}}}}Bn}{{BnCh}Bn}{{BnCh{Al{Cj}}{Bb{{d{Bd}}}}}Bn}5{{E`{d{Bd}}BhBj}Bl}{AnAh}{{}Bh}{AhBb}{BjEb}>>{{BhBj}Bl}0?{dc{}}000000000000000000000000000{dFj}0000000000000000000000{c{{Ad{e}}}{}{}}0000000000000000000000000000{{}{{Ad{c}}}{}}0000000000000000000000000000{dAf}0000000000000000000000000000{cAn{{Fn{Fj}}}}`{{{d{Bl}}}{{Ad{j{Al{G`}}}}}}8{{c{Al{Ah}}}Aj{{Fn{Fj}}}}{GbBb}{GdBb}{GfBf}{GhBb}{GjBb}{GlAn}{GnBb}{H`Cl}{HbAn}{GlBb}{HdAn}{HfAl}{HhAl}{HjAl}{HlAl}{HnAl}{I`Al}{IbAl}{IdAl}{IfAl}{IhAl}{H`Al}{IjAl}{IlAl}{GbAl}{GdAl}{InAl}{J`Al}{GhCh}{GjCh}{JbAn}{JdAn}{JfAn}{I`Bb}0{JhBb}{HjBb}{IlBb}{GhAl}{JjAn}{JlBb}{GnBf}{JnAn}{K`An}{KbAn}{JhDd}{HnCd}{KdAn}:{KfAn}{KhAl}{KjKl}{KnKl}0{KhFj}{KjAl}{L`Kl}{L`Ef}{LbEh}{LbKl}36`````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ld}}}Ld}{{d{d{fc}}}j{}}{{dEj}j}{{{d{Lf}}BhBj{d{Eb}}}{{Ad{BlLd}}}}{{{d{Ld}}{d{Ld}}}Fb}{{{d{Ld}}{d{fFf}}}Fh}0{cc{}}{{}c{}}{{{d{Lh}}{d{Eb}}}{{Ad{C`Ld}}}}{{{d{Bd}}}{{Ad{ClLd}}}}{{{d{Bd}}}{{Ad{E`Ld}}}}{{{d{Bd}}}{{Al{Dn}}}}{{{d{Bd}}}{{Ad{C`Ld}}}}0{{{d{Bd}}}{{Ad{CdLd}}}}1{dc{}}{dFj}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}``````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{G`}}}G`}{{d{d{fc}}}j{}}{{dEj}j}{{{d{G`}}{d{G`}}}Fb}{{{d{G`}}{d{fFf}}}Fh}0{cc{}}0{{}c{}}0{{{d{Lj}}{d{C`}}}{{Ad{jG`}}}}{E`Lj}?>==<<;;{{{d{Lj}}{d{{Cb{C`}}}}}{{Ad{j{Al{G`}}}}}}{LlFj}0{LnFj}{M`Al}1{MbFj}23{M`Fj}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Md}}}Md}{{d{d{fc}}}j{}}{{dEj}j}{{}Md}{{{d{Md}}{d{Md}}}Fb}{{{d{Md}}{d{fFf}}}Fh}{cc{}}{{}c{}}{MfFb}{{{d{Bd}}}{{Mh{{d{Bd}}{d{Bd}}}}}}000000{{{d{Bd}}}Fj}11{dc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}```````````````````{d{{d{c}}}{}}000000000{{{d{f}}}{{d{fc}}}{}}000000000{MjMl}{MnN`}{{}Mj}{{}Mn}{LfAl}{{{d{Nb}}}Nb}{{{d{Nd}}}Nd}{{d{d{fc}}}j{}}0{{dEj}j}0{{}Ml}7{{}N`}7{{}Nf}{{{d{Nh}}{d{Nh}}}Fb}{{{d{Lh}}{d{Lh}}}Fb}{{{d{Lf}}{d{Lf}}}Fb}{{{d{Nh}}{d{fFf}}}Fh}{{{d{Lh}}{d{fFf}}}Fh}0{{{d{Lf}}{d{fFf}}}Fh}0{cc{}}000000000{{}c{}}000000000{LhNh}{LhNj}{LfNj}{{}Mj}{{}Mn}{{N`Ml}Nf}`{{{d{N`}}{d{Bd}}{d{Ml}}}{{Mh{{d{Bd}}Lf}}}}{{{d{Nf}}{d{Bd}}}{{Mh{{d{Bd}}Lf}}}}{{{d{Bd}}}{{Mh{{d{Bd}}Lf}}}}{{{d{Ml}}{d{Bd}}}{{Mh{{d{Bd}}{Al{Lh}}}}}}{{{d{N`}}{Nj{Bd}}{d{Bd}}{d{Ml}}}{{Mh{{d{Bd}}Lf}}}}{{Mj{d{Bd}}}Mj}{{Mj{d{Bd}}{Nl{{Nj{Bd}}{d{Bd}}}{{F`{{Mh{{d{Bd}}Lh}}}}}}}Mj}{{Mn{d{Bd}}{Nl{{Nj{Bd}}{d{Bd}}{d{Ml}}}{{F`{{Mh{{d{Bd}}Lf}}}}}}}Mn}{{Mn{d{Bd}}}Mn}3{{Mj{d{Bd}}Nb}Mj}{{{d{fMj}}{d{Bd}}Nb}{{d{fMj}}}}{dc{}}0{{{d{Lf}}}Fj}{{{d{Lh}}}Fj}{dFj}0{c{{Ad{e}}}{}{}}000000000{{}{{Ad{c}}}{}}000000000{dAf}000000000{{MlFb}Ml}{{MjFb}Mj}{{N`Fb}N`}{{MnFb}Mn}{{MjNb}Mj}{{MnNd}Mn}{{NfMd}Nf}``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{Nn{{d{Bd}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{}Ml}{{{d{O`}}}O`}{{{d{Nn}}}Nn}{{d{d{fc}}}j{}}0{{dEj}j}0{{}N`}{{{d{O`}}{d{O`}}}Fb}{{{d{Nn}}{d{Nn}}}Fb}{{{d{O`}}{d{fFf}}}Fh}{{{d{Nn}}{d{fFf}}}Fh}{cc{}}0{{{d{O`}}{d{fc}}}jFl}{{{d{Nn}}{d{fc}}}jFl}{{}c{}}0{O`{{d{Bd}}}}{{}Nf}{O`Nb}{dc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0","D":"CLj","p":[[1,"i32"],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[1,"unit"],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[5,"OmpDirective",4],[8,"c_char",1398],[6,"Result",1399,null,1],[5,"TypeId",1400],[5,"ArraySection",56,1401],[5,"Variable",56,1401],[5,"Vec",1402],[6,"Expression",56,1403],[5,"ExpressionAst",56,1403],[6,"Option",1404,null,1],[1,"str"],[5,"Identifier",56,1401],[5,"SourceLocation",56,1405],[6,"Language",56,1405],[5,"DirectiveIR",56,1406],[5,"DirectiveBuilder",56,1407],[6,"ClauseData",56,1408],[1,"slice"],[6,"ReductionOperator",56,1408],[6,"MapType",56,1408],[6,"ScheduleKind",56,1408],[6,"ScheduleModifier",56,1408],[6,"DependType",56,1408],[6,"DefaultKind",56,1408],[6,"ProcBind",56,1408],[6,"MemoryOrder",56,1408],[6,"AtomicOp",56,1408],[6,"DeviceType",56,1408],[6,"LinearModifier",56,1408],[6,"LastprivateModifier",56,1408],[6,"OrderKind",56,1408],[6,"ClauseItem",56,1408],[6,"DirectiveKind",56,1406],[5,"ParserConfig",56,1403],[6,"ExpressionKind",56,1403],[6,"BinaryOperator",56,1403],[6,"UnaryOperator",56,1403],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1409],[5,"Formatter",1410],[8,"Result",1410],[5,"String",1411],[10,"Hasher",1412],[10,"Into",1413,null,1],[6,"ValidationError",947],[15,"Aligned",856],[15,"Allocate",856],[15,"Allocator",856],[15,"Schedule",856],[15,"DistSchedule",856],[15,"If",856],[15,"Generic",856],[15,"Depend",856],[15,"Device",856],[15,"Grainsize",856],[15,"Private",856],[15,"Firstprivate",856],[15,"Lastprivate",856],[15,"Shared",856],[15,"Reduction",856],[15,"Map",856],[15,"UseDevicePtr",856],[15,"UseDeviceAddr",856],[15,"IsDevicePtr",856],[15,"HasDeviceAddr",856],[15,"Affinity",856],[15,"Linear",856],[15,"Copyin",856],[15,"Copyprivate",856],[15,"Safelen",856],[15,"Simdlen",856],[15,"ThreadLimit",856],[15,"AtomicOperation",856],[15,"Collapse",856],[15,"Ordered",856],[15,"NumThreads",856],[15,"NumTeams",856],[15,"NumTasks",856],[15,"Priority",856],[15,"Filter",856],[15,"Call",906],[15,"ArrayAccess",906],[5,"Box",1414,null,1],[15,"Conditional",906],[15,"BinaryOp",906],[15,"UnaryOp",906],[6,"ConversionError",918],[5,"Directive",1017,1415],[5,"Clause",1017,1416],[5,"ValidationContext",947],[15,"ConflictingClauses",978],[15,"ClauseNotAllowed",978],[15,"InvalidCombination",978],[15,"MissingRequiredClause",978],[6,"Language",988],[1,"char"],[8,"IResult",1417],[5,"ClauseRegistryBuilder",1017,1416],[5,"ClauseRegistry",1017,1416],[5,"DirectiveRegistryBuilder",1017,1415],[5,"DirectiveRegistry",1017,1415],[6,"ClauseRule",1017,1416],[6,"DirectiveRule",1017,1415],[5,"Parser",1017],[6,"ClauseKind",1017,1416],[6,"Cow",1418],[1,"fn"],[6,"OpenMpDirective",1162],[6,"OpenMpClause",1162]],"r":[[56,1408],[57,1408],[58,1408],[59,1403],[60,1403],[61,1408],[62,1408],[63,1408],[64,1408],[65,1406],[66,1408],[67,1403],[68,1408],[69,1403],[70,1401],[71,1406],[72,1408],[73,1408],[74,1408],[75,1408],[76,1408],[77,1406],[78,1403],[79,1403],[80,1408],[81,1403],[82,1403],[83,1408],[84,1403],[85,1408],[86,1403],[87,1405],[88,1403],[89,1408],[90,1408],[91,1408],[92,1408],[93,1408],[94,1403],[95,1408],[96,1408],[97,1403],[98,918],[99,1408],[100,1408],[101,1405],[102,1406],[103,1408],[104,1406],[105,1406],[106,1406],[107,1406],[108,1406],[109,1408],[110,1408],[111,1408],[112,1408],[113,1408],[114,1408],[115,1406],[116,1403],[117,1408],[118,1408],[119,1408],[120,1407],[121,1406],[122,1406],[123,1408],[124,1406],[125,1406],[126,1406],[127,1406],[128,1403],[129,1408],[130,1403],[131,1406],[132,1403],[133,1408],[134,1408],[135,1403],[136,1403],[137,1408],[138,1408],[139,1408],[140,1406],[141,1406],[142,1406],[143,1405],[144,1408],[145,1403],[146,1408],[147,1408],[148,1403],[149,1408],[150,1408],[151,1408],[152,1401],[153,1408],[154,1403],[155,1408],[156,1408],[157,1408],[158,1403],[159,1408],[160,1408],[161,1405],[162,1408],[163,1408],[164,1403],[165,1408],[166,1408],[167,1408],[168,1403],[169,1408],[170,1406],[171,1403],[172,1408],[173,1408],[174,1406],[175,1408],[176,1406],[177,1408],[178,1408],[179,1406],[180,1408],[181,1408],[182,1403],[183,1408],[184,1403],[185,1408],[186,1408],[187,1403],[188,1403],[189,1408],[190,1408],[191,1408],[192,1406],[193,1408],[194,1408],[195,1408],[196,1403],[197,1408],[198,1408],[199,1408],[200,1406],[201,1408],[202,1406],[203,1406],[204,1406],[205,1406],[206,1406],[207,1406],[208,1406],[209,1406],[210,1403],[211,1403],[212,1403],[213,1408],[214,1408],[215,1408],[216,1408],[217,1408],[218,1408],[219,1408],[220,1408],[221,1408],[222,1408],[223,1408],[224,1408],[225,1408],[226,1406],[227,1408],[228,1408],[229,1406],[230,1408],[231,1408],[232,1408],[233,1406],[234,1406],[235,1408],[236,1408],[237,1408],[238,1403],[239,1403],[240,1408],[241,1406],[242,1408],[243,1406],[244,1408],[245,1408],[246,1405],[247,1408],[248,1408],[249,1403],[250,1408],[251,1406],[252,1406],[253,1406],[254,1406],[255,1406],[256,1406],[257,1406],[258,1406],[259,1406],[260,1406],[261,1406],[262,1406],[263,1406],[264,1406],[265,1406],[266,1406],[267,1406],[268,1406],[269,1406],[270,1406],[271,1406],[272,1406],[273,1406],[274,1406],[275,1406],[276,1406],[277,1406],[278,1406],[279,1408],[280,1406],[281,1408],[282,1408],[283,1403],[284,1403],[285,1406],[286,1405],[287,1403],[288,1408],[289,1408],[290,1408],[291,1408],[292,1408],[293,947],[294,947],[295,1401],[296,1408],[297,1406],[298,1408],[299,1401],[300,1401],[301,1403],[302,1403],[303,1401],[304,1406],[305,1407],[306,1408],[307,1408],[308,1408],[309,1408],[310,1408],[311,1408],[312,1408],[313,1408],[314,1408],[315,1408],[316,1408],[317,1408],[318,1408],[319,1408],[320,1408],[321,1406],[322,1406],[323,1403],[324,1403],[325,1403],[326,1403],[327,1403],[328,1403],[329,1405],[330,1405],[331,1401],[332,1401],[333,1401],[334,1407],[335,1408],[336,1408],[337,1408],[338,1408],[339,1408],[340,1408],[341,1408],[342,1408],[343,1408],[344,1408],[345,1408],[346,1408],[347,1408],[348,1408],[349,1408],[350,1406],[351,1406],[352,1403],[353,1403],[354,1403],[355,1403],[356,1403],[357,1403],[358,1405],[359,1405],[360,1401],[361,1401],[362,1401],[363,1407],[364,1406],[365,1408],[366,1408],[367,1408],[368,1408],[369,1408],[370,1408],[371,1408],[372,1408],[373,1408],[374,1408],[375,1408],[376,1408],[377,1408],[378,1408],[379,1408],[380,1406],[381,1406],[382,1403],[383,1403],[384,1403],[385,1403],[386,1403],[387,1403],[388,1405],[389,1405],[390,1401],[391,1401],[392,1401],[393,1408],[394,1408],[395,1408],[396,1408],[397,1408],[398,1408],[399,1408],[400,1408],[401,1408],[402,1408],[403,1408],[404,1408],[405,1408],[406,1408],[407,1408],[408,1406],[409,1406],[410,1403],[411,1403],[412,1403],[413,1403],[414,1403],[415,1403],[416,1405],[417,1405],[418,1401],[419,1401],[420,1401],[421,1408],[422,1408],[423,1408],[424,1408],[425,1408],[426,1408],[427,1408],[428,1408],[429,1408],[430,1408],[431,1408],[432,1408],[433,1408],[434,1408],[435,1408],[436,1406],[437,1406],[438,1403],[439,1403],[440,1403],[441,1403],[442,1403],[443,1403],[444,1405],[445,1405],[446,1401],[447,1401],[448,1401],[449,1407],[450,1405],[452,1406],[453,1407],[454,1403],[455,1405],[456,1405],[457,1407],[458,1407],[459,1407],[460,1401],[461,1408],[462,1408],[463,1408],[464,1408],[465,1408],[466,1408],[467,1408],[468,1408],[469,1408],[470,1408],[471,1408],[472,1408],[473,1408],[474,1408],[475,1408],[476,1406],[477,1406],[478,1403],[479,1403],[480,1403],[481,1403],[482,1403],[483,1403],[484,1405],[485,1405],[486,1401],[487,1401],[488,1401],[489,1406],[490,1406],[491,1407],[492,1408],[493,1408],[494,1408],[495,1408],[496,1408],[497,1408],[498,1408],[499,1408],[500,1408],[501,1408],[502,1408],[503,1408],[504,1408],[505,1408],[506,1408],[507,1408],[508,1408],[509,1408],[510,1408],[511,1408],[512,1408],[513,1408],[514,1408],[515,1408],[516,1408],[517,1408],[518,1408],[519,1408],[520,1408],[521,1408],[522,1406],[523,1406],[524,1406],[525,1406],[526,1403],[527,1403],[528,1403],[529,1403],[530,1403],[531,1403],[532,1403],[533,1405],[534,1405],[535,1405],[536,1405],[537,1401],[538,1401],[539,1401],[540,1401],[541,1401],[542,1401],[543,1407],[544,1406],[545,1407],[546,1408],[547,1408],[548,1408],[549,1408],[550,1408],[551,1408],[552,1408],[553,1408],[554,1408],[555,1408],[556,1408],[557,1408],[558,1408],[559,1408],[560,1408],[561,1408],[562,1408],[563,1408],[564,1406],[565,1406],[566,1403],[567,1403],[568,1403],[569,1403],[570,1403],[571,1403],[572,1405],[573,1405],[574,1401],[575,1401],[576,1401],[577,1401],[578,1401],[579,1401],[580,1401],[581,1401],[582,1406],[583,1406],[584,1408],[585,1408],[586,1408],[587,1408],[588,1408],[589,1408],[590,1408],[591,1408],[592,1408],[593,1408],[594,1408],[595,1408],[596,1408],[597,1406],[598,1403],[599,1403],[600,1405],[601,1405],[602,1401],[603,1407],[604,1407],[605,1408],[606,1408],[607,1408],[608,1408],[609,1408],[610,1408],[611,1408],[612,1408],[613,1408],[614,1408],[615,1408],[616,1408],[617,1408],[618,1408],[619,1408],[620,1406],[621,1406],[622,1403],[623,1403],[624,1403],[625,1403],[626,1403],[627,1403],[628,1405],[629,1405],[630,1401],[631,1401],[632,1401],[633,1401],[634,1401],[635,1405],[636,1408],[637,1406],[638,1408],[639,1408],[640,1408],[641,1408],[642,1405],[643,1408],[644,1408],[645,1408],[646,1406],[647,1408],[648,1408],[649,1408],[650,1406],[651,1403],[652,1408],[653,1408],[654,1408],[655,1401],[656,1408],[657,1408],[658,1406],[659,1401],[660,1406],[661,1406],[662,1406],[663,1406],[664,1406],[665,1406],[666,1403],[667,1406],[668,1403],[669,1401],[670,1405],[671,1406],[672,1401],[673,1407],[674,1406],[675,1401],[676,1401],[677,1407],[678,1406],[679,1403],[680,1403],[681,1405],[682,1401],[683,1401],[684,1401],[685,1407],[686,1407],[687,1407],[688,1407],[689,1407],[690,1403],[691,1407],[692,1406],[693,1407],[694,1403],[695,1405],[696,1407],[697,1407],[698,1407],[699,1407],[700,1407],[701,1407],[702,1407],[703,1406],[704,1401],[705,1405],[706,1401],[707,1403],[708,1407],[709,1407],[710,1406],[711,1406],[712,1407],[713,1408],[714,1408],[715,1408],[716,1408],[717,1408],[718,1408],[719,1408],[720,1408],[721,1408],[722,1408],[723,1408],[724,1408],[725,1408],[726,1408],[727,1408],[728,1406],[729,1406],[730,1403],[731,1403],[732,1403],[733,1403],[734,1403],[735,1403],[736,1405],[737,1405],[738,1401],[739,1401],[740,1401],[741,1408],[742,1408],[743,1408],[744,1408],[745,1408],[746,1408],[747,1408],[748,1408],[749,1408],[750,1408],[751,1408],[752,1408],[753,1408],[754,1408],[755,1408],[756,1406],[757,1406],[758,1403],[759,1405],[760,1405],[761,1401],[762,1401],[763,1401],[764,1407],[765,1408],[766,1408],[767,1408],[768,1408],[769,1408],[770,1408],[771,1408],[772,1408],[773,1408],[774,1408],[775,1408],[776,1408],[777,1408],[778,1408],[779,1408],[780,1406],[781,1406],[782,1403],[783,1403],[784,1403],[785,1403],[786,1403],[787,1403],[788,1405],[789,1405],[790,1401],[791,1401],[792,1401],[793,1407],[794,1408],[795,1408],[796,1408],[797,1408],[798,1408],[799,1408],[800,1408],[801,1408],[802,1408],[803,1408],[804,1408],[805,1408],[806,1408],[807,1408],[808,1408],[809,1406],[810,1406],[811,1403],[812,1403],[813,1403],[814,1403],[815,1403],[816,1403],[817,1405],[818,1405],[819,1401],[820,1401],[821,1401],[822,1407],[823,1408],[824,1408],[825,1408],[826,1408],[827,1408],[828,1408],[829,1408],[830,1408],[831,1408],[832,1408],[833,1408],[834,1408],[835,1408],[836,1408],[837,1408],[838,1406],[839,1406],[840,1403],[841,1403],[842,1403],[843,1403],[844,1403],[845,1403],[846,1405],[847,1405],[848,1401],[849,1401],[850,1401],[851,1403],[853,1406],[854,1403],[855,1401],[1017,1416],[1018,1416],[1019,1416],[1020,1416],[1021,1416],[1022,1416],[1023,1416],[1024,1416],[1025,1415],[1026,1415],[1027,1415],[1028,1415],[1029,1415],[1030,1416],[1031,1415],[1032,1416],[1033,1416],[1035,1416],[1036,1416],[1037,1416],[1038,1415],[1039,1415],[1041,1416],[1042,1416],[1043,1416],[1044,1415],[1045,1415],[1046,1416],[1047,1416],[1048,1415],[1049,1415],[1051,1416],[1052,1416],[1053,1416],[1054,1415],[1055,1415],[1056,1416],[1057,1415],[1058,1416],[1059,1415],[1060,1415],[1061,1416],[1062,1415],[1063,1416],[1064,1415],[1065,1416],[1066,1415],[1067,1416],[1068,1416],[1069,1415],[1070,1415],[1072,1416],[1073,1416],[1074,1415],[1075,1416],[1076,1416],[1077,1416],[1078,1415],[1079,1415],[1080,1416],[1081,1416],[1082,1415],[1083,1415],[1085,1416],[1086,1416],[1087,1416],[1088,1415],[1089,1415],[1090,1416],[1091,1416],[1092,1415],[1093,1415],[1095,1416],[1096,1416],[1097,1416],[1098,1415],[1099,1415],[1100,1416],[1101,1416],[1102,1415],[1103,1416],[1104,1415],[1107,1415],[1110,1416],[1111,1415],[1112,1416],[1113,1416],[1114,1415],[1115,1415],[1116,1416],[1117,1416],[1118,1416],[1119,1416],[1120,1415],[1121,1415],[1122,1416],[1123,1416],[1124,1415],[1125,1416],[1126,1416],[1127,1415],[1128,1415],[1130,1416],[1131,1416],[1132,1416],[1133,1415],[1134,1415],[1135,1416],[1136,1416],[1137,1415],[1138,1415],[1140,1416],[1141,1416],[1142,1416],[1143,1415],[1144,1415],[1145,1416],[1146,1416],[1147,1415],[1148,1415],[1150,1416],[1151,1416],[1152,1416],[1153,1415],[1154,1415],[1155,1416],[1156,1416],[1157,1415],[1158,1415],[1159,1416],[1160,1415]],"b":[[492,"impl-Debug-for-ReductionOperator"],[493,"impl-Display-for-ReductionOperator"],[494,"impl-Debug-for-MapType"],[495,"impl-Display-for-MapType"],[496,"impl-Display-for-ScheduleKind"],[497,"impl-Debug-for-ScheduleKind"],[498,"impl-Debug-for-ScheduleModifier"],[499,"impl-Display-for-ScheduleModifier"],[500,"impl-Debug-for-DependType"],[501,"impl-Display-for-DependType"],[502,"impl-Debug-for-DefaultKind"],[503,"impl-Display-for-DefaultKind"],[504,"impl-Debug-for-ProcBind"],[505,"impl-Display-for-ProcBind"],[506,"impl-Display-for-MemoryOrder"],[507,"impl-Debug-for-MemoryOrder"],[508,"impl-Debug-for-AtomicOp"],[509,"impl-Display-for-AtomicOp"],[510,"impl-Debug-for-DeviceType"],[511,"impl-Display-for-DeviceType"],[512,"impl-Debug-for-LinearModifier"],[513,"impl-Display-for-LinearModifier"],[514,"impl-Display-for-LastprivateModifier"],[515,"impl-Debug-for-LastprivateModifier"],[516,"impl-Display-for-OrderKind"],[517,"impl-Debug-for-OrderKind"],[518,"impl-Debug-for-ClauseItem"],[519,"impl-Display-for-ClauseItem"],[520,"impl-Debug-for-ClauseData"],[521,"impl-Display-for-ClauseData"],[522,"impl-Debug-for-DirectiveKind"],[523,"impl-Display-for-DirectiveKind"],[524,"impl-Display-for-DirectiveIR"],[525,"impl-Debug-for-DirectiveIR"],[527,"impl-Display-for-Expression"],[528,"impl-Debug-for-Expression"],[533,"impl-Debug-for-SourceLocation"],[534,"impl-Display-for-SourceLocation"],[535,"impl-Display-for-Language"],[536,"impl-Debug-for-Language"],[537,"impl-Debug-for-Identifier"],[538,"impl-Display-for-Identifier"],[539,"impl-Debug-for-ArraySection"],[540,"impl-Display-for-ArraySection"],[541,"impl-Debug-for-Variable"],[542,"impl-Display-for-Variable"],[559,"impl-From%3CExpression%3E-for-ClauseItem"],[560,"impl-From%3CVariable%3E-for-ClauseItem"],[561,"impl-From%3CIdentifier%3E-for-ClauseItem"],[574,"impl-From%3C%26str%3E-for-Identifier"],[576,"impl-From%3CString%3E-for-Identifier"],[578,"impl-From%3CIdentifier%3E-for-Variable"],[580,"impl-From%3C%26str%3E-for-Variable"],[581,"impl-From%3CString%3E-for-Variable"],[930,"impl-Debug-for-ConversionError"],[931,"impl-Display-for-ConversionError"],[961,"impl-Debug-for-ValidationError"],[962,"impl-Display-for-ValidationError"],[1076,"impl-Debug-for-Clause%3C\'a%3E"],[1077,"impl-Display-for-Clause%3C\'a%3E"],[1078,"impl-Debug-for-Directive%3C\'a%3E"],[1079,"impl-Display-for-Directive%3C\'a%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAJEDMQADAAEADAAHAC0ACwA7AAIARAAAAFEABgBjAAAAaAAAAHUAAACBAAAAgwAAAJIAAACVAAAApQAAAKgAAgCsAAAAsgAAALUAAgC5AAEAvAABAMUAAADvAAEA+gABACYBAQAyATkAbgFTAM4BGwDtASkAGQIDAB4CAAAwAgIAPwIAAEECAABDAgAARQIBAEkCEgDKAokAWQM9AJwDBACiAwIArwMEALoDCQDKAwcA0wMJAOEDBwD2A0IATQQYAWgFAQBsBQoA","P":[[11,"T"],[23,"U"],[27,""],[44,"U,T"],[48,"U"],[52,""],[305,"T"],[363,""],[393,"T"],[421,""],[452,"F"],[453,""],[489,"F"],[491,""],[545,"T"],[559,""],[562,"T"],[574,""],[575,"T"],[576,""],[577,"T"],[578,""],[579,"T"],[580,""],[582,"F"],[583,""],[584,"__H"],[603,""],[604,"U"],[633,""],[713,"T"],[741,""],[764,"U,T"],[793,"U"],[822,""],[923,"T"],[925,""],[926,"T"],[927,""],[932,"T"],[933,"U"],[934,""],[942,"T"],[943,""],[944,"U,T"],[945,"U"],[946,""],[953,"T"],[957,""],[958,"T"],[959,""],[963,"T"],[965,"U"],[967,""],[969,"T"],[970,""],[971,"U,T"],[973,"U"],[975,""],[992,"T"],[994,""],[995,"T"],[996,""],[1000,"T"],[1001,"U"],[1002,""],[1013,"T"],[1014,"U,T"],[1015,"U"],[1016,""],[1036,"T"],[1056,""],[1063,"T"],[1065,""],[1080,"T"],[1090,"U"],[1100,""],[1119,"T"],[1121,""],[1125,"U,T"],[1135,"U"],[1145,""],[1365,"T"],[1369,""],[1372,"T"],[1374,""],[1381,"T"],[1383,"__H"],[1385,"U"],[1387,""],[1390,"T"],[1392,"U,T"],[1394,"U"],[1396,""]]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1186,39537,173]}