var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","calculate_combined_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_acc_clause_mappings","parse_acc_directive_mappings","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[17,"alloc::string"],[18,"core::option"],[19,"syn::expr"],[20,"core::ops::function"],[21,"syn::stmt"],[22,"alloc::vec"]],"i":"`````````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{}{{An{{j{hf}}}}}}0{{{n{Ah}}}{{Ab{{j{hf}}}}}}101","D":"B`","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",17],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",18,null,1],[6,"Expr",19],[0,"mut"],[5,"Arm",19],[10,"FnMut",20],[6,"Stmt",21],[5,"Vec",22]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[8,"F"],[10,""]]}],["roup",{"t":"CCCCFFFFFFFFSSSHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHHHHHNNNNPPFGFFGPPGFFFGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCCNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","AccClause","AccClauseIterator","AccDirective","AccStringList","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","acc_clause_expression_at","acc_clause_expressions_count","acc_clause_iterator_free","acc_clause_iterator_next","acc_clause_kind","acc_directive_clause_count","acc_directive_clauses_iter","acc_directive_free","acc_directive_kind","acc_directive_name","acc_parse","acc_parse_with_language","acc_string_list_free","borrow","","","","","","","","borrow_mut","","","","","","","","from","","","","","","","","into","","","","","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","","","","","try_into","","","","","","","","type_id","","","","","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_acc","lex_clause","lex_dialect_keyword","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_fixed_sentinel_with_prefix","lex_fortran_free_sentinel","lex_fortran_free_sentinel_with_prefix","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Dialect","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","OpenAcc","OpenMp","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","","borrow_mut","","","","","","","","","","","build","","builder","","clauses","clone","","","clone_into","","","clone_to_uninit","","","default","","","","","eq","","","","fmt","","","","","","from","","","","","","","","","","","into","","","","","","","","","","","kind","name","","new","","","openacc","openmp","parse","","parse_acc_directive","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","","to_pragma_string","to_pragma_string_with_prefix","to_source_string","to_string","","try_from","","","","","","","","","","","try_into","","","","","","","","","","","type_id","","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_dialect","with_language","ALL","","Async","Atomic","Attach","Auto","Bind","Cache","Capture","Collapse","Copy","Copyin","Copyout","Create","Data","Declare","Default","DefaultAsync","Delete","Detach","Device","DeviceNum","DeviceResident","DeviceType","Deviceptr","End","EnterData","EnterDataUnderscore","ExitData","ExitDataUnderscore","Finalize","Firstprivate","Gang","Host","HostData","HostDataSpace","If","IfPresent","Independent","Init","Kernels","KernelsLoop","Link","Loop","NoCreate","Nohost","NumGangs","NumWorkers","OpenAccClause","OpenAccDirective","Parallel","ParallelLoop","Present","Private","Read","Reduction","Routine","SelfClause","Seq","Serial","SerialLoop","Set","Shutdown","Tile","Update","","UseDevice","Vector","VectorLength","Wait","","Worker","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id","","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndAssumes","EndDeclareTarget","EndDeclareVariant","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","MasterTaskloop","MasterTaskloopSimd","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[104,"roup::ir"],[995,"roup::ir::ClauseData"],[1045,"roup::ir::ExpressionKind"],[1057,"roup::ir::convert"],[1066,"roup::ir::translate"],[1090,"roup::ir::validate"],[1121,"roup::ir::validate::ValidationError"],[1131,"roup::lexer"],[1164,"roup::parser"],[1329,"roup::parser::openacc"],[1436,"roup::parser::openmp"],[1737,"std::os::raw"],[1738,"core::result"],[1739,"core::any"],[1740,"roup::ir::variable"],[1741,"alloc::vec"],[1742,"roup::ir::expression"],[1743,"core::option"],[1744,"roup::ir::directive"],[1745,"roup::ir::types"],[1746,"roup::ir::builder"],[1747,"roup::ir::clause"],[1748,"roup::ir::error"],[1749,"core::ops::function"],[1750,"core::fmt"],[1751,"alloc::string"],[1752,"core::hash"],[1753,"core::convert"],[1754,"alloc::boxed"],[1755,"roup::parser::directive"],[1756,"roup::parser::clause"],[1757,"nom::internal"],[1758,"alloc::borrow"]],"i":"````````````````````````````AjAdAfAhldhn765432107654321076543210````````````````````765432107654321076543210Dl0CnF`FbCj0D`1Bl204E`En`222224`4222Db5333331`8768787Cd244Dn``Dj84EfEd6`::48=888888:`9:`Df9<;`;```9;99999999=99699=9`Eh<``<Dh=;;;7<;?==;?8=:`19=229;;Ej>>`>`F`?`CnFb1?2Cj`Bl00;03`0334Dd54953E`81233363`32:222222222222222EnBf`?5:5`5Dn6`EbDlD`188Db:9:``9992?:==89:9Df0`:Dj2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;CdEj09=08>>77```Eh>>9B`Bb<Bl=C`CfChCn=<Dd<Dh<DlDnE`EbEdEf?Cj=;EjElBfBhEnF`FbCbCdC`B`BbChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCh=CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCh5``=0;540001CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`Bb<<ChCn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0E`0Eb0Ed0Ef0Eh0Cj0Bl0Cf0Ej0ElBf0BhEnF`FbCb0Cd0C`0B`0Bb0:Ch=0CnD`DbDdDfDhDjDlDnE`EbEdEfEh000CjBlCfEjElBfBhEnF`FbCbCdC`00B`Bb000<=CnD`DbDdDfDhDjDlDnE`EbEdEfBlF`FbCbCdC`Ch0CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`Bb<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1Ch=31>0=;:53210000090=0;4000000=0=252;00==0CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjBfCbCdC`B`Bb7`ChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`Bb9`<:::0GlGnH`HbHdHfHhHjHl3HnI`IbIdIfIhIjIlInJ`Jb<JdJfGlGnJhJjHbHdJlJnK`??KbId;6KdKfHhKhKjKl7IhKnJfL`LbLdLh021Lj0Ll012`````````Mb00`0000000000000````000Gj000``Md101111111010100110101010Mf0MhMj1Ml2310Mn00`0000000000```````````````0000OdNl`````0Nn`````10O`032`2NfNdNjNhOb8M`8Ln8765432:190875364098798798765432:107:1100765432:1908765432:19087110532``42``6455335559870011065432:1908765432:1908765432:1908765435322OlOj1011101111110011111111100000111100111000101111``0011110110000110111101101010`101010`10101010101`110101010A@`On111111110101100100010000000010011111111100000001110111111010000000000110001011111000110111011111111111110101111110110000001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"````````````{{}b}00{{db}f}{db}{hj}{{hd}b}2{lb}{lh}{lj}2{lf}{fl}{{fb}l}{nj}{A`{{A`{c}}}{}}0000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000{cc{}}0000000{{}c{}}0000000{Adb}{Adj}{Afj}{{AfAd}b}333{AdAh}{{fbb}f}{Ajb}{AjAf}{Ajj}2{Ajf}{fAj}{{fb}Aj}{fj}{Ahj}{{Ahb}f}{Ahb}{c{{Al{e}}}{}{}}0000000{{}{{Al{c}}}{}}0000000{A`An}0000000````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}B`}{BbBd}{{{A`{Bf}}}{{Bj{{A`{Bh}}}}}}{Bl{{A`{Bn}}}}{{{A`{Bf}}}{{A`{Bn}}}}{{{A`{C`}}}{{A`{Bn}}}}{{CbCd}Cf}{A`{{A`{c}}}{}}00000000000000000000000000000{{{A`{Ab}}}{{A`{Abc}}}{}}00000000000000000000000000000{{ChCbCd}Cf}{{{A`{Cf}}}{{A`{{Cl{Cj}}}}}}{{{A`{Cn}}}Cn}{{{A`{D`}}}D`}{{{A`{Db}}}Db}{{{A`{Dd}}}Dd}{{{A`{Df}}}Df}{{{A`{Dh}}}Dh}{{{A`{Dj}}}Dj}{{{A`{Dl}}}Dl}{{{A`{Dn}}}Dn}{{{A`{E`}}}E`}{{{A`{Eb}}}Eb}{{{A`{Ed}}}Ed}{{{A`{Ef}}}Ef}{{{A`{Eh}}}Eh}{{{A`{Cj}}}Cj}{{{A`{Bl}}}Bl}{{{A`{Cf}}}Cf}{{{A`{Ej}}}Ej}{{{A`{El}}}El}{{{A`{Bf}}}Bf}{{{A`{Bh}}}Bh}{{{A`{En}}}En}{{{A`{F`}}}F`}{{{A`{Fb}}}Fb}{{{A`{Cb}}}Cb}{{{A`{Cd}}}Cd}{{{A`{C`}}}C`}{{{A`{B`}}}B`}{{{A`{Bb}}}Bb}{{A`{A`{Abc}}}j{}}0000000000000000000000000000{{A`Fd}j}0000000000000000000000000000{{Ch{A`{Bn}}}Ch}{CbFf}``{{{A`{Cf}}c}Fh{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{ChDh}Ch}{{}El}{{}Cb}{{}Cd}{ChCh}0{{ChDf{A`{{Cl{{A`{Bn}}}}}}}Ch}{{{A`{Bb}}}Fh}{{{A`{Cn}}{A`{Cn}}}Fl}{{{A`{D`}}{A`{D`}}}Fl}{{{A`{Db}}{A`{Db}}}Fl}{{{A`{Dd}}{A`{Dd}}}Fl}{{{A`{Df}}{A`{Df}}}Fl}{{{A`{Dh}}{A`{Dh}}}Fl}{{{A`{Dj}}{A`{Dj}}}Fl}{{{A`{Dl}}{A`{Dl}}}Fl}{{{A`{Dn}}{A`{Dn}}}Fl}{{{A`{E`}}{A`{E`}}}Fl}{{{A`{Eb}}{A`{Eb}}}Fl}{{{A`{Ed}}{A`{Ed}}}Fl}{{{A`{Ef}}{A`{Ef}}}Fl}{{{A`{Eh}}{A`{Eh}}}Fl}{{{A`{Cj}}{A`{Cj}}}Fl}{{{A`{Bl}}{A`{Bl}}}Fl}{{{A`{Cf}}{A`{Cf}}}Fl}{{{A`{Ej}}{A`{Ej}}}Fl}{{{A`{El}}{A`{El}}}Fl}{{{A`{Bf}}{A`{Bf}}}Fl}{{{A`{Bh}}{A`{Bh}}}Fl}{{{A`{En}}{A`{En}}}Fl}{{{A`{F`}}{A`{F`}}}Fl}{{{A`{Fb}}{A`{Fb}}}Fl}{{{A`{Cb}}{A`{Cb}}}Fl}{{{A`{Cd}}{A`{Cd}}}Fl}{{{A`{C`}}{A`{C`}}}Fl}{{{A`{B`}}{A`{B`}}}Fl}{{{A`{Bb}}{A`{Bb}}}Fl}{{{A`{Cf}}c}{{Bd{{A`{Cj}}}}}{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{{A`{Cf}}c}{{Bj{{A`{Cj}}}}}{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{Ch{A`{{Cl{{A`{Bn}}}}}}}Ch}{{{A`{Cn}}{A`{AbG`}}}Gb}0{{{A`{D`}}{A`{AbG`}}}Gb}0{{{A`{Db}}{A`{AbG`}}}Gb}0{{{A`{Dd}}{A`{AbG`}}}Gb}0{{{A`{Df}}{A`{AbG`}}}Gb}0{{{A`{Dh}}{A`{AbG`}}}Gb}0{{{A`{Dj}}{A`{AbG`}}}Gb}0{{{A`{Dl}}{A`{AbG`}}}Gb}0{{{A`{Dn}}{A`{AbG`}}}Gb}0{{{A`{E`}}{A`{AbG`}}}Gb}0{{{A`{Eb}}{A`{AbG`}}}Gb}0{{{A`{Ed}}{A`{AbG`}}}Gb}0{{{A`{Ef}}{A`{AbG`}}}Gb}0{{{A`{Eh}}{A`{AbG`}}}Gb}0{{{A`{Cj}}{A`{AbG`}}}Gb}0{{{A`{Bl}}{A`{AbG`}}}Gb}0{{{A`{Cf}}{A`{AbG`}}}Gb}0{{{A`{Ej}}{A`{AbG`}}}Gb}0{{{A`{El}}{A`{AbG`}}}Gb}{{{A`{Bf}}{A`{AbG`}}}Gb}0{{{A`{Bh}}{A`{AbG`}}}Gb}{{{A`{En}}{A`{AbG`}}}Gb}{{{A`{F`}}{A`{AbG`}}}Gb}{{{A`{Fb}}{A`{AbG`}}}Gb}{{{A`{Cb}}{A`{AbG`}}}Gb}0{{{A`{Cd}}{A`{AbG`}}}Gb}0{{{A`{C`}}{A`{AbG`}}}Gb}0{{{A`{B`}}{A`{AbG`}}}Gb}0{{{A`{Bb}}{A`{AbG`}}}Gb}0{{{A`{El}}Cd}El}{{}Ch}{{Db{Bj{Bf}}CbCd}Cf}{cc{}}00000000000000{BfEh}{BbEh}{C`Eh}333333333333{GdC`}{{{A`{Bn}}}C`}55{{{A`{Bn}}}Bb}{GdBb}{C`Bb}8{{{A`{Cf}}c}Fl{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{{A`{Bl}}}Fl}{{{A`{Cn}}{A`{Abc}}}jGf}{{{A`{D`}}{A`{Abc}}}jGf}{{{A`{Db}}{A`{Abc}}}jGf}{{{A`{Dd}}{A`{Abc}}}jGf}{{{A`{Df}}{A`{Abc}}}jGf}{{{A`{Dh}}{A`{Abc}}}jGf}{{{A`{Dj}}{A`{Abc}}}jGf}{{{A`{Dl}}{A`{Abc}}}jGf}{{{A`{Dn}}{A`{Abc}}}jGf}{{{A`{E`}}{A`{Abc}}}jGf}{{{A`{Eb}}{A`{Abc}}}jGf}{{{A`{Ed}}{A`{Abc}}}jGf}{{{A`{Ef}}{A`{Abc}}}jGf}{{{A`{Bl}}{A`{Abc}}}jGf}{{{A`{F`}}{A`{Abc}}}jGf}{{{A`{Fb}}{A`{Abc}}}jGf}{{{A`{Cb}}{A`{Abc}}}jGf}{{{A`{Cd}}{A`{Abc}}}jGf}{{{A`{C`}}{A`{Abc}}}jGf}{{Ch{A`{Bn}}}Ch}{{}c{}}00000000000000000000000000000{{CfCd}Cf}{{{A`{B`}}}Fl}{{{A`{Bb}}}Fl}{CdFl}{{{A`{Cj}}}Fl}{{{A`{Bl}}}Fl}1111211101110{{{A`{Bf}}}Fl}2224221511111{{{A`{Cf}}}Bl}{BhEn}{{{A`{Cf}}}Cd}{{{A`{El}}}Cd}{{{A`{El}}}Fl}{B`Bj}{CbFf}{{{A`{Cf}}}Cb}2{{ChD`{A`{{Cl{{A`{Bn}}}}}}}Ch}{{{A`{Cf}}}{{A`{Bn}}}}{{{A`{C`}}}{{A`{Bn}}}}{{{A`{Bb}}}{{A`{Bn}}}}{{BlCd}{{A`{Bn}}}}{BlCh}{{Bl{A`{Bn}}{Bd{Cj}}CbCd}Cf}{{FlCd}El}{{c{A`{El}}}Bf{{Gh{Gd}}}}{{FfFf}Cb}{cC`{{Gh{Gd}}}}{{{Bj{Bf}}{Bj{Bf}}{Bj{Bf}}}B`}{cBb{{Gh{Gd}}}}{ChCh}{{Chb}Ch}{{Ch{A`{Bn}}}Ch}20{BhGd}{{}Ch}{{{Bj{Dh}}CbCd}Cf}1{ElFl}{Cd{{A`{Bn}}}}{{Ch{A`{{Cl{{A`{Bn}}}}}}}Ch}{{ChDj}Ch}{{ChCn{A`{{Cl{{A`{Bn}}}}}}}Ch}{{ChDb{Bj{{A`{Bn}}}}}Ch}{{ChDb}Ch}{{ChDb{Bd{Dd}}{Bj{{A`{Bn}}}}}Ch}{{{A`{AbCf}}Cd}j}6{{Bl{A`{Bn}}CbCd}Cf}{BfB`}{{}Cb}{B`Bj}{CdEl}??{{CbCd}Cf}0{{}Ch}{A`c{}}0000000000000000000000000000{A`Gd}00000000000000000000000{{{A`{Cf}}Cd}Gd}`{c{{Al{e}}}{}{}}00000000000000000000000000000{{}{{Al{c}}}{}}00000000000000000000000000000{A`An}00000000000000000000000000000{cBf{{Gh{Gd}}}}`{{{A`{Cf}}}{{Al{j{Bd{Gj}}}}}}{{ElCd}El}{{ElFl}El}<{{c{Bd{B`}}}Bb{{Gh{Gd}}}}{GlBj}{GnBj}{H`C`}{HbBj}{HdBj}{HfBf}{HhBj}{HjDf}{HlBf}{HfBj}{HnBf}{I`Bd}{IbBd}{IdBd}{IfBd}{IhBd}{IjBd}{IlBd}{InBd}{J`Bd}{JbBd}{HjBd}{JdBd}{JfBd}{GlBd}{GnBd}{JhBd}{JjBd}{HbDb}{HdDb}{JlBf}{JnBf}{K`Bf}{IjBj}0{KbBj}{IdBj}{JfBj}{HbBd}{KdBf}{KfBj}{HhC`}{KhBf}{KjBf}{KlBf}{KbDn}{IhCn}{KnBf}:{L`Bf}{LbBd}{LdLf}{LhLf}0{LbGd}{LdBd}{LjLf}{LjF`}{LlFb}{LlLf}36{{{A`{Ln}}CbCd{A`{El}}}{{Al{CfEj}}}}{{{A`{M`}}{A`{El}}}{{Al{CjEj}}}}{{{A`{Bn}}}{{Al{DfEj}}}}{{{A`{Bn}}}{{Al{BlEj}}}}{{{A`{Bn}}{A`{El}}}{{Al{{Bd{Eh}}Ej}}}}{{{A`{Bn}}{A`{El}}}{{Al{CjEj}}}}0{{{A`{Bn}}}{{Al{CnEj}}}}1````{A`{{A`{c}}}{}}{{{A`{Ab}}}{{A`{Abc}}}{}}{{{A`{Mb}}}Mb}{{A`{A`{Abc}}}j{}}{{A`Fd}j}{{{A`{Mb}}{A`{Mb}}}Fl}{{{A`{Mb}}{A`{AbG`}}}Gb}0{cc{}}{EjMb}{{}c{}}{A`c{}}{A`Gd}{{{A`{Bn}}}{{Al{GdMb}}}}{{{A`{Bn}}El}{{Al{CfMb}}}}10{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{Gj}}}Gj}{{A`{A`{Abc}}}j{}}{{A`Fd}j}{{{A`{Gj}}{A`{Gj}}}Fl}{{{A`{Gj}}{A`{AbG`}}}Gb}0{cc{}}0??{{{A`{Md}}{A`{Cj}}}{{Al{jGj}}}}{BlMd}{A`c{}}{A`Gd}>>==<<{{{A`{Md}}{A`{{Cl{Cj}}}}}{{Al{j{Bd{Gj}}}}}}{MfGd}0{MhGd}{MjBd}1{MlGd}23{MjGd}1````{A`{{A`{c}}}{}}{{{A`{Ab}}}{{A`{Abc}}}{}}{{{A`{Mn}}}Mn}{{A`{A`{Abc}}}j{}}{{A`Fd}j}{{}Mn}{{{A`{Mn}}{A`{Mn}}}Fl}{{{A`{Mn}}{A`{AbG`}}}Gb}{cc{}}{{}c{}}{N`Fl}{{{A`{Bn}}}{{Nb{{A`{Bn}}{A`{Bn}}}}}}0{{{A`{Bn}}{A`{Bn}}}{{Nb{{A`{Bn}}{A`{Bn}}}}}}11010111{{{A`{Bn}}}Gd}22{A`c{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````````````````````{A`{{A`{c}}}{}}0000000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000000{NdNf}{NhNj}{{}Nd}{{}Nh}{LnBd}{{{A`{Nl}}}Nl}{{{A`{Nn}}}Nn}{{{A`{O`}}}O`}{{A`{A`{Abc}}}j{}}00{{A`Fd}j}00{{}Nf}8{{}Nj}8{{}Ob}{{{A`{Od}}{A`{Od}}}Fl}{{{A`{M`}}{A`{M`}}}Fl}{{{A`{Ln}}{A`{Ln}}}Fl}{{{A`{O`}}{A`{O`}}}Fl}{{{A`{Od}}{A`{AbG`}}}Gb}{{{A`{M`}}{A`{AbG`}}}Gb}0{{{A`{Ln}}{A`{AbG`}}}Gb}0{{{A`{O`}}{A`{AbG`}}}Gb}{cc{}}0000000000{{}c{}}0000000000{M`Od}{M`Of}{LnOf}{{}Nd}{{}Nh}{{NjNf}Ob}``{{{A`{Nj}}{A`{Bn}}{A`{Nf}}}{{Nb{{A`{Bn}}Ln}}}}{{{A`{Ob}}{A`{Bn}}}{{Nb{{A`{Bn}}Ln}}}}{{{A`{Bn}}}{{Nb{{A`{Bn}}Ln}}}}0{{{A`{Nf}}{A`{Bn}}}{{Nb{{A`{Bn}}{Bd{M`}}}}}}{{{A`{Nj}}{Of{Bn}}{A`{Bn}}{A`{Nf}}}{{Nb{{A`{Bn}}Ln}}}}{{Nd{A`{Bn}}}Nd}{{Nd{A`{Bn}}{Oh{{Of{Bn}}{A`{Bn}}}{{Fj{{Nb{{A`{Bn}}M`}}}}}}}Nd}{{Nh{A`{Bn}}{Oh{{Of{Bn}}{A`{Bn}}{A`{Nf}}}{{Fj{{Nb{{A`{Bn}}Ln}}}}}}}Nh}{{Nh{A`{Bn}}}Nh}3{{Nd{A`{Bn}}Nl}Nd}{{{A`{AbNd}}{A`{Bn}}Nl}{{A`{AbNd}}}}{A`c{}}00{{{A`{Ln}}}Gd}{{{A`{Ln}}{A`{Bn}}}Gd}{{{A`{M`}}}Gd}{A`Gd}0{c{{Al{e}}}{}{}}0000000000{{}{{Al{c}}}{}}0000000000{A`An}0000000000{{NfFl}Nf}{{NdFl}Nd}{{NjFl}Nj}{{NhFl}Nh}{{NdNl}Nd}{{NhNn}Nh}{{ObO`}Ob}{{ObMn}Ob}`````````````````````````````````````````````````````````````````````````{Oj{{A`{Bn}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Nf}{{{A`{Ol}}}Ol}{{{A`{Oj}}}Oj}{{A`{A`{Abc}}}j{}}0{{A`Fd}j}0{{}Nj}{{{A`{Ol}}{A`{Ol}}}Fl}{{{A`{Oj}}{A`{Oj}}}Fl}{{{A`{Ol}}{A`{AbG`}}}Gb}{{{A`{Oj}}{A`{AbG`}}}Gb}{cc{}}0{{{A`{Ol}}{A`{Abc}}}jGf}{{{A`{Oj}}{A`{Abc}}}jGf}{{}c{}}0{Ol{{A`{Bn}}}}{{}Ob}{OlNl}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{On{{A`{Bn}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Nf}{{{A`{A@`}}}A@`}{{{A`{On}}}On}{{A`{A`{Abc}}}j{}}0{{A`Fd}j}0{{}Nj}{{{A`{A@`}}{A`{A@`}}}Fl}{{{A`{On}}{A`{On}}}Fl}{{{A`{A@`}}{A`{AbG`}}}Gb}{{{A`{On}}{A`{AbG`}}}Gb}{cc{}}0{{{A`{A@`}}{A`{Abc}}}jGf}{{{A`{On}}{A`{Abc}}}jGf}{{}c{}}0{A@`{{A`{Bn}}}}{{}Ob}{A@`Nl}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0","D":"DKj","p":[[1,"i32"],[5,"AccClause",4],[8,"c_char",1737],[5,"AccClauseIterator",4],[1,"unit"],[5,"AccDirective",4],[5,"AccStringList",4],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[5,"OmpDirective",4],[6,"Result",1738,null,1],[5,"TypeId",1739],[5,"ArraySection",104,1740],[5,"Variable",104,1740],[5,"Vec",1741],[6,"Expression",104,1742],[5,"ExpressionAst",104,1742],[6,"Option",1743,null,1],[6,"DirectiveKind",104,1744],[1,"str"],[5,"Identifier",104,1740],[5,"SourceLocation",104,1745],[6,"Language",104,1745],[5,"DirectiveIR",104,1744],[5,"DirectiveBuilder",104,1746],[6,"ClauseData",104,1747],[1,"slice"],[6,"ReductionOperator",104,1747],[6,"MapType",104,1747],[6,"ScheduleKind",104,1747],[6,"ScheduleModifier",104,1747],[6,"DependType",104,1747],[6,"DefaultKind",104,1747],[6,"ProcBind",104,1747],[6,"MemoryOrder",104,1747],[6,"AtomicOp",104,1747],[6,"DeviceType",104,1747],[6,"LinearModifier",104,1747],[6,"LastprivateModifier",104,1747],[6,"OrderKind",104,1747],[6,"ClauseItem",104,1747],[6,"ConversionError",104,1748],[5,"ParserConfig",104,1742],[6,"ExpressionKind",104,1742],[6,"BinaryOperator",104,1742],[6,"UnaryOperator",104,1742],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1749],[5,"Formatter",1750],[8,"Result",1750],[5,"String",1751],[10,"Hasher",1752],[10,"Into",1753,null,1],[6,"ValidationError",1090],[15,"Aligned",995],[15,"Allocate",995],[15,"Allocator",995],[15,"Schedule",995],[15,"DistSchedule",995],[15,"If",995],[15,"Generic",995],[15,"Depend",995],[15,"Device",995],[15,"Grainsize",995],[15,"Private",995],[15,"Firstprivate",995],[15,"Lastprivate",995],[15,"Shared",995],[15,"Reduction",995],[15,"Map",995],[15,"UseDevicePtr",995],[15,"UseDeviceAddr",995],[15,"IsDevicePtr",995],[15,"HasDeviceAddr",995],[15,"Affinity",995],[15,"Linear",995],[15,"Copyin",995],[15,"Copyprivate",995],[15,"Safelen",995],[15,"Simdlen",995],[15,"ThreadLimit",995],[15,"AtomicOperation",995],[15,"Collapse",995],[15,"Ordered",995],[15,"NumThreads",995],[15,"NumTeams",995],[15,"NumTasks",995],[15,"Priority",995],[15,"Filter",995],[15,"Call",1045],[15,"ArrayAccess",1045],[5,"Box",1754,null,1],[15,"Conditional",1045],[15,"BinaryOp",1045],[15,"UnaryOp",1045],[5,"Directive",1164,1755],[5,"Clause",1164,1756],[6,"TranslationError",1066],[5,"ValidationContext",1090],[15,"ConflictingClauses",1121],[15,"ClauseNotAllowed",1121],[15,"InvalidCombination",1121],[15,"MissingRequiredClause",1121],[6,"Language",1131],[1,"char"],[8,"IResult",1757],[5,"ClauseRegistryBuilder",1164,1756],[5,"ClauseRegistry",1164,1756],[5,"DirectiveRegistryBuilder",1164,1755],[5,"DirectiveRegistry",1164,1755],[6,"ClauseRule",1164,1756],[6,"DirectiveRule",1164,1755],[6,"Dialect",1164],[5,"Parser",1164],[6,"ClauseKind",1164,1756],[6,"Cow",1758],[1,"fn"],[6,"OpenAccDirective",1329],[6,"OpenAccClause",1329],[6,"OpenMpDirective",1436],[6,"OpenMpClause",1436]],"r":[[104,1747],[105,1747],[106,1747],[107,1742],[108,1742],[109,1747],[110,1747],[111,1747],[112,1747],[113,1744],[114,1747],[115,1744],[116,1742],[117,1747],[118,1742],[119,1740],[120,1744],[121,1744],[122,1744],[123,1744],[124,1744],[125,1747],[126,1747],[127,1747],[128,1744],[129,1744],[130,1744],[131,1747],[132,1747],[133,1744],[134,1744],[135,1744],[136,1744],[137,1744],[138,1742],[139,1742],[140,1747],[141,1742],[142,1742],[143,1747],[144,1742],[145,1747],[146,1742],[147,1745],[148,1742],[149,1744],[150,1744],[151,1747],[152,1747],[153,1747],[154,1747],[155,1747],[156,1742],[157,1747],[158,1747],[159,1742],[160,1748],[161,1747],[162,1747],[163,1745],[164,1744],[165,1747],[166,1744],[167,1744],[168,1744],[169,1744],[170,1744],[171,1744],[172,1747],[173,1747],[174,1747],[175,1747],[176,1747],[177,1747],[178,1744],[179,1742],[180,1747],[181,1747],[182,1747],[183,1746],[184,1744],[185,1744],[186,1744],[187,1747],[188,1744],[189,1744],[190,1744],[191,1744],[192,1744],[193,1744],[194,1744],[195,1744],[196,1742],[197,1744],[198,1744],[199,1747],[200,1744],[201,1744],[202,1742],[203,1744],[204,1742],[205,1747],[206,1747],[207,1742],[208,1742],[209,1747],[210,1747],[211,1747],[212,1744],[213,1744],[214,1744],[215,1745],[216,1747],[217,1744],[218,1742],[219,1747],[220,1747],[221,1744],[222,1742],[223,1747],[224,1747],[225,1747],[226,1740],[227,1747],[228,1742],[229,1747],[230,1747],[231,1747],[232,1742],[233,1744],[234,1744],[235,1748],[236,1747],[237,1747],[238,1745],[239,1747],[240,1747],[241,1742],[242,1747],[243,1747],[244,1747],[245,1742],[246,1747],[247,1744],[248,1742],[249,1747],[250,1747],[251,1744],[252,1744],[253,1744],[254,1747],[255,1744],[256,1747],[257,1747],[258,1744],[259,1747],[260,1747],[261,1742],[262,1747],[263,1742],[264,1747],[265,1747],[266,1742],[267,1742],[268,1747],[269,1747],[270,1747],[271,1744],[272,1747],[273,1747],[274,1747],[275,1742],[276,1747],[277,1747],[278,1747],[279,1744],[280,1747],[281,1744],[282,1744],[283,1744],[284,1744],[285,1744],[286,1744],[287,1744],[288,1744],[289,1744],[290,1744],[291,1744],[292,1744],[293,1744],[294,1744],[295,1744],[296,1742],[297,1742],[298,1742],[299,1747],[300,1747],[301,1747],[302,1747],[303,1747],[304,1747],[305,1747],[306,1747],[307,1747],[308,1747],[309,1747],[310,1747],[311,1747],[312,1744],[313,1744],[314,1747],[315,1747],[316,1744],[317,1747],[318,1747],[319,1747],[320,1744],[321,1744],[322,1744],[323,1747],[324,1747],[325,1747],[326,1742],[327,1742],[328,1747],[329,1744],[330,1747],[331,1744],[332,1747],[333,1747],[334,1745],[335,1744],[336,1747],[337,1747],[338,1744],[339,1742],[340,1747],[341,1744],[342,1744],[343,1744],[344,1744],[345,1744],[346,1744],[347,1744],[348,1744],[349,1744],[350,1744],[351,1744],[352,1744],[353,1744],[354,1744],[355,1744],[356,1744],[357,1744],[358,1744],[359,1744],[360,1744],[361,1744],[362,1744],[363,1744],[364,1744],[365,1744],[366,1744],[367,1744],[368,1744],[369,1744],[370,1744],[371,1744],[372,1744],[373,1744],[374,1744],[375,1744],[376,1744],[377,1744],[378,1744],[379,1744],[380,1744],[381,1744],[382,1744],[383,1744],[384,1744],[385,1744],[386,1747],[387,1744],[388,1744],[389,1747],[390,1747],[391,1742],[392,1742],[393,1744],[394,1745],[395,1748],[396,1748],[397,1742],[398,1744],[399,1748],[400,1747],[401,1747],[402,1747],[403,1747],[404,1747],[405,1090],[406,1090],[407,1740],[408,1747],[409,1744],[410,1744],[411,1747],[412,1740],[413,1740],[414,1742],[415,1744],[416,1742],[417,1740],[418,1744],[419,1746],[420,1747],[421,1747],[422,1747],[423,1747],[424,1747],[425,1747],[426,1747],[427,1747],[428,1747],[429,1747],[430,1747],[431,1747],[432,1747],[433,1747],[434,1747],[435,1744],[436,1744],[437,1748],[438,1742],[439,1742],[440,1742],[441,1742],[442,1742],[443,1742],[444,1745],[445,1745],[446,1740],[447,1740],[448,1740],[449,1746],[450,1747],[451,1747],[452,1747],[453,1747],[454,1747],[455,1747],[456,1747],[457,1747],[458,1747],[459,1747],[460,1747],[461,1747],[462,1747],[463,1747],[464,1747],[465,1744],[466,1744],[467,1748],[468,1742],[469,1742],[470,1742],[471,1742],[472,1742],[473,1742],[474,1745],[475,1745],[476,1740],[477,1740],[478,1740],[479,1746],[480,1744],[481,1747],[482,1747],[483,1747],[484,1747],[485,1747],[486,1747],[487,1747],[488,1747],[489,1747],[490,1747],[491,1747],[492,1747],[493,1747],[494,1747],[495,1747],[496,1744],[497,1744],[498,1748],[499,1742],[500,1742],[501,1742],[502,1742],[503,1742],[504,1742],[505,1745],[506,1745],[507,1740],[508,1740],[509,1740],[510,1747],[511,1747],[512,1747],[513,1747],[514,1747],[515,1747],[516,1747],[517,1747],[518,1747],[519,1747],[520,1747],[521,1747],[522,1747],[523,1747],[524,1747],[525,1744],[526,1744],[527,1748],[528,1742],[529,1742],[530,1742],[531,1742],[532,1742],[533,1742],[534,1745],[535,1745],[536,1740],[537,1740],[538,1740],[539,1747],[540,1747],[541,1747],[542,1747],[543,1747],[544,1747],[545,1747],[546,1747],[547,1747],[548,1747],[549,1747],[550,1747],[551,1747],[552,1747],[553,1747],[554,1744],[555,1744],[556,1748],[557,1742],[558,1742],[559,1742],[560,1742],[561,1742],[562,1742],[563,1745],[564,1745],[565,1740],[566,1740],[567,1740],[568,1746],[569,1745],[571,1057],[572,1744],[573,1746],[574,1742],[575,1745],[576,1745],[577,1746],[578,1746],[579,1746],[580,1740],[581,1747],[582,1747],[583,1747],[584,1747],[585,1747],[586,1747],[587,1747],[588,1747],[589,1747],[590,1747],[591,1747],[592,1747],[593,1747],[594,1747],[595,1747],[596,1744],[597,1744],[598,1748],[599,1742],[600,1742],[601,1742],[602,1742],[603,1742],[604,1742],[605,1745],[606,1745],[607,1740],[608,1740],[609,1740],[610,1744],[611,1744],[612,1746],[613,1747],[614,1747],[615,1747],[616,1747],[617,1747],[618,1747],[619,1747],[620,1747],[621,1747],[622,1747],[623,1747],[624,1747],[625,1747],[626,1747],[627,1747],[628,1747],[629,1747],[630,1747],[631,1747],[632,1747],[633,1747],[634,1747],[635,1747],[636,1747],[637,1747],[638,1747],[639,1747],[640,1747],[641,1747],[642,1747],[643,1744],[644,1744],[645,1744],[646,1744],[647,1748],[648,1748],[649,1742],[650,1742],[651,1742],[652,1742],[653,1742],[654,1742],[655,1742],[656,1745],[657,1745],[658,1745],[659,1745],[660,1740],[661,1740],[662,1740],[663,1740],[664,1740],[665,1740],[666,1742],[667,1746],[668,1744],[669,1746],[670,1747],[671,1747],[672,1747],[673,1747],[674,1747],[675,1747],[676,1747],[677,1747],[678,1747],[679,1747],[680,1747],[681,1747],[682,1747],[683,1747],[684,1747],[685,1747],[686,1747],[687,1747],[688,1744],[689,1744],[690,1748],[691,1742],[692,1742],[693,1742],[694,1742],[695,1742],[696,1742],[697,1745],[698,1745],[699,1740],[700,1740],[701,1740],[702,1740],[703,1740],[704,1740],[705,1740],[706,1740],[707,1744],[708,1744],[709,1747],[710,1747],[711,1747],[712,1747],[713,1747],[714,1747],[715,1747],[716,1747],[717,1747],[718,1747],[719,1747],[720,1747],[721,1747],[722,1744],[723,1742],[724,1742],[725,1745],[726,1745],[727,1740],[728,1746],[729,1746],[730,1747],[731,1747],[732,1747],[733,1747],[734,1747],[735,1747],[736,1747],[737,1747],[738,1747],[739,1747],[740,1747],[741,1747],[742,1747],[743,1747],[744,1747],[745,1744],[746,1744],[747,1748],[748,1742],[749,1742],[750,1742],[751,1742],[752,1742],[753,1742],[754,1745],[755,1745],[756,1740],[757,1740],[758,1740],[759,1744],[760,1740],[761,1740],[762,1745],[763,1747],[764,1744],[765,1747],[766,1747],[767,1747],[768,1747],[769,1745],[770,1747],[771,1747],[772,1747],[773,1744],[774,1747],[775,1747],[776,1747],[777,1744],[778,1742],[779,1747],[780,1747],[781,1747],[782,1740],[783,1747],[784,1747],[785,1744],[786,1740],[787,1744],[788,1744],[789,1744],[790,1744],[791,1744],[792,1744],[793,1742],[794,1744],[795,1742],[796,1742],[797,1740],[798,1745],[799,1744],[800,1740],[801,1746],[802,1744],[803,1740],[804,1740],[805,1744],[806,1746],[807,1744],[808,1742],[809,1742],[810,1745],[811,1740],[812,1740],[813,1740],[814,1746],[815,1746],[816,1746],[817,1746],[818,1746],[819,1742],[820,1746],[821,1744],[822,1746],[823,1742],[824,1745],[825,1746],[826,1746],[827,1746],[828,1746],[829,1746],[830,1746],[831,1744],[832,1746],[833,1744],[834,1740],[835,1745],[836,1740],[837,1742],[838,1746],[839,1746],[840,1744],[841,1744],[842,1746],[843,1747],[844,1747],[845,1747],[846,1747],[847,1747],[848,1747],[849,1747],[850,1747],[851,1747],[852,1747],[853,1747],[854,1747],[855,1747],[856,1747],[857,1747],[858,1744],[859,1744],[860,1748],[861,1742],[862,1742],[863,1742],[864,1742],[865,1742],[866,1742],[867,1745],[868,1745],[869,1740],[870,1740],[871,1740],[872,1747],[873,1747],[874,1747],[875,1747],[876,1747],[877,1747],[878,1747],[879,1747],[880,1747],[881,1747],[882,1747],[883,1747],[884,1747],[885,1747],[886,1747],[887,1744],[888,1744],[889,1748],[890,1742],[891,1745],[892,1745],[893,1740],[894,1740],[895,1740],[896,1744],[898,1746],[899,1747],[900,1747],[901,1747],[902,1747],[903,1747],[904,1747],[905,1747],[906,1747],[907,1747],[908,1747],[909,1747],[910,1747],[911,1747],[912,1747],[913,1747],[914,1744],[915,1744],[916,1748],[917,1742],[918,1742],[919,1742],[920,1742],[921,1742],[922,1742],[923,1745],[924,1745],[925,1740],[926,1740],[927,1740],[928,1746],[929,1747],[930,1747],[931,1747],[932,1747],[933,1747],[934,1747],[935,1747],[936,1747],[937,1747],[938,1747],[939,1747],[940,1747],[941,1747],[942,1747],[943,1747],[944,1744],[945,1744],[946,1748],[947,1742],[948,1742],[949,1742],[950,1742],[951,1742],[952,1742],[953,1745],[954,1745],[955,1740],[956,1740],[957,1740],[958,1746],[959,1747],[960,1747],[961,1747],[962,1747],[963,1747],[964,1747],[965,1747],[966,1747],[967,1747],[968,1747],[969,1747],[970,1747],[971,1747],[972,1747],[973,1747],[974,1744],[975,1744],[976,1748],[977,1742],[978,1742],[979,1742],[980,1742],[981,1742],[982,1742],[983,1745],[984,1745],[985,1740],[986,1740],[987,1740],[988,1742],[990,1744],[991,1742],[992,1742],[993,1742],[994,1740],[1164,1756],[1165,1756],[1166,1756],[1167,1756],[1168,1756],[1169,1756],[1170,1756],[1171,1756],[1172,1755],[1174,1755],[1175,1755],[1176,1755],[1177,1755],[1178,1756],[1179,1755],[1182,1756],[1183,1756],[1185,1756],[1186,1756],[1187,1756],[1188,1755],[1189,1755],[1191,1756],[1192,1756],[1193,1756],[1194,1755],[1195,1755],[1197,1756],[1198,1756],[1199,1755],[1200,1755],[1202,1756],[1203,1756],[1204,1756],[1205,1755],[1206,1755],[1208,1756],[1209,1755],[1210,1756],[1211,1755],[1212,1755],[1213,1756],[1214,1755],[1216,1756],[1217,1755],[1219,1756],[1220,1755],[1222,1756],[1223,1756],[1224,1755],[1225,1755],[1227,1756],[1228,1756],[1229,1755],[1231,1756],[1232,1756],[1233,1756],[1234,1755],[1235,1755],[1237,1756],[1238,1756],[1239,1755],[1240,1755],[1242,1756],[1243,1756],[1244,1756],[1245,1755],[1246,1755],[1248,1756],[1249,1756],[1250,1755],[1251,1755],[1253,1756],[1254,1756],[1255,1756],[1256,1755],[1257,1755],[1259,1756],[1260,1756],[1261,1755],[1262,1756],[1263,1755],[1267,1755],[1271,1756],[1272,1755],[1273,1756],[1274,1756],[1275,1755],[1276,1755],[1277,1756],[1278,1756],[1279,1756],[1280,1756],[1281,1755],[1283,1755],[1284,1755],[1285,1756],[1286,1756],[1287,1755],[1288,1756],[1289,1756],[1290,1755],[1291,1755],[1293,1756],[1294,1756],[1295,1756],[1296,1755],[1297,1755],[1299,1756],[1300,1756],[1301,1755],[1302,1755],[1304,1756],[1305,1756],[1306,1756],[1307,1755],[1308,1755],[1310,1756],[1311,1756],[1312,1755],[1313,1755],[1315,1756],[1316,1756],[1317,1756],[1318,1755],[1319,1755],[1321,1756],[1322,1756],[1323,1755],[1324,1755],[1325,1756],[1326,1755]],"b":[[613,"impl-Display-for-ReductionOperator"],[614,"impl-Debug-for-ReductionOperator"],[615,"impl-Debug-for-MapType"],[616,"impl-Display-for-MapType"],[617,"impl-Debug-for-ScheduleKind"],[618,"impl-Display-for-ScheduleKind"],[619,"impl-Debug-for-ScheduleModifier"],[620,"impl-Display-for-ScheduleModifier"],[621,"impl-Display-for-DependType"],[622,"impl-Debug-for-DependType"],[623,"impl-Debug-for-DefaultKind"],[624,"impl-Display-for-DefaultKind"],[625,"impl-Debug-for-ProcBind"],[626,"impl-Display-for-ProcBind"],[627,"impl-Display-for-MemoryOrder"],[628,"impl-Debug-for-MemoryOrder"],[629,"impl-Debug-for-AtomicOp"],[630,"impl-Display-for-AtomicOp"],[631,"impl-Display-for-DeviceType"],[632,"impl-Debug-for-DeviceType"],[633,"impl-Display-for-LinearModifier"],[634,"impl-Debug-for-LinearModifier"],[635,"impl-Debug-for-LastprivateModifier"],[636,"impl-Display-for-LastprivateModifier"],[637,"impl-Debug-for-OrderKind"],[638,"impl-Display-for-OrderKind"],[639,"impl-Display-for-ClauseItem"],[640,"impl-Debug-for-ClauseItem"],[641,"impl-Debug-for-ClauseData"],[642,"impl-Display-for-ClauseData"],[643,"impl-Display-for-DirectiveKind"],[644,"impl-Debug-for-DirectiveKind"],[645,"impl-Debug-for-DirectiveIR"],[646,"impl-Display-for-DirectiveIR"],[647,"impl-Display-for-ConversionError"],[648,"impl-Debug-for-ConversionError"],[650,"impl-Debug-for-Expression"],[651,"impl-Display-for-Expression"],[656,"impl-Debug-for-SourceLocation"],[657,"impl-Display-for-SourceLocation"],[658,"impl-Debug-for-Language"],[659,"impl-Display-for-Language"],[660,"impl-Debug-for-Identifier"],[661,"impl-Display-for-Identifier"],[662,"impl-Debug-for-ArraySection"],[663,"impl-Display-for-ArraySection"],[664,"impl-Display-for-Variable"],[665,"impl-Debug-for-Variable"],[684,"impl-From%3CExpression%3E-for-ClauseItem"],[685,"impl-From%3CVariable%3E-for-ClauseItem"],[686,"impl-From%3CIdentifier%3E-for-ClauseItem"],[699,"impl-From%3CString%3E-for-Identifier"],[700,"impl-From%3C%26str%3E-for-Identifier"],[703,"impl-From%3C%26str%3E-for-Variable"],[704,"impl-From%3CString%3E-for-Variable"],[705,"impl-From%3CIdentifier%3E-for-Variable"],[1076,"impl-Debug-for-TranslationError"],[1077,"impl-Display-for-TranslationError"],[1104,"impl-Debug-for-ValidationError"],[1105,"impl-Display-for-ValidationError"],[1232,"impl-Display-for-Clause%3C\'_%3E"],[1233,"impl-Debug-for-Clause%3C\'a%3E"],[1234,"impl-Display-for-Directive%3C\'_%3E"],[1235,"impl-Debug-for-Directive%3C\'a%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGwENQADAAEAHQAPAFEAFwBrAAIAdQAAAI0ABgCmAAAAtAAAAMUAAADLAAAA2wAAAN8AAADyAAAA9QACAPkAAAABAQAABAECAAgBAQALAQEAFAEAAEcBAQBUAQEAlgEBAKQBOwDiAVYAPAIAAEYCHABmAisAkwIAAJUCAgCaAgAArQICALwCAQDAAgIAxgISAEwDNACDA1kA5AM9AC8EBwA4BAAAOgQBAEAEAgBJBAkAWQQHAGIECQBwBAcAiQRMAOwEGAAGBYUAjgUBAJIFJgG7BgEAvwYKAA==","P":[[28,"T"],[52,"U"],[60,""],[80,"U,T"],[88,"U"],[96,""],[419,"T"],[479,""],[510,"T"],[539,""],[572,"F"],[573,""],[610,"F"],[612,""],[669,"T"],[684,""],[687,"T"],[699,""],[701,"T"],[703,""],[706,"T"],[707,"F"],[708,""],[709,"__H"],[728,""],[729,"U"],[759,""],[843,"T"],[872,""],[898,"U,T"],[928,"U"],[958,""],[1070,"T"],[1072,""],[1073,"T"],[1074,""],[1078,"T"],[1079,""],[1080,"U"],[1081,"T"],[1082,""],[1087,"U,T"],[1088,"U"],[1089,""],[1096,"T"],[1100,""],[1101,"T"],[1102,""],[1106,"T"],[1108,"U"],[1110,""],[1112,"T"],[1113,""],[1114,"U,T"],[1116,"U"],[1118,""],[1135,"T"],[1137,""],[1138,"T"],[1139,""],[1143,"T"],[1144,"U"],[1145,""],[1160,"T"],[1161,"U,T"],[1162,"U"],[1163,""],[1186,"T"],[1208,""],[1216,"T"],[1219,""],[1237,"T"],[1248,"U"],[1259,""],[1280,"T"],[1283,""],[1288,"U,T"],[1299,"U"],[1310,""],[1403,"T"],[1407,""],[1410,"T"],[1412,""],[1419,"T"],[1421,"__H"],[1423,"U"],[1425,""],[1428,"T"],[1430,"U,T"],[1432,"U"],[1434,""],[1704,"T"],[1708,""],[1711,"T"],[1713,""],[1720,"T"],[1722,"__H"],[1724,"U"],[1726,""],[1729,"T"],[1731,"U,T"],[1733,"U"],[1735,""]]}],["roup_roundtrip",{"t":"H","n":["main"],"q":[[0,"roup_roundtrip"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1230,47529,189,173]}