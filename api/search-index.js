var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","calculate_combined_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_acc_clause_mappings","parse_acc_directive_mappings","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[17,"alloc::string"],[18,"core::option"],[19,"syn::expr"],[20,"core::ops::function"],[21,"syn::stmt"],[22,"alloc::vec"]],"i":"`````````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{}{{An{{j{hf}}}}}}0{{{n{Ah}}}{{Ab{{j{hf}}}}}}101","D":"B`","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",17],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",18,null,1],[6,"Expr",19],[0,"mut"],[5,"Arm",19],[10,"FnMut",20],[6,"Stmt",21],[5,"Vec",22]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[8,"F"],[10,""]]}],["roup",{"t":"CCCCCFFFFFFFFSSSHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNPPPFGIFFPPPPPPPPPPPPPPPPPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNOOONONOOHNNOONNNNNNNNNNNNNNNNNNNNNOONNNNNOONOHHOONNNNNNONNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHHHHHNNNNPPFGFFGPPGFFFGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCCONNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","debugger","ir","lexer","parser","AccClause","AccClauseIterator","AccDirective","AccStringList","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","acc_clause_expression_at","acc_clause_expressions_count","acc_clause_iterator_free","acc_clause_iterator_next","acc_clause_kind","acc_directive_clause_count","acc_directive_clauses_iter","acc_directive_free","acc_directive_kind","acc_directive_name","acc_parse","acc_parse_with_language","acc_string_list_free","borrow","","","","","","","","borrow_mut","","","","","","","","from","","","","","","","","into","","","","","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","","","","","try_into","","","","","","","","type_id","","","","","","","","ClauseArguments","ClauseName","Complete","DebugConfig","DebugError","DebugResult","DebugSession","DebugStep","DirectiveName","DirectiveParameter","Err","Error","First","GoToStep","Help","Invalid","InvalidInput","IoError","Last","Next","Ok","ParseError","PragmaPrefix","Previous","Quit","ShowAst","ShowHistory","ShowInput","ShowStep","SkipWhitespace","StepKind","UserCommand","as_str","borrow","","","","","","borrow_mut","","","","","","clone","","","","clone_into","","","","clone_to_uninit","","","","config","consumed","context_stack","current_step","current_step_index","default","description","dialect","display_ast_tree","eq","","error","final_directive","fmt","","","","","","","from","","","","","","","from_input","into","","","","","","kind","language","new","","next_step","openacc","openmp","original_input","position","prev_step","remaining","run_interactive_session","run_non_interactive","step_number","steps","steps_so_far","to_owned","","","","to_string","token_info","total_steps","try_from","","","","","","try_into","","","","","","type_id","","","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_acc","lex_clause","lex_dialect_keyword","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_fixed_sentinel_with_prefix","lex_fortran_free_sentinel","lex_fortran_free_sentinel_with_prefix","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Dialect","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","OpenAcc","OpenMp","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","","borrow_mut","","","","","","","","","","","build","","builder","","clauses","clone","","","clone_into","","","clone_to_uninit","","","default","","","","","eq","","","","fmt","","","","","","from","","","","","","","","","","","into","","","","","","","","","","","kind","name","","new","","","openacc","openmp","parameter","parse","","parse_acc_directive","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","","to_pragma_string","to_pragma_string_with_prefix","to_pragma_string_with_prefix_and_separator","to_source_string","to_string","","try_from","","","","","","","","","","","try_into","","","","","","","","","","","type_id","","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_dialect","with_language","ALL","","Async","Atomic","Attach","Auto","Bind","Cache","Capture","Collapse","Copy","Copyin","Copyout","Create","DType","Data","Declare","Default","DefaultAsync","Delete","Detach","Device","DeviceNum","DeviceResident","DeviceType","Deviceptr","End","EnterData","EnterDataUnderscore","ExitData","ExitDataUnderscore","Finalize","Firstprivate","Gang","Host","HostData","HostDataSpace","If","IfPresent","Independent","Init","Kernels","KernelsLoop","Link","Loop","NoCreate","Nohost","NumGangs","NumWorkers","OpenAccClause","OpenAccDirective","PCopy","PCopyIn","PCopyOut","PCreate","Parallel","ParallelLoop","Present","PresentOrCopy","PresentOrCopyIn","PresentOrCopyOut","PresentOrCreate","Private","Read","Reduction","Routine","SelfClause","Seq","Serial","SerialLoop","Set","Shutdown","Tile","Update","","UseDevice","Vector","VectorLength","Wait","","Worker","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id","","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndAssumes","EndDeclareTarget","EndDeclareVariant","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","MasterTaskloop","MasterTaskloopSimd","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[5,"roup::c_api"],[105,"roup::debugger"],[237,"roup::ir"],[1128,"roup::ir::ClauseData"],[1178,"roup::ir::ExpressionKind"],[1190,"roup::ir::convert"],[1199,"roup::ir::translate"],[1223,"roup::ir::validate"],[1254,"roup::ir::validate::ValidationError"],[1264,"roup::lexer"],[1297,"roup::parser"],[1464,"roup::parser::openacc"],[1580,"roup::parser::openmp"],[1881,"std::os::raw"],[1882,"core::result"],[1883,"core::any"],[1884,"roup::debugger::stepper"],[1885,"roup::debugger::ui"],[1886,"alloc::string"],[1887,"alloc::vec"],[1888,"core::option"],[1889,"roup::parser::directive"],[1890,"core::fmt"],[1891,"std::io::error"],[1892,"roup::ir::variable"],[1893,"roup::ir::expression"],[1894,"roup::ir::directive"],[1895,"roup::ir::types"],[1896,"roup::ir::builder"],[1897,"roup::ir::clause"],[1898,"roup::ir::error"],[1899,"core::ops::function"],[1900,"core::hash"],[1901,"core::convert"],[1902,"alloc::boxed"],[1903,"roup::parser::clause"],[1904,"nom::internal"],[1905,"alloc::borrow"],[1906,"roup::debugger::ast_display"]],"i":"`````````````````````````````AjAdAfAhldhn765432107654321076543210````````````````````765432107654321076543210B`00`````00Df1Bf000D`0112031111113``3Bd4Bl32Bh26143026402640264012211020`641126143302614330426143020101001212``2112640321261430261430261430Fn0F`HbHdEn0Fb1Eb204GbH``222224`4222Fd5333331`8768787Eh244G```Fl84GhGf6`::48=888888:`9:`Fh9<;`;```9;99999999=99699=9`Gj<``<Fj=;;;7<;?==;?8=:`19=229;;Gl>>`>`Hb?`F`Hd1?2En`Eb00;03`0334Ff54953Gb81233363`32:222222222222222H`Dn`?5:5`5G`6`GdFnFb188Fd:9:``9992?:==89:9Fh0`:Fl2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;EhGl09=08>>77```Gj>>9DjDl<Eb=EdEjElF`=<Ff<Fj<FnG`GbGdGfGh?En=;GlGnDnE`H`HbHdEfEhEdDjDlElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlEl=F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlEl5``=0;540001F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDl<<ElF`0Fb0Fd0Ff0Fh0Fj0Fl0Fn0G`0Gb0Gd0Gf0Gh0Gj0En0Eb0Ej0Gl0GnDn0E`H`HbHdEf0Eh0Ed0Dj0Dl0:El=0F`FbFdFfFhFjFlFnG`GbGdGfGhGj000EnEbEjGlGnDnE`H`HbHdEfEhEd00DjDl000<=F`FbFdFfFhFjFlFnG`GbGdGfGhEbHbHdEfEhEdEl0F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDl<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1El=31>0=;:53210000090=0;4000000=0=252;00==0F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlDnEfEhEdDjDl7`ElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDl9`<:::0IbIdIfIhIjIlInJ`Jb3JdJfJhJjJlJnK`KbKdKfKh<KjKlIbIdKnL`IhIjLbLdLf??LhJj;6LjLlInLnM`Mb7JnMdKlMfMhMjMn021N`0Nb012`````````Nf00`0000000000000````000I`000``Nh101111111010100110101010Nj0NlNn1O`2310Dd00`0000000000```````````````0000A@dOn`````0A@``````10Cf032`2OhOfOlOjA@b8Nd8Ch8765432:190875364098798798765432:107:1100765432:1908765432:19087110532``042``64553355598700011065432:1908765432:1908765432:1908765435322A@lA@j10111011111110011111111100000111100111000101111``111100111111110110000110111101101010`101010`10101010101`110101010AA`A@n111111110101100100010000000010011111111100000001110111111010000000000110001011111000110111011111111111110101111110110000001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"`````````````{{}b}00{{db}f}{db}{hj}{{hd}b}2{lb}{lh}{lj}2{lf}{fl}{{fb}l}{nj}{A`{{A`{c}}}{}}0000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000{cc{}}0000000{{}c{}}0000000{Adb}{Adj}{Afj}{{AfAd}b}333{AdAh}{{fbb}f}{Ajb}{AjAf}{Ajj}2{Ajf}{fAj}{{fb}Aj}{fj}{Ahj}{{Ahb}f}{Ahb}{c{{Al{e}}}{}{}}0000000{{}{{Al{c}}}{}}0000000{A`An}0000000````````````````````````````````{{{A`{B`}}}{{A`{Bb}}}}{A`{{A`{c}}}{}}00000{{{A`{Ab}}}{{A`{Abc}}}{}}00000{{{A`{Bd}}}Bd}{{{A`{B`}}}B`}{{{A`{Bf}}}Bf}{{{A`{Bh}}}Bh}{{A`{A`{Abc}}}j{}}000{{A`Bj}j}000{BlBh}{BdBn}{BdC`}{{{A`{Bl}}}{{Cb{{A`{Bd}}}}}}{BlCd}{{}Bh}4{BhCf}{{{A`{Ch}}}Bn}{{{A`{B`}}{A`{B`}}}Cj}{{{A`{Bf}}{A`{Bf}}}Cj}{BlCb}0{{{A`{Bd}}{A`{AbCl}}}Cn}{{{A`{B`}}{A`{AbCl}}}Cn}{{{A`{Bl}}{A`{AbCl}}}Cn}{{{A`{Bf}}{A`{AbCl}}}Cn}{{{A`{D`}}{A`{AbCl}}}Cn}0{{{A`{Bh}}{A`{AbCl}}}Cn}{cc{}}0000{DbD`}1{{{A`{Bb}}}Bf}{{}c{}}00000{BdB`}{BhDd}{{{A`{Bb}}Bh}{{Df{Bl}}}}{{CfDd}Bh}{{{A`{AbBl}}}Cj}{{}Bh}0{BlBn}{BdCd}3{BdBn}{Bl{{Df{j}}}}{{{A`{Bl}}}j}3{BlC`}{{{A`{Bl}}}{{A`{{Dh{Bd}}}}}}{A`c{}}000{A`Bn}{BdCb}{{{A`{Bl}}}Cd}{c{{Al{e}}}{}{}}00000{{}{{Al{c}}}{}}00000{A`An}00000````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Dj}{DlC`}{{{A`{Dn}}}{{Cb{{A`{E`}}}}}}{Eb{{A`{Bb}}}}{{{A`{Dn}}}{{A`{Bb}}}}{{{A`{Ed}}}{{A`{Bb}}}}{{EfEh}Ej}{A`{{A`{c}}}{}}00000000000000000000000000000{{{A`{Ab}}}{{A`{Abc}}}{}}00000000000000000000000000000{{ElEfEh}Ej}{{{A`{Ej}}}{{A`{{Dh{En}}}}}}{{{A`{F`}}}F`}{{{A`{Fb}}}Fb}{{{A`{Fd}}}Fd}{{{A`{Ff}}}Ff}{{{A`{Fh}}}Fh}{{{A`{Fj}}}Fj}{{{A`{Fl}}}Fl}{{{A`{Fn}}}Fn}{{{A`{G`}}}G`}{{{A`{Gb}}}Gb}{{{A`{Gd}}}Gd}{{{A`{Gf}}}Gf}{{{A`{Gh}}}Gh}{{{A`{Gj}}}Gj}{{{A`{En}}}En}{{{A`{Eb}}}Eb}{{{A`{Ej}}}Ej}{{{A`{Gl}}}Gl}{{{A`{Gn}}}Gn}{{{A`{Dn}}}Dn}{{{A`{E`}}}E`}{{{A`{H`}}}H`}{{{A`{Hb}}}Hb}{{{A`{Hd}}}Hd}{{{A`{Ef}}}Ef}{{{A`{Eh}}}Eh}{{{A`{Ed}}}Ed}{{{A`{Dj}}}Dj}{{{A`{Dl}}}Dl}{{A`{A`{Abc}}}j{}}0000000000000000000000000000{{A`Bj}j}0000000000000000000000000000{{El{A`{Bb}}}El}{EfHf}``{{{A`{Ej}}c}Cd{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{ElFj}El}{{}Gn}{{}Ef}{{}Eh}{ElEl}0{{ElFh{A`{{Dh{{A`{Bb}}}}}}}El}{{{A`{Dl}}}Cd}{{{A`{F`}}{A`{F`}}}Cj}{{{A`{Fb}}{A`{Fb}}}Cj}{{{A`{Fd}}{A`{Fd}}}Cj}{{{A`{Ff}}{A`{Ff}}}Cj}{{{A`{Fh}}{A`{Fh}}}Cj}{{{A`{Fj}}{A`{Fj}}}Cj}{{{A`{Fl}}{A`{Fl}}}Cj}{{{A`{Fn}}{A`{Fn}}}Cj}{{{A`{G`}}{A`{G`}}}Cj}{{{A`{Gb}}{A`{Gb}}}Cj}{{{A`{Gd}}{A`{Gd}}}Cj}{{{A`{Gf}}{A`{Gf}}}Cj}{{{A`{Gh}}{A`{Gh}}}Cj}{{{A`{Gj}}{A`{Gj}}}Cj}{{{A`{En}}{A`{En}}}Cj}{{{A`{Eb}}{A`{Eb}}}Cj}{{{A`{Ej}}{A`{Ej}}}Cj}{{{A`{Gl}}{A`{Gl}}}Cj}{{{A`{Gn}}{A`{Gn}}}Cj}{{{A`{Dn}}{A`{Dn}}}Cj}{{{A`{E`}}{A`{E`}}}Cj}{{{A`{H`}}{A`{H`}}}Cj}{{{A`{Hb}}{A`{Hb}}}Cj}{{{A`{Hd}}{A`{Hd}}}Cj}{{{A`{Ef}}{A`{Ef}}}Cj}{{{A`{Eh}}{A`{Eh}}}Cj}{{{A`{Ed}}{A`{Ed}}}Cj}{{{A`{Dj}}{A`{Dj}}}Cj}{{{A`{Dl}}{A`{Dl}}}Cj}{{{A`{Ej}}c}{{C`{{A`{En}}}}}{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{{A`{Ej}}c}{{Cb{{A`{En}}}}}{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{El{A`{{Dh{{A`{Bb}}}}}}}El}{{{A`{F`}}{A`{AbCl}}}Cn}0{{{A`{Fb}}{A`{AbCl}}}Cn}0{{{A`{Fd}}{A`{AbCl}}}Cn}0{{{A`{Ff}}{A`{AbCl}}}Cn}0{{{A`{Fh}}{A`{AbCl}}}Cn}0{{{A`{Fj}}{A`{AbCl}}}Cn}0{{{A`{Fl}}{A`{AbCl}}}Cn}0{{{A`{Fn}}{A`{AbCl}}}Cn}0{{{A`{G`}}{A`{AbCl}}}Cn}0{{{A`{Gb}}{A`{AbCl}}}Cn}0{{{A`{Gd}}{A`{AbCl}}}Cn}0{{{A`{Gf}}{A`{AbCl}}}Cn}0{{{A`{Gh}}{A`{AbCl}}}Cn}0{{{A`{Gj}}{A`{AbCl}}}Cn}0{{{A`{En}}{A`{AbCl}}}Cn}0{{{A`{Eb}}{A`{AbCl}}}Cn}0{{{A`{Ej}}{A`{AbCl}}}Cn}0{{{A`{Gl}}{A`{AbCl}}}Cn}0{{{A`{Gn}}{A`{AbCl}}}Cn}{{{A`{Dn}}{A`{AbCl}}}Cn}0{{{A`{E`}}{A`{AbCl}}}Cn}{{{A`{H`}}{A`{AbCl}}}Cn}{{{A`{Hb}}{A`{AbCl}}}Cn}{{{A`{Hd}}{A`{AbCl}}}Cn}{{{A`{Ef}}{A`{AbCl}}}Cn}0{{{A`{Eh}}{A`{AbCl}}}Cn}0{{{A`{Ed}}{A`{AbCl}}}Cn}0{{{A`{Dj}}{A`{AbCl}}}Cn}0{{{A`{Dl}}{A`{AbCl}}}Cn}0{{{A`{Gn}}Eh}Gn}{{}El}{{Fd{Cb{Dn}}EfEh}Ej}{cc{}}0000000000000{DnGj}1{EdGj}{DlGj}3333333333333{{{A`{Bb}}}Ed}{BnEd}55{EdDl}{BnDl}{{{A`{Bb}}}Dl}{{{A`{Ej}}c}Cj{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{{A`{Eb}}}Cj}{{{A`{F`}}{A`{Abc}}}jHl}{{{A`{Fb}}{A`{Abc}}}jHl}{{{A`{Fd}}{A`{Abc}}}jHl}{{{A`{Ff}}{A`{Abc}}}jHl}{{{A`{Fh}}{A`{Abc}}}jHl}{{{A`{Fj}}{A`{Abc}}}jHl}{{{A`{Fl}}{A`{Abc}}}jHl}{{{A`{Fn}}{A`{Abc}}}jHl}{{{A`{G`}}{A`{Abc}}}jHl}{{{A`{Gb}}{A`{Abc}}}jHl}{{{A`{Gd}}{A`{Abc}}}jHl}{{{A`{Gf}}{A`{Abc}}}jHl}{{{A`{Gh}}{A`{Abc}}}jHl}{{{A`{Eb}}{A`{Abc}}}jHl}{{{A`{Hb}}{A`{Abc}}}jHl}{{{A`{Hd}}{A`{Abc}}}jHl}{{{A`{Ef}}{A`{Abc}}}jHl}{{{A`{Eh}}{A`{Abc}}}jHl}{{{A`{Ed}}{A`{Abc}}}jHl}{{El{A`{Bb}}}El}{{}c{}}00000000000000000000000000000{{EjEh}Ej}{{{A`{Dj}}}Cj}{{{A`{Dl}}}Cj}{EhCj}{{{A`{En}}}Cj}{{{A`{Eb}}}Cj}1111211101110{{{A`{Dn}}}Cj}2224221511111{{{A`{Ej}}}Eb}{E`H`}{{{A`{Ej}}}Eh}{{{A`{Gn}}}Eh}{{{A`{Gn}}}Cj}{DjCb}{EfHf}{{{A`{Ej}}}Ef}2{{ElFb{A`{{Dh{{A`{Bb}}}}}}}El}{{{A`{Ej}}}{{A`{Bb}}}}{{{A`{Ed}}}{{A`{Bb}}}}{{{A`{Dl}}}{{A`{Bb}}}}{{EbEh}{{A`{Bb}}}}{EbEl}{{Eb{A`{Bb}}{C`{En}}EfEh}Ej}{{CjEh}Gn}{{c{A`{Gn}}}Dn{{Hn{Bn}}}}{{HfHf}Ef}{cEd{{Hn{Bn}}}}{{{Cb{Dn}}{Cb{Dn}}{Cb{Dn}}}Dj}{cDl{{Hn{Bn}}}}{ElEl}{{Elb}El}{{El{A`{Bb}}}El}20{E`Bn}{{}El}{{{Cb{Fj}}EfEh}Ej}1{GnCj}{Eh{{A`{Bb}}}}{{El{A`{{Dh{{A`{Bb}}}}}}}El}{{ElFl}El}{{ElF`{A`{{Dh{{A`{Bb}}}}}}}El}{{ElFd{Cb{{A`{Bb}}}}}El}{{ElFd}El}{{ElFd{C`{Ff}}{Cb{{A`{Bb}}}}}El}{{{A`{AbEj}}Eh}j}6{{Eb{A`{Bb}}EfEh}Ej}{DnDj}{{}Ef}{DjCb}{EhGn}??{{EfEh}Ej}0{{}El}{A`c{}}0000000000000000000000000000{A`Bn}00000000000000000000000{{{A`{Ej}}Eh}Bn}`{c{{Al{e}}}{}{}}00000000000000000000000000000{{}{{Al{c}}}{}}00000000000000000000000000000{A`An}00000000000000000000000000000{cDn{{Hn{Bn}}}}`{{{A`{Ej}}}{{Al{j{C`{I`}}}}}}{{GnEh}Gn}{{GnCj}Gn}<{{c{C`{Dj}}}Dl{{Hn{Bn}}}}{IbCb}{IdCb}{IfEd}{IhCb}{IjCb}{IlDn}{InCb}{J`Fh}{JbDn}{IlCb}{JdDn}{JfC`}{JhC`}{JjC`}{JlC`}{JnC`}{K`C`}{KbC`}{KdC`}{KfC`}{KhC`}{J`C`}{KjC`}{KlC`}{IbC`}{IdC`}{KnC`}{L`C`}{IhFd}{IjFd}{LbDn}{LdDn}{LfDn}{K`Cb}0{LhCb}{JjCb}{KlCb}{IhC`}{LjDn}{LlCb}{InEd}{LnDn}{M`Dn}{MbDn}{LhG`}{JnF`}{MdDn}:{MfDn}{MhC`}{MjMl}{MnMl}0{MhBn}{MjC`}{N`Ml}{N`Hb}{NbHd}{NbMl}36{{{A`{Ch}}EfEh{A`{Gn}}}{{Al{EjGl}}}}{{{A`{Nd}}{A`{Gn}}}{{Al{EnGl}}}}{{{A`{Bb}}}{{Al{FhGl}}}}{{{A`{Bb}}}{{Al{EbGl}}}}{{{A`{Bb}}{A`{Gn}}}{{Al{{C`{Gj}}Gl}}}}{{{A`{Bb}}{A`{Gn}}}{{Al{EnGl}}}}0{{{A`{Bb}}}{{Al{F`Gl}}}}1````{A`{{A`{c}}}{}}{{{A`{Ab}}}{{A`{Abc}}}{}}{{{A`{Nf}}}Nf}{{A`{A`{Abc}}}j{}}{{A`Bj}j}{{{A`{Nf}}{A`{Nf}}}Cj}{{{A`{Nf}}{A`{AbCl}}}Cn}0{GlNf}{cc{}}{{}c{}}{A`c{}}{A`Bn}{{{A`{Bb}}}{{Al{BnNf}}}}{{{A`{Bb}}Gn}{{Al{EjNf}}}}10{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{I`}}}I`}{{A`{A`{Abc}}}j{}}{{A`Bj}j}{{{A`{I`}}{A`{I`}}}Cj}{{{A`{I`}}{A`{AbCl}}}Cn}0??>>{{{A`{Nh}}{A`{En}}}{{Al{jI`}}}}{EbNh}?>;;::99{{{A`{Nh}}{A`{{Dh{En}}}}}{{Al{j{C`{I`}}}}}}{NjBn}0{NlBn}{NnC`}1{O`Bn}23{NnBn}1````>={{{A`{Dd}}}Dd}<;{{}Dd}{{{A`{Dd}}{A`{Dd}}}Cj}{{{A`{Dd}}{A`{AbCl}}}Cn}{cc{}}{{}c{}}{ObCj}{{{A`{Bb}}}{{Od{{A`{Bb}}{A`{Bb}}}}}}0{{{A`{Bb}}{A`{Bb}}}{{Od{{A`{Bb}}{A`{Bb}}}}}}11010111{{{A`{Bb}}}Bn}22{A`c{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````````````````````{A`{{A`{c}}}{}}0000000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000000{OfOh}{OjOl}{{}Of}{{}Oj}{ChC`}{{{A`{On}}}On}{{{A`{A@`}}}A@`}{{{A`{Cf}}}Cf}{{A`{A`{Abc}}}j{}}00{{A`Bj}j}00{{}Oh}8{{}Ol}8{{}A@b}{{{A`{A@d}}{A`{A@d}}}Cj}{{{A`{Nd}}{A`{Nd}}}Cj}{{{A`{Ch}}{A`{Ch}}}Cj}{{{A`{Cf}}{A`{Cf}}}Cj}{{{A`{A@d}}{A`{AbCl}}}Cn}{{{A`{Nd}}{A`{AbCl}}}Cn}0{{{A`{Ch}}{A`{AbCl}}}Cn}0{{{A`{Cf}}{A`{AbCl}}}Cn}{cc{}}0000000000{{}c{}}0000000000{NdA@d}{NdA@f}{ChA@f}{{}Of}{{}Oj}{{OlOh}A@b}``{ChCb}{{{A`{Ol}}{A`{Bb}}{A`{Oh}}}{{Od{{A`{Bb}}Ch}}}}{{{A`{A@b}}{A`{Bb}}}{{Od{{A`{Bb}}Ch}}}}{{{A`{Bb}}}{{Od{{A`{Bb}}Ch}}}}0{{{A`{Oh}}{A`{Bb}}}{{Od{{A`{Bb}}{C`{Nd}}}}}}{{{A`{Ol}}{A@f{Bb}}{A`{Bb}}{A`{Oh}}}{{Od{{A`{Bb}}Ch}}}}{{Of{A`{Bb}}}Of}{{Of{A`{Bb}}{A@h{{A@f{Bb}}{A`{Bb}}}{{Hh{{Od{{A`{Bb}}Nd}}}}}}}Of}{{Oj{A`{Bb}}{A@h{{A@f{Bb}}{A`{Bb}}{A`{Oh}}}{{Hh{{Od{{A`{Bb}}Ch}}}}}}}Oj}{{Oj{A`{Bb}}}Oj}3{{Of{A`{Bb}}On}Of}{{{A`{AbOf}}{A`{Bb}}On}{{A`{AbOf}}}}{A`c{}}00{{{A`{Ch}}}Bn}{{{A`{Ch}}{A`{Bb}}}Bn}{{{A`{Ch}}{A`{Bb}}Cj}Bn}{{{A`{Nd}}}Bn}{A`Bn}0{c{{Al{e}}}{}{}}0000000000{{}{{Al{c}}}{}}0000000000{A`An}0000000000{{OhCj}Oh}{{OfCj}Of}{{OlCj}Ol}{{OjCj}Oj}{{OfOn}Of}{{OjA@`}Oj}{{A@bCf}A@b}{{A@bDd}A@b}``````````````````````````````````````````````````````````````````````````````````{A@j{{A`{Bb}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Oh}{{{A`{A@l}}}A@l}{{{A`{A@j}}}A@j}{{A`{A`{Abc}}}j{}}0{{A`Bj}j}0{{}Ol}{{{A`{A@l}}{A`{A@l}}}Cj}{{{A`{A@j}}{A`{A@j}}}Cj}{{{A`{A@l}}{A`{AbCl}}}Cn}{{{A`{A@j}}{A`{AbCl}}}Cn}{cc{}}0{{{A`{A@l}}{A`{Abc}}}jHl}{{{A`{A@j}}{A`{Abc}}}jHl}{{}c{}}0{A@l{{A`{Bb}}}}{{}A@b}{A@lOn}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{A@n{{A`{Bb}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Oh}{{{A`{AA`}}}AA`}{{{A`{A@n}}}A@n}{{A`{A`{Abc}}}j{}}0{{A`Bj}j}0{{}Ol}{{{A`{AA`}}{A`{AA`}}}Cj}{{{A`{A@n}}{A`{A@n}}}Cj}{{{A`{AA`}}{A`{AbCl}}}Cn}{{{A`{A@n}}{A`{AbCl}}}Cn}{cc{}}0{{{A`{AA`}}{A`{Abc}}}jHl}{{{A`{A@n}}{A`{Abc}}}jHl}{{}c{}}0{AA`{{A`{Bb}}}}{{}A@b}{AA`On}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0","D":"EDf","p":[[1,"i32"],[5,"AccClause",5],[8,"c_char",1881],[5,"AccClauseIterator",5],[1,"unit"],[5,"AccDirective",5],[5,"AccStringList",5],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",5],[5,"OmpClauseIterator",5],[5,"OmpStringList",5],[5,"OmpDirective",5],[6,"Result",1882,null,1],[5,"TypeId",1883],[6,"StepKind",105,1884],[1,"str"],[5,"DebugStep",105,1884],[6,"UserCommand",105,1885],[5,"DebugConfig",105],[1,"u8"],[5,"DebugSession",105,1884],[5,"String",1886],[5,"Vec",1887],[6,"Option",1888,null,1],[1,"usize"],[6,"Dialect",1297],[5,"Directive",1297,1889],[1,"bool"],[5,"Formatter",1890],[8,"Result",1890],[6,"DebugError",105],[5,"Error",1891],[6,"Language",1264],[8,"DebugResult",105],[1,"slice"],[5,"ArraySection",237,1892],[5,"Variable",237,1892],[6,"Expression",237,1893],[5,"ExpressionAst",237,1893],[6,"DirectiveKind",237,1894],[5,"Identifier",237,1892],[5,"SourceLocation",237,1895],[6,"Language",237,1895],[5,"DirectiveIR",237,1894],[5,"DirectiveBuilder",237,1896],[6,"ClauseData",237,1897],[6,"ReductionOperator",237,1897],[6,"MapType",237,1897],[6,"ScheduleKind",237,1897],[6,"ScheduleModifier",237,1897],[6,"DependType",237,1897],[6,"DefaultKind",237,1897],[6,"ProcBind",237,1897],[6,"MemoryOrder",237,1897],[6,"AtomicOp",237,1897],[6,"DeviceType",237,1897],[6,"LinearModifier",237,1897],[6,"LastprivateModifier",237,1897],[6,"OrderKind",237,1897],[6,"ClauseItem",237,1897],[6,"ConversionError",237,1898],[5,"ParserConfig",237,1893],[6,"ExpressionKind",237,1893],[6,"BinaryOperator",237,1893],[6,"UnaryOperator",237,1893],[1,"u32"],[17,"Output"],[10,"Fn",1899],[10,"Hasher",1900],[10,"Into",1901,null,1],[6,"ValidationError",1223],[15,"Aligned",1128],[15,"Allocate",1128],[15,"Allocator",1128],[15,"Schedule",1128],[15,"DistSchedule",1128],[15,"If",1128],[15,"Generic",1128],[15,"Depend",1128],[15,"Device",1128],[15,"Grainsize",1128],[15,"Private",1128],[15,"Firstprivate",1128],[15,"Lastprivate",1128],[15,"Shared",1128],[15,"Reduction",1128],[15,"Map",1128],[15,"UseDevicePtr",1128],[15,"UseDeviceAddr",1128],[15,"IsDevicePtr",1128],[15,"HasDeviceAddr",1128],[15,"Affinity",1128],[15,"Linear",1128],[15,"Copyin",1128],[15,"Copyprivate",1128],[15,"Safelen",1128],[15,"Simdlen",1128],[15,"ThreadLimit",1128],[15,"AtomicOperation",1128],[15,"Collapse",1128],[15,"Ordered",1128],[15,"NumThreads",1128],[15,"NumTeams",1128],[15,"NumTasks",1128],[15,"Priority",1128],[15,"Filter",1128],[15,"Call",1178],[15,"ArrayAccess",1178],[5,"Box",1902,null,1],[15,"Conditional",1178],[15,"BinaryOp",1178],[15,"UnaryOp",1178],[5,"Clause",1297,1903],[6,"TranslationError",1199],[5,"ValidationContext",1223],[15,"ConflictingClauses",1254],[15,"ClauseNotAllowed",1254],[15,"InvalidCombination",1254],[15,"MissingRequiredClause",1254],[1,"char"],[8,"IResult",1904],[5,"ClauseRegistryBuilder",1297,1903],[5,"ClauseRegistry",1297,1903],[5,"DirectiveRegistryBuilder",1297,1889],[5,"DirectiveRegistry",1297,1889],[6,"ClauseRule",1297,1903],[6,"DirectiveRule",1297,1889],[5,"Parser",1297],[6,"ClauseKind",1297,1903],[6,"Cow",1905],[1,"fn"],[6,"OpenAccDirective",1464],[6,"OpenAccClause",1464],[6,"OpenMpDirective",1580],[6,"OpenMpClause",1580]],"r":[[105,1884],[106,1884],[107,1884],[111,1884],[112,1884],[113,1884],[114,1884],[116,1884],[117,1885],[118,1885],[119,1885],[120,1885],[123,1885],[124,1885],[127,1884],[128,1885],[129,1885],[130,1885],[131,1885],[132,1885],[133,1885],[134,1884],[135,1884],[136,1885],[137,1884],[138,1884],[139,1884],[140,1884],[141,1885],[144,1884],[145,1884],[146,1884],[147,1885],[150,1884],[151,1884],[152,1885],[154,1884],[155,1884],[156,1885],[158,1884],[159,1884],[160,1885],[162,1884],[163,1884],[164,1884],[165,1884],[166,1884],[168,1884],[170,1906],[171,1884],[172,1885],[173,1884],[174,1884],[175,1884],[176,1884],[177,1884],[178,1885],[182,1884],[183,1884],[184,1884],[185,1885],[189,1885],[190,1884],[191,1884],[192,1884],[193,1885],[196,1884],[198,1884],[200,1884],[203,1884],[204,1884],[205,1884],[206,1884],[207,1885],[208,1885],[209,1884],[210,1884],[211,1884],[212,1884],[213,1884],[214,1885],[217,1884],[218,1884],[219,1884],[220,1884],[221,1884],[222,1885],[225,1884],[226,1884],[227,1884],[228,1885],[231,1884],[232,1884],[233,1884],[234,1885],[237,1897],[238,1897],[239,1897],[240,1893],[241,1893],[242,1897],[243,1897],[244,1897],[245,1897],[246,1894],[247,1897],[248,1894],[249,1893],[250,1897],[251,1893],[252,1892],[253,1894],[254,1894],[255,1894],[256,1894],[257,1894],[258,1897],[259,1897],[260,1897],[261,1894],[262,1894],[263,1894],[264,1897],[265,1897],[266,1894],[267,1894],[268,1894],[269,1894],[270,1894],[271,1893],[272,1893],[273,1897],[274,1893],[275,1893],[276,1897],[277,1893],[278,1897],[279,1893],[280,1895],[281,1893],[282,1894],[283,1894],[284,1897],[285,1897],[286,1897],[287,1897],[288,1897],[289,1893],[290,1897],[291,1897],[292,1893],[293,1898],[294,1897],[295,1897],[296,1895],[297,1894],[298,1897],[299,1894],[300,1894],[301,1894],[302,1894],[303,1894],[304,1894],[305,1897],[306,1897],[307,1897],[308,1897],[309,1897],[310,1897],[311,1894],[312,1893],[313,1897],[314,1897],[315,1897],[316,1896],[317,1894],[318,1894],[319,1894],[320,1897],[321,1894],[322,1894],[323,1894],[324,1894],[325,1894],[326,1894],[327,1894],[328,1894],[329,1893],[330,1894],[331,1894],[332,1897],[333,1894],[334,1894],[335,1893],[336,1894],[337,1893],[338,1897],[339,1897],[340,1893],[341,1893],[342,1897],[343,1897],[344,1897],[345,1894],[346,1894],[347,1894],[348,1895],[349,1897],[350,1894],[351,1893],[352,1897],[353,1897],[354,1894],[355,1893],[356,1897],[357,1897],[358,1897],[359,1892],[360,1897],[361,1893],[362,1897],[363,1897],[364,1897],[365,1893],[366,1894],[367,1894],[368,1898],[369,1897],[370,1897],[371,1895],[372,1897],[373,1897],[374,1893],[375,1897],[376,1897],[377,1897],[378,1893],[379,1897],[380,1894],[381,1893],[382,1897],[383,1897],[384,1894],[385,1894],[386,1894],[387,1897],[388,1894],[389,1897],[390,1897],[391,1894],[392,1897],[393,1897],[394,1893],[395,1897],[396,1893],[397,1897],[398,1897],[399,1893],[400,1893],[401,1897],[402,1897],[403,1897],[404,1894],[405,1897],[406,1897],[407,1897],[408,1893],[409,1897],[410,1897],[411,1897],[412,1894],[413,1897],[414,1894],[415,1894],[416,1894],[417,1894],[418,1894],[419,1894],[420,1894],[421,1894],[422,1894],[423,1894],[424,1894],[425,1894],[426,1894],[427,1894],[428,1894],[429,1893],[430,1893],[431,1893],[432,1897],[433,1897],[434,1897],[435,1897],[436,1897],[437,1897],[438,1897],[439,1897],[440,1897],[441,1897],[442,1897],[443,1897],[444,1897],[445,1894],[446,1894],[447,1897],[448,1897],[449,1894],[450,1897],[451,1897],[452,1897],[453,1894],[454,1894],[455,1894],[456,1897],[457,1897],[458,1897],[459,1893],[460,1893],[461,1897],[462,1894],[463,1897],[464,1894],[465,1897],[466,1897],[467,1895],[468,1894],[469,1897],[470,1897],[471,1894],[472,1893],[473,1897],[474,1894],[475,1894],[476,1894],[477,1894],[478,1894],[479,1894],[480,1894],[481,1894],[482,1894],[483,1894],[484,1894],[485,1894],[486,1894],[487,1894],[488,1894],[489,1894],[490,1894],[491,1894],[492,1894],[493,1894],[494,1894],[495,1894],[496,1894],[497,1894],[498,1894],[499,1894],[500,1894],[501,1894],[502,1894],[503,1894],[504,1894],[505,1894],[506,1894],[507,1894],[508,1894],[509,1894],[510,1894],[511,1894],[512,1894],[513,1894],[514,1894],[515,1894],[516,1894],[517,1894],[518,1894],[519,1897],[520,1894],[521,1894],[522,1897],[523,1897],[524,1893],[525,1893],[526,1894],[527,1895],[528,1898],[529,1898],[530,1893],[531,1894],[532,1898],[533,1897],[534,1897],[535,1897],[536,1897],[537,1897],[538,1223],[539,1223],[540,1892],[541,1897],[542,1894],[543,1894],[544,1897],[545,1892],[546,1892],[547,1893],[548,1894],[549,1893],[550,1892],[551,1894],[552,1896],[553,1897],[554,1897],[555,1897],[556,1897],[557,1897],[558,1897],[559,1897],[560,1897],[561,1897],[562,1897],[563,1897],[564,1897],[565,1897],[566,1897],[567,1897],[568,1894],[569,1894],[570,1898],[571,1893],[572,1893],[573,1893],[574,1893],[575,1893],[576,1893],[577,1895],[578,1895],[579,1892],[580,1892],[581,1892],[582,1896],[583,1897],[584,1897],[585,1897],[586,1897],[587,1897],[588,1897],[589,1897],[590,1897],[591,1897],[592,1897],[593,1897],[594,1897],[595,1897],[596,1897],[597,1897],[598,1894],[599,1894],[600,1898],[601,1893],[602,1893],[603,1893],[604,1893],[605,1893],[606,1893],[607,1895],[608,1895],[609,1892],[610,1892],[611,1892],[612,1896],[613,1894],[614,1897],[615,1897],[616,1897],[617,1897],[618,1897],[619,1897],[620,1897],[621,1897],[622,1897],[623,1897],[624,1897],[625,1897],[626,1897],[627,1897],[628,1897],[629,1894],[630,1894],[631,1898],[632,1893],[633,1893],[634,1893],[635,1893],[636,1893],[637,1893],[638,1895],[639,1895],[640,1892],[641,1892],[642,1892],[643,1897],[644,1897],[645,1897],[646,1897],[647,1897],[648,1897],[649,1897],[650,1897],[651,1897],[652,1897],[653,1897],[654,1897],[655,1897],[656,1897],[657,1897],[658,1894],[659,1894],[660,1898],[661,1893],[662,1893],[663,1893],[664,1893],[665,1893],[666,1893],[667,1895],[668,1895],[669,1892],[670,1892],[671,1892],[672,1897],[673,1897],[674,1897],[675,1897],[676,1897],[677,1897],[678,1897],[679,1897],[680,1897],[681,1897],[682,1897],[683,1897],[684,1897],[685,1897],[686,1897],[687,1894],[688,1894],[689,1898],[690,1893],[691,1893],[692,1893],[693,1893],[694,1893],[695,1893],[696,1895],[697,1895],[698,1892],[699,1892],[700,1892],[701,1896],[702,1895],[704,1190],[705,1894],[706,1896],[707,1893],[708,1895],[709,1895],[710,1896],[711,1896],[712,1896],[713,1892],[714,1897],[715,1897],[716,1897],[717,1897],[718,1897],[719,1897],[720,1897],[721,1897],[722,1897],[723,1897],[724,1897],[725,1897],[726,1897],[727,1897],[728,1897],[729,1894],[730,1894],[731,1898],[732,1893],[733,1893],[734,1893],[735,1893],[736,1893],[737,1893],[738,1895],[739,1895],[740,1892],[741,1892],[742,1892],[743,1894],[744,1894],[745,1896],[746,1897],[747,1897],[748,1897],[749,1897],[750,1897],[751,1897],[752,1897],[753,1897],[754,1897],[755,1897],[756,1897],[757,1897],[758,1897],[759,1897],[760,1897],[761,1897],[762,1897],[763,1897],[764,1897],[765,1897],[766,1897],[767,1897],[768,1897],[769,1897],[770,1897],[771,1897],[772,1897],[773,1897],[774,1897],[775,1897],[776,1894],[777,1894],[778,1894],[779,1894],[780,1898],[781,1898],[782,1893],[783,1893],[784,1893],[785,1893],[786,1893],[787,1893],[788,1893],[789,1895],[790,1895],[791,1895],[792,1895],[793,1892],[794,1892],[795,1892],[796,1892],[797,1892],[798,1892],[799,1893],[800,1896],[801,1894],[802,1896],[803,1897],[804,1897],[805,1897],[806,1897],[807,1897],[808,1897],[809,1897],[810,1897],[811,1897],[812,1897],[813,1897],[814,1897],[815,1897],[816,1897],[817,1897],[818,1897],[819,1897],[820,1897],[821,1894],[822,1894],[823,1898],[824,1893],[825,1893],[826,1893],[827,1893],[828,1893],[829,1893],[830,1895],[831,1895],[832,1892],[833,1892],[834,1892],[835,1892],[836,1892],[837,1892],[838,1892],[839,1892],[840,1894],[841,1894],[842,1897],[843,1897],[844,1897],[845,1897],[846,1897],[847,1897],[848,1897],[849,1897],[850,1897],[851,1897],[852,1897],[853,1897],[854,1897],[855,1894],[856,1893],[857,1893],[858,1895],[859,1895],[860,1892],[861,1896],[862,1896],[863,1897],[864,1897],[865,1897],[866,1897],[867,1897],[868,1897],[869,1897],[870,1897],[871,1897],[872,1897],[873,1897],[874,1897],[875,1897],[876,1897],[877,1897],[878,1894],[879,1894],[880,1898],[881,1893],[882,1893],[883,1893],[884,1893],[885,1893],[886,1893],[887,1895],[888,1895],[889,1892],[890,1892],[891,1892],[892,1894],[893,1892],[894,1892],[895,1895],[896,1897],[897,1894],[898,1897],[899,1897],[900,1897],[901,1897],[902,1895],[903,1897],[904,1897],[905,1897],[906,1894],[907,1897],[908,1897],[909,1897],[910,1894],[911,1893],[912,1897],[913,1897],[914,1897],[915,1892],[916,1897],[917,1897],[918,1894],[919,1892],[920,1894],[921,1894],[922,1894],[923,1894],[924,1894],[925,1894],[926,1893],[927,1894],[928,1893],[929,1893],[930,1892],[931,1895],[932,1894],[933,1892],[934,1896],[935,1894],[936,1892],[937,1892],[938,1894],[939,1896],[940,1894],[941,1893],[942,1893],[943,1895],[944,1892],[945,1892],[946,1892],[947,1896],[948,1896],[949,1896],[950,1896],[951,1896],[952,1893],[953,1896],[954,1894],[955,1896],[956,1893],[957,1895],[958,1896],[959,1896],[960,1896],[961,1896],[962,1896],[963,1896],[964,1894],[965,1896],[966,1894],[967,1892],[968,1895],[969,1892],[970,1893],[971,1896],[972,1896],[973,1894],[974,1894],[975,1896],[976,1897],[977,1897],[978,1897],[979,1897],[980,1897],[981,1897],[982,1897],[983,1897],[984,1897],[985,1897],[986,1897],[987,1897],[988,1897],[989,1897],[990,1897],[991,1894],[992,1894],[993,1898],[994,1893],[995,1893],[996,1893],[997,1893],[998,1893],[999,1893],[1000,1895],[1001,1895],[1002,1892],[1003,1892],[1004,1892],[1005,1897],[1006,1897],[1007,1897],[1008,1897],[1009,1897],[1010,1897],[1011,1897],[1012,1897],[1013,1897],[1014,1897],[1015,1897],[1016,1897],[1017,1897],[1018,1897],[1019,1897],[1020,1894],[1021,1894],[1022,1898],[1023,1893],[1024,1895],[1025,1895],[1026,1892],[1027,1892],[1028,1892],[1029,1894],[1031,1896],[1032,1897],[1033,1897],[1034,1897],[1035,1897],[1036,1897],[1037,1897],[1038,1897],[1039,1897],[1040,1897],[1041,1897],[1042,1897],[1043,1897],[1044,1897],[1045,1897],[1046,1897],[1047,1894],[1048,1894],[1049,1898],[1050,1893],[1051,1893],[1052,1893],[1053,1893],[1054,1893],[1055,1893],[1056,1895],[1057,1895],[1058,1892],[1059,1892],[1060,1892],[1061,1896],[1062,1897],[1063,1897],[1064,1897],[1065,1897],[1066,1897],[1067,1897],[1068,1897],[1069,1897],[1070,1897],[1071,1897],[1072,1897],[1073,1897],[1074,1897],[1075,1897],[1076,1897],[1077,1894],[1078,1894],[1079,1898],[1080,1893],[1081,1893],[1082,1893],[1083,1893],[1084,1893],[1085,1893],[1086,1895],[1087,1895],[1088,1892],[1089,1892],[1090,1892],[1091,1896],[1092,1897],[1093,1897],[1094,1897],[1095,1897],[1096,1897],[1097,1897],[1098,1897],[1099,1897],[1100,1897],[1101,1897],[1102,1897],[1103,1897],[1104,1897],[1105,1897],[1106,1897],[1107,1894],[1108,1894],[1109,1898],[1110,1893],[1111,1893],[1112,1893],[1113,1893],[1114,1893],[1115,1893],[1116,1895],[1117,1895],[1118,1892],[1119,1892],[1120,1892],[1121,1893],[1123,1894],[1124,1893],[1125,1893],[1126,1893],[1127,1892],[1297,1903],[1298,1903],[1299,1903],[1300,1903],[1301,1903],[1302,1903],[1303,1903],[1304,1903],[1305,1889],[1307,1889],[1308,1889],[1309,1889],[1310,1889],[1311,1903],[1312,1889],[1315,1903],[1316,1903],[1318,1903],[1319,1903],[1320,1903],[1321,1889],[1322,1889],[1324,1903],[1325,1903],[1326,1903],[1327,1889],[1328,1889],[1330,1903],[1331,1903],[1332,1889],[1333,1889],[1335,1903],[1336,1903],[1337,1903],[1338,1889],[1339,1889],[1341,1903],[1342,1889],[1343,1903],[1344,1889],[1345,1889],[1346,1903],[1347,1889],[1349,1903],[1350,1889],[1352,1903],[1353,1889],[1355,1903],[1356,1903],[1357,1889],[1358,1889],[1360,1903],[1361,1903],[1362,1889],[1364,1903],[1365,1903],[1366,1903],[1367,1889],[1368,1889],[1370,1903],[1371,1903],[1372,1889],[1373,1889],[1375,1903],[1376,1903],[1377,1903],[1378,1889],[1379,1889],[1381,1903],[1382,1903],[1383,1889],[1384,1889],[1386,1903],[1387,1903],[1388,1903],[1389,1889],[1390,1889],[1392,1903],[1393,1903],[1394,1889],[1395,1903],[1396,1889],[1400,1889],[1401,1889],[1405,1903],[1406,1889],[1407,1903],[1408,1903],[1409,1889],[1410,1889],[1411,1903],[1412,1903],[1413,1903],[1414,1903],[1415,1889],[1417,1889],[1418,1889],[1419,1889],[1420,1903],[1421,1903],[1422,1889],[1423,1903],[1424,1903],[1425,1889],[1426,1889],[1428,1903],[1429,1903],[1430,1903],[1431,1889],[1432,1889],[1434,1903],[1435,1903],[1436,1889],[1437,1889],[1439,1903],[1440,1903],[1441,1903],[1442,1889],[1443,1889],[1445,1903],[1446,1903],[1447,1889],[1448,1889],[1450,1903],[1451,1903],[1452,1903],[1453,1889],[1454,1889],[1456,1903],[1457,1903],[1458,1889],[1459,1889],[1460,1903],[1461,1889]],"b":[[179,"impl-Debug-for-DebugError"],[180,"impl-Display-for-DebugError"],[746,"impl-Debug-for-ReductionOperator"],[747,"impl-Display-for-ReductionOperator"],[748,"impl-Debug-for-MapType"],[749,"impl-Display-for-MapType"],[750,"impl-Display-for-ScheduleKind"],[751,"impl-Debug-for-ScheduleKind"],[752,"impl-Debug-for-ScheduleModifier"],[753,"impl-Display-for-ScheduleModifier"],[754,"impl-Display-for-DependType"],[755,"impl-Debug-for-DependType"],[756,"impl-Display-for-DefaultKind"],[757,"impl-Debug-for-DefaultKind"],[758,"impl-Debug-for-ProcBind"],[759,"impl-Display-for-ProcBind"],[760,"impl-Debug-for-MemoryOrder"],[761,"impl-Display-for-MemoryOrder"],[762,"impl-Debug-for-AtomicOp"],[763,"impl-Display-for-AtomicOp"],[764,"impl-Debug-for-DeviceType"],[765,"impl-Display-for-DeviceType"],[766,"impl-Display-for-LinearModifier"],[767,"impl-Debug-for-LinearModifier"],[768,"impl-Debug-for-LastprivateModifier"],[769,"impl-Display-for-LastprivateModifier"],[770,"impl-Display-for-OrderKind"],[771,"impl-Debug-for-OrderKind"],[772,"impl-Display-for-ClauseItem"],[773,"impl-Debug-for-ClauseItem"],[774,"impl-Display-for-ClauseData"],[775,"impl-Debug-for-ClauseData"],[776,"impl-Display-for-DirectiveKind"],[777,"impl-Debug-for-DirectiveKind"],[778,"impl-Display-for-DirectiveIR"],[779,"impl-Debug-for-DirectiveIR"],[780,"impl-Debug-for-ConversionError"],[781,"impl-Display-for-ConversionError"],[783,"impl-Display-for-Expression"],[784,"impl-Debug-for-Expression"],[789,"impl-Debug-for-SourceLocation"],[790,"impl-Display-for-SourceLocation"],[791,"impl-Display-for-Language"],[792,"impl-Debug-for-Language"],[793,"impl-Display-for-Identifier"],[794,"impl-Debug-for-Identifier"],[795,"impl-Debug-for-ArraySection"],[796,"impl-Display-for-ArraySection"],[797,"impl-Display-for-Variable"],[798,"impl-Debug-for-Variable"],[816,"impl-From%3CExpression%3E-for-ClauseItem"],[818,"impl-From%3CIdentifier%3E-for-ClauseItem"],[819,"impl-From%3CVariable%3E-for-ClauseItem"],[833,"impl-From%3C%26str%3E-for-Identifier"],[834,"impl-From%3CString%3E-for-Identifier"],[837,"impl-From%3CIdentifier%3E-for-Variable"],[838,"impl-From%3CString%3E-for-Variable"],[839,"impl-From%3C%26str%3E-for-Variable"],[1209,"impl-Debug-for-TranslationError"],[1210,"impl-Display-for-TranslationError"],[1237,"impl-Display-for-ValidationError"],[1238,"impl-Debug-for-ValidationError"],[1365,"impl-Display-for-Clause%3C\'_%3E"],[1366,"impl-Debug-for-Clause%3C\'a%3E"],[1367,"impl-Debug-for-Directive%3C\'a%3E"],[1368,"impl-Display-for-Directive%3C\'_%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALYEPwAEAAEAHgAPAFIAFwCKABgAqAAAAKoAAACsAAEAsAAGALwAAADGAAAAyAAAAMoAAQDVAAQA3AARAPAAAgD6AAAAEgEGACsBAAA5AQAASgEAAFABAABgAQAAZAEAAHcBAAB6AQIAfgEAAIYBAACJAQIAjQEBAJABAQCZAQAAzAEBANkBAQAbAgEAKQI7AGcCVgDBAgAAywIcAOsCKwAZAwMAHwMAADEDAAAzAwEAQgMBAEYDAgBLAxIA0QM0AAgEWQBpBD0AtAQIAL8EAQDFBAIAzgQJAN4EBwDnBAkA9QQHAA4FTABxBRkAjQWOAB4GAQAiBiYBSwcBAE8HCgA=","P":[[29,"T"],[53,"U"],[61,""],[81,"U,T"],[89,"U"],[97,""],[138,"T"],[150,""],[154,"T"],[158,""],[182,"T"],[187,""],[188,"T"],[189,""],[190,"U"],[196,""],[212,"T"],[216,""],[219,"U,T"],[225,"U"],[231,""],[552,"T"],[612,""],[643,"T"],[672,""],[705,"F"],[706,""],[743,"F"],[745,""],[802,"T"],[816,""],[817,"T"],[818,""],[820,"T"],[833,""],[835,"T"],[837,""],[840,"F"],[841,""],[842,"__H"],[861,""],[862,"U"],[892,""],[976,"T"],[1005,""],[1031,"U,T"],[1061,"U"],[1091,""],[1203,"T"],[1205,""],[1206,"T"],[1207,""],[1212,"T"],[1213,"U"],[1214,"T"],[1215,""],[1220,"U,T"],[1221,"U"],[1222,""],[1229,"T"],[1233,""],[1234,"T"],[1235,""],[1239,"T"],[1241,"U"],[1243,""],[1245,"T"],[1246,""],[1247,"U,T"],[1249,"U"],[1251,""],[1268,"T"],[1270,""],[1271,"T"],[1272,""],[1276,"T"],[1277,"U"],[1278,""],[1293,"T"],[1294,"U,T"],[1295,"U"],[1296,""],[1319,"T"],[1341,""],[1349,"T"],[1352,""],[1370,"T"],[1381,"U"],[1392,""],[1414,"T"],[1417,""],[1423,"U,T"],[1434,"U"],[1445,""],[1547,"T"],[1551,""],[1554,"T"],[1556,""],[1563,"T"],[1565,"__H"],[1567,"U"],[1569,""],[1572,"T"],[1574,"U,T"],[1576,"U"],[1578,""],[1848,"T"],[1852,""],[1855,"T"],[1857,""],[1864,"T"],[1866,"__H"],[1868,"U"],[1870,""],[1873,"T"],[1875,"U,T"],[1877,"U"],[1879,""]]}],["roup_debug",{"t":"PPPGNNHHNNNHHNNN","n":["C","FortranFixed","FortranFree","InputLanguage","borrow","borrow_mut","detect_language","detect_openacc_language","fmt","from","into","main","print_usage","try_from","try_into","type_id"],"q":[[0,"roup_debug"],[16,"roup::parser"],[17,"alloc::string"],[18,"core::result"],[19,"core::fmt"],[20,"core::any"]],"i":"j00`00``000``000","f":"````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}{{A`{{l{hj}}n}}}}{{{b{f}}}{{A`{{l{jn}}n}}}}{{{b{j}}{b{dAb}}}Ad}{cc{}}{{}c{}}{{}Af}{{{b{f}}}Af}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{bAh}","D":"f","p":[[1,"reference",null,null,1],[0,"mut"],[1,"str"],[6,"Dialect",16],[6,"InputLanguage",0],[1,"tuple",null,null,1],[5,"String",17],[6,"Result",18,null,1],[5,"Formatter",19],[8,"Result",19],[1,"unit"],[5,"TypeId",20]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA0AAgABAAgADAAEAA==","P":[[4,"T"],[6,""],[9,"T"],[10,"U"],[11,""],[13,"U,T"],[14,"U"],[15,""]]}],["roup_roundtrip",{"t":"PGPPGPPNNNNHNNNNNNHNNNNNN","n":["C","Dialect","FortranFixed","FortranFree","InputLanguage","OpenACC","OpenMP","borrow","","borrow_mut","","detect_openacc_language","fmt","","from","","into","","main","try_from","","try_into","","type_id",""],"q":[[0,"roup_roundtrip"],[25,"alloc::string"],[26,"core::result"],[27,"core::fmt"],[28,"core::any"]],"i":"h`00`A`00101`010101`010101","f":"```````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}{{n{{l{hj}}j}}}}{{{b{A`}}{b{dAb}}}Ad}{{{b{h}}{b{dAb}}}Ad}{cc{}}0{{}c{}}0{{}Af}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{bAh}0","D":"h","p":[[1,"reference",null,null,1],[0,"mut"],[1,"str"],[6,"InputLanguage",0],[5,"String",25],[1,"tuple",null,null,1],[6,"Result",26,null,1],[6,"Dialect",0],[5,"Formatter",27],[8,"Result",27],[1,"unit"],[5,"TypeId",28]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABUAAgAAAA4AEwAGAA==","P":[[7,"T"],[11,""],[14,"T"],[16,"U"],[18,""],[19,"U,T"],[21,"U"],[23,""]]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1230,51679,927,946,173]}