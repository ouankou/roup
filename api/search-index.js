var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[14,"alloc::string"],[15,"core::option"],[16,"syn::expr"],[17,"core::ops::function"],[18,"syn::stmt"],[19,"alloc::vec"]],"i":"``````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{{n{Ah}}}{{Ab{{j{hf}}}}}}{{}{{An{{j{hf}}}}}}10","D":"Aj","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",14],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",15,null,1],[6,"Expr",16],[0,"mut"],[5,"Arm",16],[10,"FnMut",17],[6,"Stmt",18],[5,"Vec",19]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[7,"F"],[9,""]]}],["roup",{"t":"CCCCFFFFSSSNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNPPPPPPPPPPPPPPFPPGPPPPPGPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPGPPFGPPPPPPPPPPPPPPPFPPPPPPPPPGPGPPGPPPPPPGPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPGGPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPEEFPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHNNNNPPFGFFGPPFFFGPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","borrow","","","","borrow_mut","","","","from","","","","into","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","try_into","","","","type_id","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","And","Any","ArrayAccess","ArraySection","Atomic","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","Auto","Bare","Barrier","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","DistSchedule","Distribute","DistributeParallelFor","DistributeParallelForSimd","DistributeSimd","Div","Dynamic","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Ge","Generic","Grainsize","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelFor","ParallelForSimd","ParallelLoop","ParallelMasked","ParallelMaster","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Spread","Static","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetParallel","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetUpdate","Task","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeSimd","TeamsLoop","ThreadLimit","Threadprivate","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workshare","Write","all","array_sections","as_ast","as_str","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_clause","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_free_sentinel","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","borrow_mut","","","","","","","","","","build","","builder","","clauses","clone","","clone_into","","clone_to_uninit","","default","","","","","eq","","","fmt","","","","","from","","","","","","","","","","into","","","","","","","","","","kind","name","","new","","","openmp","parse","","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","to_pragma_string","to_source_string","to_string","","try_from","","","","","","","","","","try_into","","","","","","","","","","type_id","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_language","ALL","","AcqRel","Acquire","Affinity","Aligned","Allocate","Allocator","Assume","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginDeclareTarget","Bind","Cancel","CancellationPoint","Capture","Collapse","Compare","Copyin","Copyprivate","Critical","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndDeclareTarget","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Grainsize","Hint","Holds","If","InReduction","Inbranch","Inclusive","Init","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Loop","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","Match","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpRoutines","NoParallelism","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Priority","Private","ProcBind","Public","Reduction","Relaxed","Release","Reproducible","Requires","Reverse","Safelen","Schedule","Scope","Sections","SeqCst","Shared","Simd","Simdlen","Single","Sizes","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","UnifiedAddress","UnifiedSharedMemory","Unroll","Untied","Update","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[57,"roup::ir"],[880,"roup::ir::ClauseData"],[930,"roup::ir::ExpressionKind"],[942,"roup::ir::convert"],[951,"roup::ir::validate"],[982,"roup::ir::validate::ValidationError"],[992,"roup::lexer"],[1021,"roup::parser"],[1166,"roup::parser::openmp"],[1402,"std::os::raw"],[1403,"core::result"],[1404,"core::any"],[1405,"roup::ir::variable"],[1406,"alloc::vec"],[1407,"roup::ir::expression"],[1408,"core::option"],[1409,"roup::ir::types"],[1410,"roup::ir::directive"],[1411,"roup::ir::builder"],[1412,"roup::ir::clause"],[1413,"roup::ir::error"],[1414,"core::ops::function"],[1415,"core::fmt"],[1416,"alloc::string"],[1417,"core::hash"],[1418,"core::convert"],[1419,"alloc::boxed"],[1420,"roup::parser::directive"],[1421,"roup::parser::clause"],[1422,"nom::internal"],[1423,"alloc::borrow"]],"i":"```````````A`hln321032103210``````````````````321032103210Db0CdEhEjC`0Cf1E`24DfEf`24`4Ch531`8768787Bj2Dd``D`84DlDj6`::48=88888:`9:`Cl9<;`;```;9999=6=9`Dn<``<Cn=;;;7<?==?8=:`19=229Eb>>`>`Eh?`CdEj1?2C``E`;03`0334Cj54953Df81233363`32:22222222EfAn`?5:5`5Dd6`DhDbCf18Ch:9:``992?:==89:9Cl0`D`2?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;338`;BjEb0908>>77```Dn>9AhAj<<BfBlBnCd<;Cj;Cn;?DdDfDhDjDl=C`E`;EbEdAnB`EfEhEjBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjBn=CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjBn5`=0;540001CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAj<<BnCd0Cf0Ch0Cj0Cl0Cn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0C`0E`0Bl0Eb0EdAn0B`EfEhEjBh0Bj0Bf0Ah0Aj0:Bn=0CdCfChCjClCnD`DbDdDfDhDjDlDn000C`E`BlEbEdAnB`EfEhEjBhBjBf00AhAj000<=CdCfChCjClCnD`DbDdDfDhDjDlE`EhEjBhBjBfBn0CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAj103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1Bn=310=;:53210000090=0;40000000=252;00==0CdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbAnBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAjBnCdCfChCjClCnD`DbDdDfDhDjDlDnC`E`BlEbEdAnB`EfEhEjBhBjBfAhAj9`<:::0GdGfGhGjGlGnH`HbHd3HfHhHjHlHnI`IbIdIfIhIj<IlInGdGfJ`JbGjGlJdJfJh??JjHl;6JlJnH`K`KbKd7I`KfInKhKjKlL`021Lb0Ld012`````````Gb000``Lj101111111010100110101010Ll0LnM`1Mb2310Md00`0000000000```````````0000NhNb`````0Nd````1021`1MlMjN`MnNf7Lh7Lf7654329180753640878787654329109110065432918076543291807110532`42`6455335558701106543291807654329180765432918076543532O`Nn11111100001000001001111100000011101111101000000000011001111100011111111110111110100001110111110111111``110000000000000001111111110111001101010000000000000000000000000001000000000000000001011111111111101010`101010`10101010101`110101010","f":"````````{{}b}00{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000{cc{}}000{{}c{}}000{hb}{hj}{lj}{{lh}b}333{hn}{A`b}{A`l}{A`j}2{A`Ab}{AbA`}{{Abb}A`}{nj}{{nb}Ab}{nb}{c{{Ad{e}}}{}{}}000{{}{{Ad{c}}}{}}000{dAf}000```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Ah}{AjAl}{{{d{An}}}{{Bb{{d{B`}}}}}}{{{d{An}}}{{d{Bd}}}}{{{d{Bf}}}{{d{Bd}}}}{{BhBj}Bl}{d{{d{c}}}{}}00000000000000000000000000000{{{d{f}}}{{d{fc}}}{}}00000000000000000000000000000{{BnBhBj}Bl}{{{d{Bl}}}{{d{{Cb{C`}}}}}}{{{d{Cd}}}Cd}{{{d{Cf}}}Cf}{{{d{Ch}}}Ch}{{{d{Cj}}}Cj}{{{d{Cl}}}Cl}{{{d{Cn}}}Cn}{{{d{D`}}}D`}{{{d{Db}}}Db}{{{d{Dd}}}Dd}{{{d{Df}}}Df}{{{d{Dh}}}Dh}{{{d{Dj}}}Dj}{{{d{Dl}}}Dl}{{{d{Dn}}}Dn}{{{d{C`}}}C`}{{{d{E`}}}E`}{{{d{Bl}}}Bl}{{{d{Eb}}}Eb}{{{d{Ed}}}Ed}{{{d{An}}}An}{{{d{B`}}}B`}{{{d{Ef}}}Ef}{{{d{Eh}}}Eh}{{{d{Ej}}}Ej}{{{d{Bh}}}Bh}{{{d{Bj}}}Bj}{{{d{Bf}}}Bf}{{{d{Ah}}}Ah}{{{d{Aj}}}Aj}{{d{d{fc}}}j{}}0000000000000000000000000000{{dEl}j}0000000000000000000000000000{{Bn{d{Bd}}}Bn}{BhEn}`{{{d{Bl}}c}F`{{Ff{{d{C`}}}{{Fb{Fd}}}}}}{{BnCn}Bn}{{}Ed}{{}Bh}{{}Bj}{BnBn}0{{BnCl{d{{Cb{{d{Bd}}}}}}}Bn}{{{d{Aj}}}F`}{{{d{Cd}}{d{Cd}}}Fd}{{{d{Cf}}{d{Cf}}}Fd}{{{d{Ch}}{d{Ch}}}Fd}{{{d{Cj}}{d{Cj}}}Fd}{{{d{Cl}}{d{Cl}}}Fd}{{{d{Cn}}{d{Cn}}}Fd}{{{d{D`}}{d{D`}}}Fd}{{{d{Db}}{d{Db}}}Fd}{{{d{Dd}}{d{Dd}}}Fd}{{{d{Df}}{d{Df}}}Fd}{{{d{Dh}}{d{Dh}}}Fd}{{{d{Dj}}{d{Dj}}}Fd}{{{d{Dl}}{d{Dl}}}Fd}{{{d{Dn}}{d{Dn}}}Fd}{{{d{C`}}{d{C`}}}Fd}{{{d{E`}}{d{E`}}}Fd}{{{d{Bl}}{d{Bl}}}Fd}{{{d{Eb}}{d{Eb}}}Fd}{{{d{Ed}}{d{Ed}}}Fd}{{{d{An}}{d{An}}}Fd}{{{d{B`}}{d{B`}}}Fd}{{{d{Ef}}{d{Ef}}}Fd}{{{d{Eh}}{d{Eh}}}Fd}{{{d{Ej}}{d{Ej}}}Fd}{{{d{Bh}}{d{Bh}}}Fd}{{{d{Bj}}{d{Bj}}}Fd}{{{d{Bf}}{d{Bf}}}Fd}{{{d{Ah}}{d{Ah}}}Fd}{{{d{Aj}}{d{Aj}}}Fd}{{{d{Bl}}c}{{Al{{d{C`}}}}}{{Ff{{d{C`}}}{{Fb{Fd}}}}}}{{{d{Bl}}c}{{Bb{{d{C`}}}}}{{Ff{{d{C`}}}{{Fb{Fd}}}}}}{{Bn{d{{Cb{{d{Bd}}}}}}}Bn}{{{d{Cd}}{d{fFh}}}Fj}0{{{d{Cf}}{d{fFh}}}Fj}0{{{d{Ch}}{d{fFh}}}Fj}0{{{d{Cj}}{d{fFh}}}Fj}0{{{d{Cl}}{d{fFh}}}Fj}0{{{d{Cn}}{d{fFh}}}Fj}0{{{d{D`}}{d{fFh}}}Fj}0{{{d{Db}}{d{fFh}}}Fj}0{{{d{Dd}}{d{fFh}}}Fj}0{{{d{Df}}{d{fFh}}}Fj}0{{{d{Dh}}{d{fFh}}}Fj}0{{{d{Dj}}{d{fFh}}}Fj}0{{{d{Dl}}{d{fFh}}}Fj}0{{{d{Dn}}{d{fFh}}}Fj}0{{{d{C`}}{d{fFh}}}Fj}0{{{d{E`}}{d{fFh}}}Fj}0{{{d{Bl}}{d{fFh}}}Fj}0{{{d{Eb}}{d{fFh}}}Fj}0{{{d{Ed}}{d{fFh}}}Fj}{{{d{An}}{d{fFh}}}Fj}0{{{d{B`}}{d{fFh}}}Fj}{{{d{Ef}}{d{fFh}}}Fj}{{{d{Eh}}{d{fFh}}}Fj}{{{d{Ej}}{d{fFh}}}Fj}{{{d{Bh}}{d{fFh}}}Fj}0{{{d{Bj}}{d{fFh}}}Fj}0{{{d{Bf}}{d{fFh}}}Fj}0{{{d{Ah}}{d{fFh}}}Fj}0{{{d{Aj}}{d{fFh}}}Fj}0{{{d{Ed}}Bj}Ed}{{}Bn}{{Ch{Bb{An}}BhBj}Bl}{cc{}}00000000000000{AnDn}{BfDn}{AjDn}333333333333{FlBf}{{{d{Bd}}}Bf}55{BfAj}{FlAj}7{{{d{Bd}}}Aj}{{{d{Bl}}c}Fd{{Ff{{d{C`}}}{{Fb{Fd}}}}}}{{{d{E`}}}Fd}{{{d{Cd}}{d{fc}}}jFn}{{{d{Cf}}{d{fc}}}jFn}{{{d{Ch}}{d{fc}}}jFn}{{{d{Cj}}{d{fc}}}jFn}{{{d{Cl}}{d{fc}}}jFn}{{{d{Cn}}{d{fc}}}jFn}{{{d{D`}}{d{fc}}}jFn}{{{d{Db}}{d{fc}}}jFn}{{{d{Dd}}{d{fc}}}jFn}{{{d{Df}}{d{fc}}}jFn}{{{d{Dh}}{d{fc}}}jFn}{{{d{Dj}}{d{fc}}}jFn}{{{d{Dl}}{d{fc}}}jFn}{{{d{E`}}{d{fc}}}jFn}{{{d{Eh}}{d{fc}}}jFn}{{{d{Ej}}{d{fc}}}jFn}{{{d{Bh}}{d{fc}}}jFn}{{{d{Bj}}{d{fc}}}jFn}{{{d{Bf}}{d{fc}}}jFn}{{Bn{d{Bd}}}Bn}{{}c{}}00000000000000000000000000000{{{d{Ah}}}Fd}{{{d{Aj}}}Fd}{BjFd}{{{d{C`}}}Fd}{{{d{E`}}}Fd}1111211101110{{{d{An}}}Fd}2224221511111{{{d{Bl}}}E`}{B`Ef}{{{d{Bl}}}Bj}{{{d{Ed}}}Bj}{{{d{Ed}}}Fd}{AhBb}{BhEn}{{{d{Bl}}}Bh}2{{BnCf{d{{Cb{{d{Bd}}}}}}}Bn}{{{d{Bl}}}{{d{Bd}}}}{{{d{Bf}}}{{d{Bd}}}}{{{d{Aj}}}{{d{Bd}}}}{E`Bn}{{E`{d{Bd}}{Al{C`}}BhBj}Bl}{{FdBj}Ed}{{c{d{Ed}}}An{{G`{Fl}}}}{{EnEn}Bh}{cBf{{G`{Fl}}}}{{{Bb{An}}{Bb{An}}{Bb{An}}}Ah}{cAj{{G`{Fl}}}}{BnBn}{{Bnb}Bn}{{Bn{d{Bd}}}Bn}20{B`Fl}{{}Bn}{{{Bb{Cn}}BhBj}Bl}1{EdFd}{Bj{{d{Bd}}}}{{Bn{d{{Cb{{d{Bd}}}}}}}Bn}{{BnD`}Bn}{{BnCd{d{{Cb{{d{Bd}}}}}}}Bn}{{BnCh{Bb{{d{Bd}}}}}Bn}{{BnCh}Bn}{{BnCh{Al{Cj}}{Bb{{d{Bd}}}}}Bn}5{{E`{d{Bd}}BhBj}Bl}{AnAh}{{}Bh}{AhBb}{BjEd}>>{{BhBj}Bl}0?{dc{}}0000000000000000000000000000{dFl}00000000000000000000000{c{{Ad{e}}}{}{}}00000000000000000000000000000{{}{{Ad{c}}}{}}00000000000000000000000000000{dAf}00000000000000000000000000000{cAn{{G`{Fl}}}}`{{{d{Bl}}}{{Ad{j{Al{Gb}}}}}}{{EdBj}Ed}{{EdFd}Ed}:{{c{Al{Ah}}}Aj{{G`{Fl}}}}{GdBb}{GfBb}{GhBf}{GjBb}{GlBb}{GnAn}{H`Bb}{HbCl}{HdAn}{GnBb}{HfAn}{HhAl}{HjAl}{HlAl}{HnAl}{I`Al}{IbAl}{IdAl}{IfAl}{IhAl}{IjAl}{HbAl}{IlAl}{InAl}{GdAl}{GfAl}{J`Al}{JbAl}{GjCh}{GlCh}{JdAn}{JfAn}{JhAn}{IbBb}0{JjBb}{HlBb}{InBb}{GjAl}{JlAn}{JnBb}{H`Bf}{K`An}{KbAn}{KdAn}{JjDd}{I`Cd}{KfAn}:{KhAn}{KjAl}{KlKn}{L`Kn}0{KjFl}{KlAl}{LbKn}{LbEh}{LdEj}{LdKn}36{{{d{Lf}}BhBj{d{Ed}}}{{Ad{BlEb}}}}{{{d{Lh}}{d{Ed}}}{{Ad{C`Eb}}}}{{{d{Bd}}}{{Ad{ClEb}}}}{{{d{Bd}}}{{Ad{E`Eb}}}}{{{d{Bd}}{d{Ed}}}{{Ad{{Al{Dn}}Eb}}}}{{{d{Bd}}{d{Ed}}}{{Ad{C`Eb}}}}0{{{d{Bd}}}{{Ad{CdEb}}}}1``````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Gb}}}Gb}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Gb}}{d{Gb}}}Fd}{{{d{Gb}}{d{fFh}}}Fj}0{cc{}}0{{}c{}}0{{{d{Lj}}{d{C`}}}{{Ad{jGb}}}}{E`Lj}{dc{}}{dFl}{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0{{{d{Lj}}{d{{Cb{C`}}}}}{{Ad{j{Al{Gb}}}}}}{LlFl}0{LnFl}{M`Al}1{MbFl}23{M`Fl}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Md}}}Md}{{d{d{fc}}}j{}}{{dEl}j}{{}Md}{{{d{Md}}{d{Md}}}Fd}{{{d{Md}}{d{fFh}}}Fj}{cc{}}{{}c{}}{MfFd}{{{d{Bd}}}{{Mh{{d{Bd}}{d{Bd}}}}}}000000{{{d{Bd}}}Fl}11{dc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}```````````````````{d{{d{c}}}{}}000000000{{{d{f}}}{{d{fc}}}{}}000000000{MjMl}{MnN`}{{}Mj}{{}Mn}{LfAl}{{{d{Nb}}}Nb}{{{d{Nd}}}Nd}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Ml}7{{}N`}7{{}Nf}{{{d{Nh}}{d{Nh}}}Fd}{{{d{Lh}}{d{Lh}}}Fd}{{{d{Lf}}{d{Lf}}}Fd}{{{d{Nh}}{d{fFh}}}Fj}{{{d{Lh}}{d{fFh}}}Fj}0{{{d{Lf}}{d{fFh}}}Fj}0{cc{}}000000000{{}c{}}000000000{LhNh}{LhNj}{LfNj}{{}Mj}{{}Mn}{{N`Ml}Nf}`{{{d{N`}}{d{Bd}}{d{Ml}}}{{Mh{{d{Bd}}Lf}}}}{{{d{Nf}}{d{Bd}}}{{Mh{{d{Bd}}Lf}}}}{{{d{Bd}}}{{Mh{{d{Bd}}Lf}}}}{{{d{Ml}}{d{Bd}}}{{Mh{{d{Bd}}{Al{Lh}}}}}}{{{d{N`}}{Nj{Bd}}{d{Bd}}{d{Ml}}}{{Mh{{d{Bd}}Lf}}}}{{Mj{d{Bd}}}Mj}{{Mj{d{Bd}}{Nl{{Nj{Bd}}{d{Bd}}}{{Fb{{Mh{{d{Bd}}Lh}}}}}}}Mj}{{Mn{d{Bd}}{Nl{{Nj{Bd}}{d{Bd}}{d{Ml}}}{{Fb{{Mh{{d{Bd}}Lf}}}}}}}Mn}{{Mn{d{Bd}}}Mn}3{{Mj{d{Bd}}Nb}Mj}{{{d{fMj}}{d{Bd}}Nb}{{d{fMj}}}}{dc{}}0{{{d{Lf}}}Fl}{{{d{Lh}}}Fl}{dFl}0{c{{Ad{e}}}{}{}}000000000{{}{{Ad{c}}}{}}000000000{dAf}000000000{{MlFd}Ml}{{MjFd}Mj}{{N`Fd}N`}{{MnFd}Mn}{{MjNb}Mj}{{MnNd}Mn}{{NfMd}Nf}``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{Nn{{d{Bd}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{}Ml}{{{d{O`}}}O`}{{{d{Nn}}}Nn}{{d{d{fc}}}j{}}0{{dEl}j}0{{}N`}{{{d{O`}}{d{O`}}}Fd}{{{d{Nn}}{d{Nn}}}Fd}{{{d{O`}}{d{fFh}}}Fj}{{{d{Nn}}{d{fFh}}}Fj}{cc{}}0{{{d{O`}}{d{fc}}}jFn}{{{d{Nn}}{d{fc}}}jFn}{{}c{}}0{O`{{d{Bd}}}}{{}Nf}{O`Nb}{dc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0","D":"CMd","p":[[1,"i32"],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[1,"unit"],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[5,"OmpDirective",4],[8,"c_char",1402],[6,"Result",1403,null,1],[5,"TypeId",1404],[5,"ArraySection",57,1405],[5,"Variable",57,1405],[5,"Vec",1406],[6,"Expression",57,1407],[5,"ExpressionAst",57,1407],[6,"Option",1408,null,1],[1,"str"],[5,"Identifier",57,1405],[5,"SourceLocation",57,1409],[6,"Language",57,1409],[5,"DirectiveIR",57,1410],[5,"DirectiveBuilder",57,1411],[6,"ClauseData",57,1412],[1,"slice"],[6,"ReductionOperator",57,1412],[6,"MapType",57,1412],[6,"ScheduleKind",57,1412],[6,"ScheduleModifier",57,1412],[6,"DependType",57,1412],[6,"DefaultKind",57,1412],[6,"ProcBind",57,1412],[6,"MemoryOrder",57,1412],[6,"AtomicOp",57,1412],[6,"DeviceType",57,1412],[6,"LinearModifier",57,1412],[6,"LastprivateModifier",57,1412],[6,"OrderKind",57,1412],[6,"ClauseItem",57,1412],[6,"DirectiveKind",57,1410],[6,"ConversionError",57,1413],[5,"ParserConfig",57,1407],[6,"ExpressionKind",57,1407],[6,"BinaryOperator",57,1407],[6,"UnaryOperator",57,1407],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1414],[5,"Formatter",1415],[8,"Result",1415],[5,"String",1416],[10,"Hasher",1417],[10,"Into",1418,null,1],[6,"ValidationError",951],[15,"Aligned",880],[15,"Allocate",880],[15,"Allocator",880],[15,"Schedule",880],[15,"DistSchedule",880],[15,"If",880],[15,"Generic",880],[15,"Depend",880],[15,"Device",880],[15,"Grainsize",880],[15,"Private",880],[15,"Firstprivate",880],[15,"Lastprivate",880],[15,"Shared",880],[15,"Reduction",880],[15,"Map",880],[15,"UseDevicePtr",880],[15,"UseDeviceAddr",880],[15,"IsDevicePtr",880],[15,"HasDeviceAddr",880],[15,"Affinity",880],[15,"Linear",880],[15,"Copyin",880],[15,"Copyprivate",880],[15,"Safelen",880],[15,"Simdlen",880],[15,"ThreadLimit",880],[15,"AtomicOperation",880],[15,"Collapse",880],[15,"Ordered",880],[15,"NumThreads",880],[15,"NumTeams",880],[15,"NumTasks",880],[15,"Priority",880],[15,"Filter",880],[15,"Call",930],[15,"ArrayAccess",930],[5,"Box",1419,null,1],[15,"Conditional",930],[15,"BinaryOp",930],[15,"UnaryOp",930],[5,"Directive",1021,1420],[5,"Clause",1021,1421],[5,"ValidationContext",951],[15,"ConflictingClauses",982],[15,"ClauseNotAllowed",982],[15,"InvalidCombination",982],[15,"MissingRequiredClause",982],[6,"Language",992],[1,"char"],[8,"IResult",1422],[5,"ClauseRegistryBuilder",1021,1421],[5,"ClauseRegistry",1021,1421],[5,"DirectiveRegistryBuilder",1021,1420],[5,"DirectiveRegistry",1021,1420],[6,"ClauseRule",1021,1421],[6,"DirectiveRule",1021,1420],[5,"Parser",1021],[6,"ClauseKind",1021,1421],[6,"Cow",1423],[1,"fn"],[6,"OpenMpDirective",1166],[6,"OpenMpClause",1166]],"r":[[57,1412],[58,1412],[59,1412],[60,1407],[61,1407],[62,1412],[63,1412],[64,1412],[65,1412],[66,1410],[67,1412],[68,1407],[69,1412],[70,1407],[71,1405],[72,1410],[73,1412],[74,1412],[75,1412],[76,1412],[77,1412],[78,1410],[79,1407],[80,1407],[81,1412],[82,1407],[83,1407],[84,1412],[85,1407],[86,1412],[87,1407],[88,1409],[89,1407],[90,1412],[91,1412],[92,1412],[93,1412],[94,1412],[95,1407],[96,1412],[97,1412],[98,1407],[99,1413],[100,1412],[101,1412],[102,1409],[103,1410],[104,1412],[105,1410],[106,1410],[107,1410],[108,1410],[109,1410],[110,1412],[111,1412],[112,1412],[113,1412],[114,1412],[115,1412],[116,1410],[117,1407],[118,1412],[119,1412],[120,1412],[121,1411],[122,1410],[123,1410],[124,1412],[125,1410],[126,1410],[127,1410],[128,1410],[129,1407],[130,1412],[131,1407],[132,1410],[133,1407],[134,1412],[135,1412],[136,1407],[137,1407],[138,1412],[139,1412],[140,1412],[141,1410],[142,1410],[143,1410],[144,1409],[145,1412],[146,1407],[147,1412],[148,1412],[149,1407],[150,1412],[151,1412],[152,1412],[153,1405],[154,1412],[155,1407],[156,1412],[157,1412],[158,1412],[159,1407],[160,1413],[161,1412],[162,1412],[163,1409],[164,1412],[165,1412],[166,1407],[167,1412],[168,1412],[169,1412],[170,1407],[171,1412],[172,1410],[173,1407],[174,1412],[175,1412],[176,1410],[177,1412],[178,1410],[179,1412],[180,1412],[181,1410],[182,1412],[183,1412],[184,1407],[185,1412],[186,1407],[187,1412],[188,1412],[189,1407],[190,1407],[191,1412],[192,1412],[193,1412],[194,1410],[195,1412],[196,1412],[197,1412],[198,1407],[199,1412],[200,1412],[201,1412],[202,1410],[203,1412],[204,1410],[205,1410],[206,1410],[207,1410],[208,1410],[209,1410],[210,1410],[211,1410],[212,1407],[213,1407],[214,1407],[215,1412],[216,1412],[217,1412],[218,1412],[219,1412],[220,1412],[221,1412],[222,1412],[223,1412],[224,1412],[225,1412],[226,1412],[227,1412],[228,1410],[229,1412],[230,1412],[231,1410],[232,1412],[233,1412],[234,1412],[235,1410],[236,1410],[237,1412],[238,1412],[239,1412],[240,1407],[241,1407],[242,1412],[243,1410],[244,1412],[245,1410],[246,1412],[247,1412],[248,1409],[249,1412],[250,1412],[251,1407],[252,1412],[253,1410],[254,1410],[255,1410],[256,1410],[257,1410],[258,1410],[259,1410],[260,1410],[261,1410],[262,1410],[263,1410],[264,1410],[265,1410],[266,1410],[267,1410],[268,1410],[269,1410],[270,1410],[271,1410],[272,1410],[273,1410],[274,1410],[275,1410],[276,1410],[277,1410],[278,1410],[279,1410],[280,1410],[281,1412],[282,1410],[283,1412],[284,1412],[285,1407],[286,1407],[287,1410],[288,1409],[289,1413],[290,1413],[291,1407],[292,1413],[293,1412],[294,1412],[295,1412],[296,1412],[297,1412],[298,951],[299,951],[300,1405],[301,1412],[302,1410],[303,1412],[304,1405],[305,1405],[306,1407],[307,1407],[308,1405],[309,1410],[310,1411],[311,1412],[312,1412],[313,1412],[314,1412],[315,1412],[316,1412],[317,1412],[318,1412],[319,1412],[320,1412],[321,1412],[322,1412],[323,1412],[324,1412],[325,1412],[326,1410],[327,1410],[328,1413],[329,1407],[330,1407],[331,1407],[332,1407],[333,1407],[334,1407],[335,1409],[336,1409],[337,1405],[338,1405],[339,1405],[340,1411],[341,1412],[342,1412],[343,1412],[344,1412],[345,1412],[346,1412],[347,1412],[348,1412],[349,1412],[350,1412],[351,1412],[352,1412],[353,1412],[354,1412],[355,1412],[356,1410],[357,1410],[358,1413],[359,1407],[360,1407],[361,1407],[362,1407],[363,1407],[364,1407],[365,1409],[366,1409],[367,1405],[368,1405],[369,1405],[370,1411],[371,1410],[372,1412],[373,1412],[374,1412],[375,1412],[376,1412],[377,1412],[378,1412],[379,1412],[380,1412],[381,1412],[382,1412],[383,1412],[384,1412],[385,1412],[386,1412],[387,1410],[388,1410],[389,1413],[390,1407],[391,1407],[392,1407],[393,1407],[394,1407],[395,1407],[396,1409],[397,1409],[398,1405],[399,1405],[400,1405],[401,1412],[402,1412],[403,1412],[404,1412],[405,1412],[406,1412],[407,1412],[408,1412],[409,1412],[410,1412],[411,1412],[412,1412],[413,1412],[414,1412],[415,1412],[416,1410],[417,1410],[418,1413],[419,1407],[420,1407],[421,1407],[422,1407],[423,1407],[424,1407],[425,1409],[426,1409],[427,1405],[428,1405],[429,1405],[430,1412],[431,1412],[432,1412],[433,1412],[434,1412],[435,1412],[436,1412],[437,1412],[438,1412],[439,1412],[440,1412],[441,1412],[442,1412],[443,1412],[444,1412],[445,1410],[446,1410],[447,1413],[448,1407],[449,1407],[450,1407],[451,1407],[452,1407],[453,1407],[454,1409],[455,1409],[456,1405],[457,1405],[458,1405],[459,1411],[460,1409],[462,1410],[463,1411],[464,1407],[465,1409],[466,1409],[467,1411],[468,1411],[469,1411],[470,1405],[471,1412],[472,1412],[473,1412],[474,1412],[475,1412],[476,1412],[477,1412],[478,1412],[479,1412],[480,1412],[481,1412],[482,1412],[483,1412],[484,1412],[485,1412],[486,1410],[487,1410],[488,1413],[489,1407],[490,1407],[491,1407],[492,1407],[493,1407],[494,1407],[495,1409],[496,1409],[497,1405],[498,1405],[499,1405],[500,1410],[501,1410],[502,1411],[503,1412],[504,1412],[505,1412],[506,1412],[507,1412],[508,1412],[509,1412],[510,1412],[511,1412],[512,1412],[513,1412],[514,1412],[515,1412],[516,1412],[517,1412],[518,1412],[519,1412],[520,1412],[521,1412],[522,1412],[523,1412],[524,1412],[525,1412],[526,1412],[527,1412],[528,1412],[529,1412],[530,1412],[531,1412],[532,1412],[533,1410],[534,1410],[535,1410],[536,1410],[537,1413],[538,1413],[539,1407],[540,1407],[541,1407],[542,1407],[543,1407],[544,1407],[545,1407],[546,1409],[547,1409],[548,1409],[549,1409],[550,1405],[551,1405],[552,1405],[553,1405],[554,1405],[555,1405],[556,1407],[557,1411],[558,1410],[559,1411],[560,1412],[561,1412],[562,1412],[563,1412],[564,1412],[565,1412],[566,1412],[567,1412],[568,1412],[569,1412],[570,1412],[571,1412],[572,1412],[573,1412],[574,1412],[575,1412],[576,1412],[577,1412],[578,1410],[579,1410],[580,1413],[581,1407],[582,1407],[583,1407],[584,1407],[585,1407],[586,1407],[587,1409],[588,1409],[589,1405],[590,1405],[591,1405],[592,1405],[593,1405],[594,1405],[595,1405],[596,1405],[597,1410],[598,1410],[599,1412],[600,1412],[601,1412],[602,1412],[603,1412],[604,1412],[605,1412],[606,1412],[607,1412],[608,1412],[609,1412],[610,1412],[611,1412],[612,1410],[613,1407],[614,1407],[615,1409],[616,1409],[617,1405],[618,1411],[619,1411],[620,1412],[621,1412],[622,1412],[623,1412],[624,1412],[625,1412],[626,1412],[627,1412],[628,1412],[629,1412],[630,1412],[631,1412],[632,1412],[633,1412],[634,1412],[635,1410],[636,1410],[637,1413],[638,1407],[639,1407],[640,1407],[641,1407],[642,1407],[643,1407],[644,1409],[645,1409],[646,1405],[647,1405],[648,1405],[649,1405],[650,1405],[651,1409],[652,1412],[653,1410],[654,1412],[655,1412],[656,1412],[657,1412],[658,1409],[659,1412],[660,1412],[661,1412],[662,1410],[663,1412],[664,1412],[665,1412],[666,1410],[667,1407],[668,1412],[669,1412],[670,1412],[671,1405],[672,1412],[673,1412],[674,1410],[675,1405],[676,1410],[677,1410],[678,1410],[679,1410],[680,1410],[681,1410],[682,1407],[683,1410],[684,1407],[685,1407],[686,1405],[687,1409],[688,1410],[689,1405],[690,1411],[691,1410],[692,1405],[693,1405],[694,1411],[695,1410],[696,1407],[697,1407],[698,1409],[699,1405],[700,1405],[701,1405],[702,1411],[703,1411],[704,1411],[705,1411],[706,1411],[707,1407],[708,1411],[709,1410],[710,1411],[711,1407],[712,1409],[713,1411],[714,1411],[715,1411],[716,1411],[717,1411],[718,1411],[719,1411],[720,1410],[721,1405],[722,1409],[723,1405],[724,1407],[725,1411],[726,1411],[727,1410],[728,1410],[729,1411],[730,1412],[731,1412],[732,1412],[733,1412],[734,1412],[735,1412],[736,1412],[737,1412],[738,1412],[739,1412],[740,1412],[741,1412],[742,1412],[743,1412],[744,1412],[745,1410],[746,1410],[747,1413],[748,1407],[749,1407],[750,1407],[751,1407],[752,1407],[753,1407],[754,1409],[755,1409],[756,1405],[757,1405],[758,1405],[759,1412],[760,1412],[761,1412],[762,1412],[763,1412],[764,1412],[765,1412],[766,1412],[767,1412],[768,1412],[769,1412],[770,1412],[771,1412],[772,1412],[773,1412],[774,1410],[775,1410],[776,1413],[777,1407],[778,1409],[779,1409],[780,1405],[781,1405],[782,1405],[783,1411],[784,1412],[785,1412],[786,1412],[787,1412],[788,1412],[789,1412],[790,1412],[791,1412],[792,1412],[793,1412],[794,1412],[795,1412],[796,1412],[797,1412],[798,1412],[799,1410],[800,1410],[801,1413],[802,1407],[803,1407],[804,1407],[805,1407],[806,1407],[807,1407],[808,1409],[809,1409],[810,1405],[811,1405],[812,1405],[813,1411],[814,1412],[815,1412],[816,1412],[817,1412],[818,1412],[819,1412],[820,1412],[821,1412],[822,1412],[823,1412],[824,1412],[825,1412],[826,1412],[827,1412],[828,1412],[829,1410],[830,1410],[831,1413],[832,1407],[833,1407],[834,1407],[835,1407],[836,1407],[837,1407],[838,1409],[839,1409],[840,1405],[841,1405],[842,1405],[843,1411],[844,1412],[845,1412],[846,1412],[847,1412],[848,1412],[849,1412],[850,1412],[851,1412],[852,1412],[853,1412],[854,1412],[855,1412],[856,1412],[857,1412],[858,1412],[859,1410],[860,1410],[861,1413],[862,1407],[863,1407],[864,1407],[865,1407],[866,1407],[867,1407],[868,1409],[869,1409],[870,1405],[871,1405],[872,1405],[873,1407],[875,1410],[876,1407],[877,1407],[878,1407],[879,1405],[1021,1421],[1022,1421],[1023,1421],[1024,1421],[1025,1421],[1026,1421],[1027,1421],[1028,1421],[1029,1420],[1030,1420],[1031,1420],[1032,1420],[1033,1420],[1034,1421],[1035,1420],[1036,1421],[1037,1421],[1039,1421],[1040,1421],[1041,1421],[1042,1420],[1043,1420],[1045,1421],[1046,1421],[1047,1421],[1048,1420],[1049,1420],[1050,1421],[1051,1421],[1052,1420],[1053,1420],[1055,1421],[1056,1421],[1057,1421],[1058,1420],[1059,1420],[1060,1421],[1061,1420],[1062,1421],[1063,1420],[1064,1420],[1065,1421],[1066,1420],[1067,1421],[1068,1420],[1069,1421],[1070,1420],[1071,1421],[1072,1421],[1073,1420],[1074,1420],[1076,1421],[1077,1421],[1078,1420],[1079,1421],[1080,1421],[1081,1421],[1082,1420],[1083,1420],[1084,1421],[1085,1421],[1086,1420],[1087,1420],[1089,1421],[1090,1421],[1091,1421],[1092,1420],[1093,1420],[1094,1421],[1095,1421],[1096,1420],[1097,1420],[1099,1421],[1100,1421],[1101,1421],[1102,1420],[1103,1420],[1104,1421],[1105,1421],[1106,1420],[1107,1421],[1108,1420],[1111,1420],[1114,1421],[1115,1420],[1116,1421],[1117,1421],[1118,1420],[1119,1420],[1120,1421],[1121,1421],[1122,1421],[1123,1421],[1124,1420],[1125,1420],[1126,1421],[1127,1421],[1128,1420],[1129,1421],[1130,1421],[1131,1420],[1132,1420],[1134,1421],[1135,1421],[1136,1421],[1137,1420],[1138,1420],[1139,1421],[1140,1421],[1141,1420],[1142,1420],[1144,1421],[1145,1421],[1146,1421],[1147,1420],[1148,1420],[1149,1421],[1150,1421],[1151,1420],[1152,1420],[1154,1421],[1155,1421],[1156,1421],[1157,1420],[1158,1420],[1159,1421],[1160,1421],[1161,1420],[1162,1420],[1163,1421],[1164,1420]],"b":[[503,"impl-Debug-for-ReductionOperator"],[504,"impl-Display-for-ReductionOperator"],[505,"impl-Display-for-MapType"],[506,"impl-Debug-for-MapType"],[507,"impl-Display-for-ScheduleKind"],[508,"impl-Debug-for-ScheduleKind"],[509,"impl-Debug-for-ScheduleModifier"],[510,"impl-Display-for-ScheduleModifier"],[511,"impl-Debug-for-DependType"],[512,"impl-Display-for-DependType"],[513,"impl-Debug-for-DefaultKind"],[514,"impl-Display-for-DefaultKind"],[515,"impl-Display-for-ProcBind"],[516,"impl-Debug-for-ProcBind"],[517,"impl-Display-for-MemoryOrder"],[518,"impl-Debug-for-MemoryOrder"],[519,"impl-Display-for-AtomicOp"],[520,"impl-Debug-for-AtomicOp"],[521,"impl-Debug-for-DeviceType"],[522,"impl-Display-for-DeviceType"],[523,"impl-Display-for-LinearModifier"],[524,"impl-Debug-for-LinearModifier"],[525,"impl-Display-for-LastprivateModifier"],[526,"impl-Debug-for-LastprivateModifier"],[527,"impl-Debug-for-OrderKind"],[528,"impl-Display-for-OrderKind"],[529,"impl-Display-for-ClauseItem"],[530,"impl-Debug-for-ClauseItem"],[531,"impl-Display-for-ClauseData"],[532,"impl-Debug-for-ClauseData"],[533,"impl-Display-for-DirectiveKind"],[534,"impl-Debug-for-DirectiveKind"],[535,"impl-Debug-for-DirectiveIR"],[536,"impl-Display-for-DirectiveIR"],[537,"impl-Display-for-ConversionError"],[538,"impl-Debug-for-ConversionError"],[540,"impl-Debug-for-Expression"],[541,"impl-Display-for-Expression"],[546,"impl-Debug-for-SourceLocation"],[547,"impl-Display-for-SourceLocation"],[548,"impl-Display-for-Language"],[549,"impl-Debug-for-Language"],[550,"impl-Display-for-Identifier"],[551,"impl-Debug-for-Identifier"],[552,"impl-Display-for-ArraySection"],[553,"impl-Debug-for-ArraySection"],[554,"impl-Debug-for-Variable"],[555,"impl-Display-for-Variable"],[574,"impl-From%3CExpression%3E-for-ClauseItem"],[575,"impl-From%3CIdentifier%3E-for-ClauseItem"],[576,"impl-From%3CVariable%3E-for-ClauseItem"],[589,"impl-From%3CString%3E-for-Identifier"],[590,"impl-From%3C%26str%3E-for-Identifier"],[593,"impl-From%3CIdentifier%3E-for-Variable"],[594,"impl-From%3CString%3E-for-Variable"],[596,"impl-From%3C%26str%3E-for-Variable"],[965,"impl-Debug-for-ValidationError"],[966,"impl-Display-for-ValidationError"],[1080,"impl-Display-for-Clause%3C\'_%3E"],[1081,"impl-Debug-for-Clause%3C\'a%3E"],[1082,"impl-Display-for-Directive%3C\'_%3E"],[1083,"impl-Debug-for-Directive%3C\'a%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAJADLAADAAEADAAHAC4ACwA8AAIARQAAAFIABgBpAAAAdgAAAIIAAACEAAAAkwAAAJYAAACnAAAAqgACAK4AAAC0AAAAtwACALsAAQC+AAEAxwAAAPEAAQD8AAEAKwEBADcBOwB1AVYA2AEcAPgBKwAmAgIAKgIBAD8CAgBOAgEAUgIBAFUCAABYAhIA2wKOAHEDPQC+AwkAzgMHANcDCQDlAwcA+gNCAFEEGAFsBQEAcAUKAA==","P":[[11,"T"],[23,"U"],[27,""],[45,"U,T"],[49,"U"],[53,""],[310,"T"],[370,""],[401,"T"],[430,""],[462,"F"],[463,""],[500,"F"],[502,""],[559,"T"],[574,""],[577,"T"],[589,""],[591,"T"],[593,""],[595,"T"],[596,""],[597,"F"],[598,""],[599,"__H"],[618,""],[619,"U"],[649,""],[730,"T"],[759,""],[783,"U,T"],[813,"U"],[843,""],[957,"T"],[961,""],[962,"T"],[963,""],[967,"T"],[969,"U"],[971,""],[973,"T"],[974,""],[975,"U,T"],[977,"U"],[979,""],[996,"T"],[998,""],[999,"T"],[1000,""],[1004,"T"],[1005,"U"],[1006,""],[1017,"T"],[1018,"U,T"],[1019,"U"],[1020,""],[1040,"T"],[1060,""],[1067,"T"],[1069,""],[1084,"T"],[1094,"U"],[1104,""],[1123,"T"],[1125,""],[1129,"U,T"],[1139,"U"],[1149,""],[1369,"T"],[1373,""],[1376,"T"],[1378,""],[1385,"T"],[1387,"__H"],[1389,"U"],[1391,""],[1394,"T"],[1396,"U,T"],[1398,"U"],[1400,""]]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1059,39695,173]}