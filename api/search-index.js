var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[14,"alloc::string"],[15,"core::option"],[16,"syn::expr"],[17,"core::ops::function"],[18,"syn::stmt"],[19,"alloc::vec"]],"i":"``````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{{n{Ah}}}{{Ab{{j{hf}}}}}}{{}{{An{{j{hf}}}}}}10","D":"Aj","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",14],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",15,null,1],[6,"Expr",16],[0,"mut"],[5,"Arm",16],[10,"FnMut",17],[6,"Stmt",18],[5,"Vec",19]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[7,"F"],[9,""]]}],["roup",{"t":"CCCCFFFFSSSNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHNNNNPPFGFFGPPFFFGPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","borrow","","","","borrow_mut","","","","from","","","","into","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","try_into","","","","type_id","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_clause","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_free_sentinel","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","borrow_mut","","","","","","","","","","build","","builder","","clauses","clone","","clone_into","","clone_to_uninit","","default","","","","","eq","","","fmt","","","","","from","","","","","","","","","","into","","","","","","","","","","kind","name","","new","","","openmp","parse","","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","to_pragma_string","to_source_string","to_string","","try_from","","","","","","","","","","try_into","","","","","","","","","","type_id","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_language","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndDeclareTarget","EndDeclareVariant","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[59,"roup::ir"],[950,"roup::ir::ClauseData"],[1000,"roup::ir::ExpressionKind"],[1012,"roup::ir::convert"],[1021,"roup::ir::translate"],[1045,"roup::ir::validate"],[1076,"roup::ir::validate::ValidationError"],[1086,"roup::lexer"],[1115,"roup::parser"],[1260,"roup::parser::openmp"],[1558,"std::os::raw"],[1559,"core::result"],[1560,"core::any"],[1561,"roup::ir::variable"],[1562,"alloc::vec"],[1563,"roup::ir::expression"],[1564,"core::option"],[1565,"roup::ir::directive"],[1566,"roup::ir::types"],[1567,"roup::ir::builder"],[1568,"roup::ir::clause"],[1569,"roup::ir::error"],[1570,"core::ops::function"],[1571,"core::fmt"],[1572,"alloc::string"],[1573,"core::hash"],[1574,"core::convert"],[1575,"alloc::boxed"],[1576,"roup::parser::directive"],[1577,"roup::parser::clause"],[1578,"nom::internal"],[1579,"alloc::borrow"]],"i":"```````````Abhln321032103210````````````````````321032103210Dd0CfEhEjCb0Ch1Bd204DhEf`222224`4222Cj5333331`8768787Bl244Df``Db84DnDl6`::48=888888:`9:`Cn9<;`;```9;99999999=99699=9`E`<``<D`=;;;7<;?==;?8=:`19=229;;Eb>>`>`Eh?`CfEj1?2Cb`Bd00;03`0334Cl54953Dh81233363`32:222222222222222EfAn`?5:5`5Df6`DjDdCh188Cj:9:``9992?:==89:9Cn0`:Db2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;BlEb09=08>>77```E`>>9AhAj<Bd=BhBnC`Cf=<Cl<D`<DdDfDhDjDlDn?Cb=;EbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`=CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`5``=0;540001CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj<<C`Cf0Ch0Cj0Cl0Cn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0E`0Cb0Bd0Bn0Eb0EdAn0B`EfEhEjBj0Bl0Bh0Ah0Aj0:C`=0CfChCjClCnD`DbDdDfDhDjDlDnE`000CbBdBnEbEdAnB`EfEhEjBjBlBh00AhAj000<=CfChCjClCnD`DbDdDfDhDjDlDnBdEhEjBjBlBhC`0CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1C`=31>0=;:53210000090=0;4000000=0=252;00==0CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbAnBjBlBhAhAj7`C`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj9`<:::0GdGfGhGjGlGnH`HbHd3HfHhHjHlHnI`IbIdIfIhIj<IlInGdGfJ`JbGjGlJdJfJh??JjHl;6JlJnH`K`KbKd7I`KfInKhKjKlL`021Lb0Ld012`````````Lj00`0000000000000````000Gb000``Ll101111111010100110101010Ln0M`Mb1Md2310Mf00`0000000000```````````0000NjNd`````0Nf````1021`1MnMlNbN`Nh7Lh7Lf7654329180753640878787654329109110065432918076543291807110532`42`6455335558701106543291807654329180765432918076543532ObO`111111110101100100010000000010011111111100000001110111111010000000000110010111110001101110111111111111101011111101100001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"````````{{}b}00{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000{cc{}}000{{}c{}}000{hb}{hj}{lj}{{lh}b}333{hn}{{A`bb}A`}{Abb}{Abl}{Abj}2{AbA`}{A`Ab}{{A`b}Ab}{A`j}{nj}{{nb}A`}{nb}{c{{Ad{e}}}{}{}}000{{}{{Ad{c}}}{}}000{dAf}000````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Ah}{AjAl}{{{d{An}}}{{Bb{{d{B`}}}}}}{Bd{{d{Bf}}}}{{{d{An}}}{{d{Bf}}}}{{{d{Bh}}}{{d{Bf}}}}{{BjBl}Bn}{d{{d{c}}}{}}00000000000000000000000000000{{{d{f}}}{{d{fc}}}{}}00000000000000000000000000000{{C`BjBl}Bn}{{{d{Bn}}}{{d{{Cd{Cb}}}}}}{{{d{Cf}}}Cf}{{{d{Ch}}}Ch}{{{d{Cj}}}Cj}{{{d{Cl}}}Cl}{{{d{Cn}}}Cn}{{{d{D`}}}D`}{{{d{Db}}}Db}{{{d{Dd}}}Dd}{{{d{Df}}}Df}{{{d{Dh}}}Dh}{{{d{Dj}}}Dj}{{{d{Dl}}}Dl}{{{d{Dn}}}Dn}{{{d{E`}}}E`}{{{d{Cb}}}Cb}{{{d{Bd}}}Bd}{{{d{Bn}}}Bn}{{{d{Eb}}}Eb}{{{d{Ed}}}Ed}{{{d{An}}}An}{{{d{B`}}}B`}{{{d{Ef}}}Ef}{{{d{Eh}}}Eh}{{{d{Ej}}}Ej}{{{d{Bj}}}Bj}{{{d{Bl}}}Bl}{{{d{Bh}}}Bh}{{{d{Ah}}}Ah}{{{d{Aj}}}Aj}{{d{d{fc}}}j{}}0000000000000000000000000000{{dEl}j}0000000000000000000000000000{{C`{d{Bf}}}C`}{BjEn}``{{{d{Bn}}c}F`{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{C`D`}C`}{{}Ed}{{}Bj}{{}Bl}{C`C`}0{{C`Cn{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Aj}}}F`}{{{d{Cf}}{d{Cf}}}Fd}{{{d{Ch}}{d{Ch}}}Fd}{{{d{Cj}}{d{Cj}}}Fd}{{{d{Cl}}{d{Cl}}}Fd}{{{d{Cn}}{d{Cn}}}Fd}{{{d{D`}}{d{D`}}}Fd}{{{d{Db}}{d{Db}}}Fd}{{{d{Dd}}{d{Dd}}}Fd}{{{d{Df}}{d{Df}}}Fd}{{{d{Dh}}{d{Dh}}}Fd}{{{d{Dj}}{d{Dj}}}Fd}{{{d{Dl}}{d{Dl}}}Fd}{{{d{Dn}}{d{Dn}}}Fd}{{{d{E`}}{d{E`}}}Fd}{{{d{Cb}}{d{Cb}}}Fd}{{{d{Bd}}{d{Bd}}}Fd}{{{d{Bn}}{d{Bn}}}Fd}{{{d{Eb}}{d{Eb}}}Fd}{{{d{Ed}}{d{Ed}}}Fd}{{{d{An}}{d{An}}}Fd}{{{d{B`}}{d{B`}}}Fd}{{{d{Ef}}{d{Ef}}}Fd}{{{d{Eh}}{d{Eh}}}Fd}{{{d{Ej}}{d{Ej}}}Fd}{{{d{Bj}}{d{Bj}}}Fd}{{{d{Bl}}{d{Bl}}}Fd}{{{d{Bh}}{d{Bh}}}Fd}{{{d{Ah}}{d{Ah}}}Fd}{{{d{Aj}}{d{Aj}}}Fd}{{{d{Bn}}c}{{Al{{d{Cb}}}}}{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{{d{Bn}}c}{{Bb{{d{Cb}}}}}{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{C`{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Cf}}{d{fFh}}}Fj}0{{{d{Ch}}{d{fFh}}}Fj}0{{{d{Cj}}{d{fFh}}}Fj}0{{{d{Cl}}{d{fFh}}}Fj}0{{{d{Cn}}{d{fFh}}}Fj}0{{{d{D`}}{d{fFh}}}Fj}0{{{d{Db}}{d{fFh}}}Fj}0{{{d{Dd}}{d{fFh}}}Fj}0{{{d{Df}}{d{fFh}}}Fj}0{{{d{Dh}}{d{fFh}}}Fj}0{{{d{Dj}}{d{fFh}}}Fj}0{{{d{Dl}}{d{fFh}}}Fj}0{{{d{Dn}}{d{fFh}}}Fj}0{{{d{E`}}{d{fFh}}}Fj}0{{{d{Cb}}{d{fFh}}}Fj}0{{{d{Bd}}{d{fFh}}}Fj}0{{{d{Bn}}{d{fFh}}}Fj}0{{{d{Eb}}{d{fFh}}}Fj}0{{{d{Ed}}{d{fFh}}}Fj}{{{d{An}}{d{fFh}}}Fj}0{{{d{B`}}{d{fFh}}}Fj}{{{d{Ef}}{d{fFh}}}Fj}{{{d{Eh}}{d{fFh}}}Fj}{{{d{Ej}}{d{fFh}}}Fj}{{{d{Bj}}{d{fFh}}}Fj}0{{{d{Bl}}{d{fFh}}}Fj}0{{{d{Bh}}{d{fFh}}}Fj}0{{{d{Ah}}{d{fFh}}}Fj}0{{{d{Aj}}{d{fFh}}}Fj}0{{{d{Ed}}Bl}Ed}{{}C`}{{Cj{Bb{An}}BjBl}Bn}{cc{}}0000000000000{BhE`}{AjE`}2{AnE`}333333333333{FlBh}4{{{d{Bf}}}Bh}55{BhAj}{FlAj}{{{d{Bf}}}Aj}{{{d{Bn}}c}Fd{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{{d{Bd}}}Fd}{{{d{Cf}}{d{fc}}}jFn}{{{d{Ch}}{d{fc}}}jFn}{{{d{Cj}}{d{fc}}}jFn}{{{d{Cl}}{d{fc}}}jFn}{{{d{Cn}}{d{fc}}}jFn}{{{d{D`}}{d{fc}}}jFn}{{{d{Db}}{d{fc}}}jFn}{{{d{Dd}}{d{fc}}}jFn}{{{d{Df}}{d{fc}}}jFn}{{{d{Dh}}{d{fc}}}jFn}{{{d{Dj}}{d{fc}}}jFn}{{{d{Dl}}{d{fc}}}jFn}{{{d{Dn}}{d{fc}}}jFn}{{{d{Bd}}{d{fc}}}jFn}{{{d{Eh}}{d{fc}}}jFn}{{{d{Ej}}{d{fc}}}jFn}{{{d{Bj}}{d{fc}}}jFn}{{{d{Bl}}{d{fc}}}jFn}{{{d{Bh}}{d{fc}}}jFn}{{C`{d{Bf}}}C`}{{}c{}}00000000000000000000000000000{{BnBl}Bn}{{{d{Ah}}}Fd}{{{d{Aj}}}Fd}{BlFd}{{{d{Cb}}}Fd}{{{d{Bd}}}Fd}1111211101110{{{d{An}}}Fd}2224221511111{{{d{Bn}}}Bd}{B`Ef}{{{d{Bn}}}Bl}{{{d{Ed}}}Bl}{{{d{Ed}}}Fd}{AhBb}{BjEn}{{{d{Bn}}}Bj}2{{C`Ch{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Bn}}}{{d{Bf}}}}{{{d{Bh}}}{{d{Bf}}}}{{{d{Aj}}}{{d{Bf}}}}{{BdBl}{{d{Bf}}}}{BdC`}{{Bd{d{Bf}}{Al{Cb}}BjBl}Bn}{{FdBl}Ed}{{c{d{Ed}}}An{{G`{Fl}}}}{{EnEn}Bj}{cBh{{G`{Fl}}}}{{{Bb{An}}{Bb{An}}{Bb{An}}}Ah}{cAj{{G`{Fl}}}}{C`C`}{{C`b}C`}{{C`{d{Bf}}}C`}20{B`Fl}{{}C`}{{{Bb{D`}}BjBl}Bn}1{EdFd}{Bl{{d{Bf}}}}{{C`{d{{Cd{{d{Bf}}}}}}}C`}{{C`Db}C`}{{C`Cf{d{{Cd{{d{Bf}}}}}}}C`}{{C`Cj{Bb{{d{Bf}}}}}C`}{{C`Cj}C`}{{C`Cj{Al{Cl}}{Bb{{d{Bf}}}}}C`}{{{d{fBn}}Bl}j}6{{Bd{d{Bf}}BjBl}Bn}{AnAh}{{}Bj}{AhBb}{BlEd}??{{BjBl}Bn}0{{}C`}{dc{}}0000000000000000000000000000{dFl}00000000000000000000000{{{d{Bn}}Bl}Fl}`{c{{Ad{e}}}{}{}}00000000000000000000000000000{{}{{Ad{c}}}{}}00000000000000000000000000000{dAf}00000000000000000000000000000{cAn{{G`{Fl}}}}`{{{d{Bn}}}{{Ad{j{Al{Gb}}}}}}{{EdBl}Ed}{{EdFd}Ed}<{{c{Al{Ah}}}Aj{{G`{Fl}}}}{GdBb}{GfBb}{GhBh}{GjBb}{GlBb}{GnAn}{H`Bb}{HbCn}{HdAn}{GnBb}{HfAn}{HhAl}{HjAl}{HlAl}{HnAl}{I`Al}{IbAl}{IdAl}{IfAl}{IhAl}{IjAl}{HbAl}{IlAl}{InAl}{GdAl}{GfAl}{J`Al}{JbAl}{GjCj}{GlCj}{JdAn}{JfAn}{JhAn}{IbBb}0{JjBb}{HlBb}{InBb}{GjAl}{JlAn}{JnBb}{H`Bh}{K`An}{KbAn}{KdAn}{JjDf}{I`Cf}{KfAn}:{KhAn}{KjAl}{KlKn}{L`Kn}0{KjFl}{KlAl}{LbKn}{LbEh}{LdEj}{LdKn}36{{{d{Lf}}BjBl{d{Ed}}}{{Ad{BnEb}}}}{{{d{Lh}}{d{Ed}}}{{Ad{CbEb}}}}{{{d{Bf}}}{{Ad{CnEb}}}}{{{d{Bf}}}{{Ad{BdEb}}}}{{{d{Bf}}{d{Ed}}}{{Ad{{Al{E`}}Eb}}}}{{{d{Bf}}{d{Ed}}}{{Ad{CbEb}}}}0{{{d{Bf}}}{{Ad{CfEb}}}}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Lj}}}Lj}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Lj}}{d{Lj}}}Fd}{{{d{Lj}}{d{fFh}}}Fj}0{cc{}}{EbLj}{{}c{}}{dc{}}{dFl}{{{d{Bf}}}{{Ad{FlLj}}}}{{{d{Bf}}Ed}{{Ad{BnLj}}}}10{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}``````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Gb}}}Gb}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Gb}}{d{Gb}}}Fd}{{{d{Gb}}{d{fFh}}}Fj}0{cc{}}0??{{{d{Ll}}{d{Cb}}}{{Ad{jGb}}}}{BdLl}{dc{}}{dFl}>>==<<{{{d{Ll}}{d{{Cd{Cb}}}}}{{Ad{j{Al{Gb}}}}}}{LnFl}0{M`Fl}{MbAl}1{MdFl}23{MbFl}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Mf}}}Mf}{{d{d{fc}}}j{}}{{dEl}j}{{}Mf}{{{d{Mf}}{d{Mf}}}Fd}{{{d{Mf}}{d{fFh}}}Fj}{cc{}}{{}c{}}{MhFd}{{{d{Bf}}}{{Mj{{d{Bf}}{d{Bf}}}}}}000000{{{d{Bf}}}Fl}11{dc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}```````````````````{d{{d{c}}}{}}000000000{{{d{f}}}{{d{fc}}}{}}000000000{MlMn}{N`Nb}{{}Ml}{{}N`}{LfAl}{{{d{Nd}}}Nd}{{{d{Nf}}}Nf}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Mn}7{{}Nb}7{{}Nh}{{{d{Nj}}{d{Nj}}}Fd}{{{d{Lh}}{d{Lh}}}Fd}{{{d{Lf}}{d{Lf}}}Fd}{{{d{Nj}}{d{fFh}}}Fj}{{{d{Lh}}{d{fFh}}}Fj}0{{{d{Lf}}{d{fFh}}}Fj}0{cc{}}000000000{{}c{}}000000000{LhNj}{LhNl}{LfNl}{{}Ml}{{}N`}{{NbMn}Nh}`{{{d{Nb}}{d{Bf}}{d{Mn}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Nh}}{d{Bf}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Bf}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Mn}}{d{Bf}}}{{Mj{{d{Bf}}{Al{Lh}}}}}}{{{d{Nb}}{Nl{Bf}}{d{Bf}}{d{Mn}}}{{Mj{{d{Bf}}Lf}}}}{{Ml{d{Bf}}}Ml}{{Ml{d{Bf}}{Nn{{Nl{Bf}}{d{Bf}}}{{Fb{{Mj{{d{Bf}}Lh}}}}}}}Ml}{{N`{d{Bf}}{Nn{{Nl{Bf}}{d{Bf}}{d{Mn}}}{{Fb{{Mj{{d{Bf}}Lf}}}}}}}N`}{{N`{d{Bf}}}N`}3{{Ml{d{Bf}}Nd}Ml}{{{d{fMl}}{d{Bf}}Nd}{{d{fMl}}}}{dc{}}0{{{d{Lf}}}Fl}{{{d{Lh}}}Fl}{dFl}0{c{{Ad{e}}}{}{}}000000000{{}{{Ad{c}}}{}}000000000{dAf}000000000{{MnFd}Mn}{{MlFd}Ml}{{NbFd}Nb}{{N`Fd}N`}{{MlNd}Ml}{{N`Nf}N`}{{NhMf}Nh}````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{O`{{d{Bf}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{}Mn}{{{d{Ob}}}Ob}{{{d{O`}}}O`}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Nb}{{{d{Ob}}{d{Ob}}}Fd}{{{d{O`}}{d{O`}}}Fd}{{{d{Ob}}{d{fFh}}}Fj}{{{d{O`}}{d{fFh}}}Fj}{cc{}}0{{{d{Ob}}{d{fc}}}jFn}{{{d{O`}}{d{fc}}}jFn}{{}c{}}0{Ob{{d{Bf}}}}{{}Nh}{ObNd}{dc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0","D":"DGb","p":[[1,"i32"],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[1,"unit"],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[8,"c_char",1558],[5,"OmpDirective",4],[6,"Result",1559,null,1],[5,"TypeId",1560],[5,"ArraySection",59,1561],[5,"Variable",59,1561],[5,"Vec",1562],[6,"Expression",59,1563],[5,"ExpressionAst",59,1563],[6,"Option",1564,null,1],[6,"DirectiveKind",59,1565],[1,"str"],[5,"Identifier",59,1561],[5,"SourceLocation",59,1566],[6,"Language",59,1566],[5,"DirectiveIR",59,1565],[5,"DirectiveBuilder",59,1567],[6,"ClauseData",59,1568],[1,"slice"],[6,"ReductionOperator",59,1568],[6,"MapType",59,1568],[6,"ScheduleKind",59,1568],[6,"ScheduleModifier",59,1568],[6,"DependType",59,1568],[6,"DefaultKind",59,1568],[6,"ProcBind",59,1568],[6,"MemoryOrder",59,1568],[6,"AtomicOp",59,1568],[6,"DeviceType",59,1568],[6,"LinearModifier",59,1568],[6,"LastprivateModifier",59,1568],[6,"OrderKind",59,1568],[6,"ClauseItem",59,1568],[6,"ConversionError",59,1569],[5,"ParserConfig",59,1563],[6,"ExpressionKind",59,1563],[6,"BinaryOperator",59,1563],[6,"UnaryOperator",59,1563],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1570],[5,"Formatter",1571],[8,"Result",1571],[5,"String",1572],[10,"Hasher",1573],[10,"Into",1574,null,1],[6,"ValidationError",1045],[15,"Aligned",950],[15,"Allocate",950],[15,"Allocator",950],[15,"Schedule",950],[15,"DistSchedule",950],[15,"If",950],[15,"Generic",950],[15,"Depend",950],[15,"Device",950],[15,"Grainsize",950],[15,"Private",950],[15,"Firstprivate",950],[15,"Lastprivate",950],[15,"Shared",950],[15,"Reduction",950],[15,"Map",950],[15,"UseDevicePtr",950],[15,"UseDeviceAddr",950],[15,"IsDevicePtr",950],[15,"HasDeviceAddr",950],[15,"Affinity",950],[15,"Linear",950],[15,"Copyin",950],[15,"Copyprivate",950],[15,"Safelen",950],[15,"Simdlen",950],[15,"ThreadLimit",950],[15,"AtomicOperation",950],[15,"Collapse",950],[15,"Ordered",950],[15,"NumThreads",950],[15,"NumTeams",950],[15,"NumTasks",950],[15,"Priority",950],[15,"Filter",950],[15,"Call",1000],[15,"ArrayAccess",1000],[5,"Box",1575,null,1],[15,"Conditional",1000],[15,"BinaryOp",1000],[15,"UnaryOp",1000],[5,"Directive",1115,1576],[5,"Clause",1115,1577],[6,"TranslationError",1021],[5,"ValidationContext",1045],[15,"ConflictingClauses",1076],[15,"ClauseNotAllowed",1076],[15,"InvalidCombination",1076],[15,"MissingRequiredClause",1076],[6,"Language",1086],[1,"char"],[8,"IResult",1578],[5,"ClauseRegistryBuilder",1115,1577],[5,"ClauseRegistry",1115,1577],[5,"DirectiveRegistryBuilder",1115,1576],[5,"DirectiveRegistry",1115,1576],[6,"ClauseRule",1115,1577],[6,"DirectiveRule",1115,1576],[5,"Parser",1115],[6,"ClauseKind",1115,1577],[6,"Cow",1579],[1,"fn"],[6,"OpenMpDirective",1260],[6,"OpenMpClause",1260]],"r":[[59,1568],[60,1568],[61,1568],[62,1563],[63,1563],[64,1568],[65,1568],[66,1568],[67,1568],[68,1565],[69,1568],[70,1565],[71,1563],[72,1568],[73,1563],[74,1561],[75,1565],[76,1565],[77,1565],[78,1565],[79,1565],[80,1568],[81,1568],[82,1568],[83,1565],[84,1565],[85,1565],[86,1568],[87,1568],[88,1565],[89,1565],[90,1565],[91,1565],[92,1565],[93,1563],[94,1563],[95,1568],[96,1563],[97,1563],[98,1568],[99,1563],[100,1568],[101,1563],[102,1566],[103,1563],[104,1565],[105,1565],[106,1568],[107,1568],[108,1568],[109,1568],[110,1568],[111,1563],[112,1568],[113,1568],[114,1563],[115,1569],[116,1568],[117,1568],[118,1566],[119,1565],[120,1568],[121,1565],[122,1565],[123,1565],[124,1565],[125,1565],[126,1565],[127,1568],[128,1568],[129,1568],[130,1568],[131,1568],[132,1568],[133,1565],[134,1563],[135,1568],[136,1568],[137,1568],[138,1567],[139,1565],[140,1565],[141,1565],[142,1568],[143,1565],[144,1565],[145,1565],[146,1565],[147,1565],[148,1565],[149,1565],[150,1565],[151,1563],[152,1565],[153,1565],[154,1568],[155,1565],[156,1565],[157,1563],[158,1565],[159,1563],[160,1568],[161,1568],[162,1563],[163,1563],[164,1568],[165,1568],[166,1568],[167,1565],[168,1565],[169,1565],[170,1566],[171,1568],[172,1565],[173,1563],[174,1568],[175,1568],[176,1565],[177,1563],[178,1568],[179,1568],[180,1568],[181,1561],[182,1568],[183,1563],[184,1568],[185,1568],[186,1568],[187,1563],[188,1565],[189,1565],[190,1569],[191,1568],[192,1568],[193,1566],[194,1568],[195,1568],[196,1563],[197,1568],[198,1568],[199,1568],[200,1563],[201,1568],[202,1565],[203,1563],[204,1568],[205,1568],[206,1565],[207,1565],[208,1565],[209,1568],[210,1565],[211,1568],[212,1568],[213,1565],[214,1568],[215,1568],[216,1563],[217,1568],[218,1563],[219,1568],[220,1568],[221,1563],[222,1563],[223,1568],[224,1568],[225,1568],[226,1565],[227,1568],[228,1568],[229,1568],[230,1563],[231,1568],[232,1568],[233,1568],[234,1565],[235,1568],[236,1565],[237,1565],[238,1565],[239,1565],[240,1565],[241,1565],[242,1565],[243,1565],[244,1565],[245,1565],[246,1565],[247,1565],[248,1565],[249,1565],[250,1565],[251,1563],[252,1563],[253,1563],[254,1568],[255,1568],[256,1568],[257,1568],[258,1568],[259,1568],[260,1568],[261,1568],[262,1568],[263,1568],[264,1568],[265,1568],[266,1568],[267,1565],[268,1565],[269,1568],[270,1568],[271,1565],[272,1568],[273,1568],[274,1568],[275,1565],[276,1565],[277,1565],[278,1568],[279,1568],[280,1568],[281,1563],[282,1563],[283,1568],[284,1565],[285,1568],[286,1565],[287,1568],[288,1568],[289,1566],[290,1565],[291,1568],[292,1568],[293,1565],[294,1563],[295,1568],[296,1565],[297,1565],[298,1565],[299,1565],[300,1565],[301,1565],[302,1565],[303,1565],[304,1565],[305,1565],[306,1565],[307,1565],[308,1565],[309,1565],[310,1565],[311,1565],[312,1565],[313,1565],[314,1565],[315,1565],[316,1565],[317,1565],[318,1565],[319,1565],[320,1565],[321,1565],[322,1565],[323,1565],[324,1565],[325,1565],[326,1565],[327,1565],[328,1565],[329,1565],[330,1565],[331,1565],[332,1565],[333,1565],[334,1565],[335,1565],[336,1565],[337,1565],[338,1565],[339,1565],[340,1565],[341,1568],[342,1565],[343,1565],[344,1568],[345,1568],[346,1563],[347,1563],[348,1565],[349,1566],[350,1569],[351,1569],[352,1563],[353,1565],[354,1569],[355,1568],[356,1568],[357,1568],[358,1568],[359,1568],[360,1045],[361,1045],[362,1561],[363,1568],[364,1565],[365,1565],[366,1568],[367,1561],[368,1561],[369,1563],[370,1565],[371,1563],[372,1561],[373,1565],[374,1567],[375,1568],[376,1568],[377,1568],[378,1568],[379,1568],[380,1568],[381,1568],[382,1568],[383,1568],[384,1568],[385,1568],[386,1568],[387,1568],[388,1568],[389,1568],[390,1565],[391,1565],[392,1569],[393,1563],[394,1563],[395,1563],[396,1563],[397,1563],[398,1563],[399,1566],[400,1566],[401,1561],[402,1561],[403,1561],[404,1567],[405,1568],[406,1568],[407,1568],[408,1568],[409,1568],[410,1568],[411,1568],[412,1568],[413,1568],[414,1568],[415,1568],[416,1568],[417,1568],[418,1568],[419,1568],[420,1565],[421,1565],[422,1569],[423,1563],[424,1563],[425,1563],[426,1563],[427,1563],[428,1563],[429,1566],[430,1566],[431,1561],[432,1561],[433,1561],[434,1567],[435,1565],[436,1568],[437,1568],[438,1568],[439,1568],[440,1568],[441,1568],[442,1568],[443,1568],[444,1568],[445,1568],[446,1568],[447,1568],[448,1568],[449,1568],[450,1568],[451,1565],[452,1565],[453,1569],[454,1563],[455,1563],[456,1563],[457,1563],[458,1563],[459,1563],[460,1566],[461,1566],[462,1561],[463,1561],[464,1561],[465,1568],[466,1568],[467,1568],[468,1568],[469,1568],[470,1568],[471,1568],[472,1568],[473,1568],[474,1568],[475,1568],[476,1568],[477,1568],[478,1568],[479,1568],[480,1565],[481,1565],[482,1569],[483,1563],[484,1563],[485,1563],[486,1563],[487,1563],[488,1563],[489,1566],[490,1566],[491,1561],[492,1561],[493,1561],[494,1568],[495,1568],[496,1568],[497,1568],[498,1568],[499,1568],[500,1568],[501,1568],[502,1568],[503,1568],[504,1568],[505,1568],[506,1568],[507,1568],[508,1568],[509,1565],[510,1565],[511,1569],[512,1563],[513,1563],[514,1563],[515,1563],[516,1563],[517,1563],[518,1566],[519,1566],[520,1561],[521,1561],[522,1561],[523,1567],[524,1566],[526,1012],[527,1565],[528,1567],[529,1563],[530,1566],[531,1566],[532,1567],[533,1567],[534,1567],[535,1561],[536,1568],[537,1568],[538,1568],[539,1568],[540,1568],[541,1568],[542,1568],[543,1568],[544,1568],[545,1568],[546,1568],[547,1568],[548,1568],[549,1568],[550,1568],[551,1565],[552,1565],[553,1569],[554,1563],[555,1563],[556,1563],[557,1563],[558,1563],[559,1563],[560,1566],[561,1566],[562,1561],[563,1561],[564,1561],[565,1565],[566,1565],[567,1567],[568,1568],[569,1568],[570,1568],[571,1568],[572,1568],[573,1568],[574,1568],[575,1568],[576,1568],[577,1568],[578,1568],[579,1568],[580,1568],[581,1568],[582,1568],[583,1568],[584,1568],[585,1568],[586,1568],[587,1568],[588,1568],[589,1568],[590,1568],[591,1568],[592,1568],[593,1568],[594,1568],[595,1568],[596,1568],[597,1568],[598,1565],[599,1565],[600,1565],[601,1565],[602,1569],[603,1569],[604,1563],[605,1563],[606,1563],[607,1563],[608,1563],[609,1563],[610,1563],[611,1566],[612,1566],[613,1566],[614,1566],[615,1561],[616,1561],[617,1561],[618,1561],[619,1561],[620,1561],[621,1563],[622,1567],[623,1565],[624,1567],[625,1568],[626,1568],[627,1568],[628,1568],[629,1568],[630,1568],[631,1568],[632,1568],[633,1568],[634,1568],[635,1568],[636,1568],[637,1568],[638,1568],[639,1568],[640,1568],[641,1568],[642,1568],[643,1565],[644,1565],[645,1569],[646,1563],[647,1563],[648,1563],[649,1563],[650,1563],[651,1563],[652,1566],[653,1566],[654,1561],[655,1561],[656,1561],[657,1561],[658,1561],[659,1561],[660,1561],[661,1561],[662,1565],[663,1565],[664,1568],[665,1568],[666,1568],[667,1568],[668,1568],[669,1568],[670,1568],[671,1568],[672,1568],[673,1568],[674,1568],[675,1568],[676,1568],[677,1565],[678,1563],[679,1563],[680,1566],[681,1566],[682,1561],[683,1567],[684,1567],[685,1568],[686,1568],[687,1568],[688,1568],[689,1568],[690,1568],[691,1568],[692,1568],[693,1568],[694,1568],[695,1568],[696,1568],[697,1568],[698,1568],[699,1568],[700,1565],[701,1565],[702,1569],[703,1563],[704,1563],[705,1563],[706,1563],[707,1563],[708,1563],[709,1566],[710,1566],[711,1561],[712,1561],[713,1561],[714,1565],[715,1561],[716,1561],[717,1566],[718,1568],[719,1565],[720,1568],[721,1568],[722,1568],[723,1568],[724,1566],[725,1568],[726,1568],[727,1568],[728,1565],[729,1568],[730,1568],[731,1568],[732,1565],[733,1563],[734,1568],[735,1568],[736,1568],[737,1561],[738,1568],[739,1568],[740,1565],[741,1561],[742,1565],[743,1565],[744,1565],[745,1565],[746,1565],[747,1565],[748,1563],[749,1565],[750,1563],[751,1563],[752,1561],[753,1566],[754,1565],[755,1561],[756,1567],[757,1565],[758,1561],[759,1561],[760,1565],[761,1567],[762,1565],[763,1563],[764,1563],[765,1566],[766,1561],[767,1561],[768,1561],[769,1567],[770,1567],[771,1567],[772,1567],[773,1567],[774,1563],[775,1567],[776,1565],[777,1567],[778,1563],[779,1566],[780,1567],[781,1567],[782,1567],[783,1567],[784,1567],[785,1567],[786,1565],[787,1567],[788,1565],[789,1561],[790,1566],[791,1561],[792,1563],[793,1567],[794,1567],[795,1565],[796,1565],[797,1567],[798,1568],[799,1568],[800,1568],[801,1568],[802,1568],[803,1568],[804,1568],[805,1568],[806,1568],[807,1568],[808,1568],[809,1568],[810,1568],[811,1568],[812,1568],[813,1565],[814,1565],[815,1569],[816,1563],[817,1563],[818,1563],[819,1563],[820,1563],[821,1563],[822,1566],[823,1566],[824,1561],[825,1561],[826,1561],[827,1568],[828,1568],[829,1568],[830,1568],[831,1568],[832,1568],[833,1568],[834,1568],[835,1568],[836,1568],[837,1568],[838,1568],[839,1568],[840,1568],[841,1568],[842,1565],[843,1565],[844,1569],[845,1563],[846,1566],[847,1566],[848,1561],[849,1561],[850,1561],[851,1565],[853,1567],[854,1568],[855,1568],[856,1568],[857,1568],[858,1568],[859,1568],[860,1568],[861,1568],[862,1568],[863,1568],[864,1568],[865,1568],[866,1568],[867,1568],[868,1568],[869,1565],[870,1565],[871,1569],[872,1563],[873,1563],[874,1563],[875,1563],[876,1563],[877,1563],[878,1566],[879,1566],[880,1561],[881,1561],[882,1561],[883,1567],[884,1568],[885,1568],[886,1568],[887,1568],[888,1568],[889,1568],[890,1568],[891,1568],[892,1568],[893,1568],[894,1568],[895,1568],[896,1568],[897,1568],[898,1568],[899,1565],[900,1565],[901,1569],[902,1563],[903,1563],[904,1563],[905,1563],[906,1563],[907,1563],[908,1566],[909,1566],[910,1561],[911,1561],[912,1561],[913,1567],[914,1568],[915,1568],[916,1568],[917,1568],[918,1568],[919,1568],[920,1568],[921,1568],[922,1568],[923,1568],[924,1568],[925,1568],[926,1568],[927,1568],[928,1568],[929,1565],[930,1565],[931,1569],[932,1563],[933,1563],[934,1563],[935,1563],[936,1563],[937,1563],[938,1566],[939,1566],[940,1561],[941,1561],[942,1561],[943,1563],[945,1565],[946,1563],[947,1563],[948,1563],[949,1561],[1115,1577],[1116,1577],[1117,1577],[1118,1577],[1119,1577],[1120,1577],[1121,1577],[1122,1577],[1123,1576],[1124,1576],[1125,1576],[1126,1576],[1127,1576],[1128,1577],[1129,1576],[1130,1577],[1131,1577],[1133,1577],[1134,1577],[1135,1577],[1136,1576],[1137,1576],[1139,1577],[1140,1577],[1141,1577],[1142,1576],[1143,1576],[1144,1577],[1145,1577],[1146,1576],[1147,1576],[1149,1577],[1150,1577],[1151,1577],[1152,1576],[1153,1576],[1154,1577],[1155,1576],[1156,1577],[1157,1576],[1158,1576],[1159,1577],[1160,1576],[1161,1577],[1162,1576],[1163,1577],[1164,1576],[1165,1577],[1166,1577],[1167,1576],[1168,1576],[1170,1577],[1171,1577],[1172,1576],[1173,1577],[1174,1577],[1175,1577],[1176,1576],[1177,1576],[1178,1577],[1179,1577],[1180,1576],[1181,1576],[1183,1577],[1184,1577],[1185,1577],[1186,1576],[1187,1576],[1188,1577],[1189,1577],[1190,1576],[1191,1576],[1193,1577],[1194,1577],[1195,1577],[1196,1576],[1197,1576],[1198,1577],[1199,1577],[1200,1576],[1201,1577],[1202,1576],[1205,1576],[1208,1577],[1209,1576],[1210,1577],[1211,1577],[1212,1576],[1213,1576],[1214,1577],[1215,1577],[1216,1577],[1217,1577],[1218,1576],[1219,1576],[1220,1577],[1221,1577],[1222,1576],[1223,1577],[1224,1577],[1225,1576],[1226,1576],[1228,1577],[1229,1577],[1230,1577],[1231,1576],[1232,1576],[1233,1577],[1234,1577],[1235,1576],[1236,1576],[1238,1577],[1239,1577],[1240,1577],[1241,1576],[1242,1576],[1243,1577],[1244,1577],[1245,1576],[1246,1576],[1248,1577],[1249,1577],[1250,1577],[1251,1576],[1252,1576],[1253,1577],[1254,1577],[1255,1576],[1256,1576],[1257,1577],[1258,1576]],"b":[[568,"impl-Display-for-ReductionOperator"],[569,"impl-Debug-for-ReductionOperator"],[570,"impl-Display-for-MapType"],[571,"impl-Debug-for-MapType"],[572,"impl-Debug-for-ScheduleKind"],[573,"impl-Display-for-ScheduleKind"],[574,"impl-Display-for-ScheduleModifier"],[575,"impl-Debug-for-ScheduleModifier"],[576,"impl-Display-for-DependType"],[577,"impl-Debug-for-DependType"],[578,"impl-Display-for-DefaultKind"],[579,"impl-Debug-for-DefaultKind"],[580,"impl-Display-for-ProcBind"],[581,"impl-Debug-for-ProcBind"],[582,"impl-Debug-for-MemoryOrder"],[583,"impl-Display-for-MemoryOrder"],[584,"impl-Display-for-AtomicOp"],[585,"impl-Debug-for-AtomicOp"],[586,"impl-Display-for-DeviceType"],[587,"impl-Debug-for-DeviceType"],[588,"impl-Display-for-LinearModifier"],[589,"impl-Debug-for-LinearModifier"],[590,"impl-Debug-for-LastprivateModifier"],[591,"impl-Display-for-LastprivateModifier"],[592,"impl-Debug-for-OrderKind"],[593,"impl-Display-for-OrderKind"],[594,"impl-Display-for-ClauseItem"],[595,"impl-Debug-for-ClauseItem"],[596,"impl-Debug-for-ClauseData"],[597,"impl-Display-for-ClauseData"],[598,"impl-Debug-for-DirectiveKind"],[599,"impl-Display-for-DirectiveKind"],[600,"impl-Debug-for-DirectiveIR"],[601,"impl-Display-for-DirectiveIR"],[602,"impl-Debug-for-ConversionError"],[603,"impl-Display-for-ConversionError"],[605,"impl-Debug-for-Expression"],[606,"impl-Display-for-Expression"],[611,"impl-Display-for-SourceLocation"],[612,"impl-Debug-for-SourceLocation"],[613,"impl-Display-for-Language"],[614,"impl-Debug-for-Language"],[615,"impl-Display-for-Identifier"],[616,"impl-Debug-for-Identifier"],[617,"impl-Debug-for-ArraySection"],[618,"impl-Display-for-ArraySection"],[619,"impl-Debug-for-Variable"],[620,"impl-Display-for-Variable"],[638,"impl-From%3CIdentifier%3E-for-ClauseItem"],[639,"impl-From%3CVariable%3E-for-ClauseItem"],[641,"impl-From%3CExpression%3E-for-ClauseItem"],[654,"impl-From%3CString%3E-for-Identifier"],[656,"impl-From%3C%26str%3E-for-Identifier"],[659,"impl-From%3CIdentifier%3E-for-Variable"],[660,"impl-From%3CString%3E-for-Variable"],[661,"impl-From%3C%26str%3E-for-Variable"],[1031,"impl-Display-for-TranslationError"],[1032,"impl-Debug-for-TranslationError"],[1059,"impl-Debug-for-ValidationError"],[1060,"impl-Display-for-ValidationError"],[1174,"impl-Display-for-Clause%3C\'_%3E"],[1175,"impl-Debug-for-Clause%3C\'a%3E"],[1176,"impl-Display-for-Directive%3C\'_%3E"],[1177,"impl-Debug-for-Directive%3C\'a%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAN0DNAADAAEADAAHADAACwA+AAIASAAAAGAABgB5AAAAhwAAAJgAAACeAAAArgAAALIAAADFAAAAyAACAMwAAADUAAAA1wACANsAAQDeAAEA5wAAABoBAQAnAQEAaQEBAHcBOwC1AVYADwIAABkCHAA5AioAZQIAAGcCAwBsAgAAfwIBAIICAACPAgAAkQIAAJQCAgCZAhIAHwM0AFYDWQC3Az0AAgQHAAsEAAANBAEAEwQCABwECQAsBAcANQQJAEMEBwBYBEIArwRWAQgGAQAMBgoA","P":[[11,"T"],[23,"U"],[27,""],[47,"U,T"],[51,"U"],[55,""],[374,"T"],[434,""],[465,"T"],[494,""],[527,"F"],[528,""],[565,"F"],[567,""],[624,"T"],[638,""],[640,"T"],[641,""],[642,"T"],[654,""],[655,"T"],[656,""],[657,"T"],[659,""],[662,"F"],[663,""],[664,"__H"],[683,""],[684,"U"],[714,""],[798,"T"],[827,""],[853,"U,T"],[883,"U"],[913,""],[1025,"T"],[1027,""],[1028,"T"],[1029,""],[1033,"T"],[1034,""],[1035,"U"],[1036,"T"],[1037,""],[1042,"U,T"],[1043,"U"],[1044,""],[1051,"T"],[1055,""],[1056,"T"],[1057,""],[1061,"T"],[1063,"U"],[1065,""],[1067,"T"],[1068,""],[1069,"U,T"],[1071,"U"],[1073,""],[1090,"T"],[1092,""],[1093,"T"],[1094,""],[1098,"T"],[1099,"U"],[1100,""],[1111,"T"],[1112,"U,T"],[1113,"U"],[1114,""],[1134,"T"],[1154,""],[1161,"T"],[1163,""],[1178,"T"],[1188,"U"],[1198,""],[1217,"T"],[1219,""],[1223,"U,T"],[1233,"U"],[1243,""],[1525,"T"],[1529,""],[1532,"T"],[1534,""],[1541,"T"],[1543,"__H"],[1545,"U"],[1547,""],[1550,"T"],[1552,"U,T"],[1554,"U"],[1556,""]]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1059,43846,173]}