var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[14,"alloc::string"],[15,"core::option"],[16,"syn::expr"],[17,"core::ops::function"],[18,"syn::stmt"],[19,"alloc::vec"]],"i":"``````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{{n{Ah}}}{{Ab{{j{hf}}}}}}{{}{{An{{j{hf}}}}}}10","D":"Aj","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",14],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",15,null,1],[6,"Expr",16],[0,"mut"],[5,"Arm",16],[10,"FnMut",17],[6,"Stmt",18],[5,"Vec",19]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[7,"F"],[9,""]]}],["roup",{"t":"CCCCFFFFSSSNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHNNNNPPFGFFGPPFFFGPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","borrow","","","","borrow_mut","","","","from","","","","into","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","try_into","","","","type_id","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_clause","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_free_sentinel","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","borrow_mut","","","","","","","","","","build","","builder","","clauses","clone","","clone_into","","clone_to_uninit","","default","","","","","eq","","","fmt","","","","","from","","","","","","","","","","into","","","","","","","","","","kind","name","","new","","","openmp","parse","","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","to_pragma_string","to_source_string","to_string","","try_from","","","","","","","","","","try_into","","","","","","","","","","type_id","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_language","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndAssumes","EndDeclareTarget","EndDeclareVariant","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","MasterTaskloop","MasterTaskloopSimd","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[59,"roup::ir"],[950,"roup::ir::ClauseData"],[1000,"roup::ir::ExpressionKind"],[1012,"roup::ir::convert"],[1021,"roup::ir::translate"],[1045,"roup::ir::validate"],[1076,"roup::ir::validate::ValidationError"],[1086,"roup::lexer"],[1115,"roup::parser"],[1260,"roup::parser::openmp"],[1561,"std::os::raw"],[1562,"core::result"],[1563,"core::any"],[1564,"roup::ir::variable"],[1565,"alloc::vec"],[1566,"roup::ir::expression"],[1567,"core::option"],[1568,"roup::ir::directive"],[1569,"roup::ir::types"],[1570,"roup::ir::builder"],[1571,"roup::ir::clause"],[1572,"roup::ir::error"],[1573,"core::ops::function"],[1574,"core::fmt"],[1575,"alloc::string"],[1576,"core::hash"],[1577,"core::convert"],[1578,"alloc::boxed"],[1579,"roup::parser::directive"],[1580,"roup::parser::clause"],[1581,"nom::internal"],[1582,"alloc::borrow"]],"i":"```````````Abhln321032103210````````````````````321032103210Dd0CfEhEjCb0Ch1Bd204DhEf`222224`4222Cj5333331`8768787Bl244Df``Db84DnDl6`::48=888888:`9:`Cn9<;`;```9;99999999=99699=9`E`<``<D`=;;;7<;?==;?8=:`19=229;;Eb>>`>`Eh?`CfEj1?2Cb`Bd00;03`0334Cl54953Dh81233363`32:222222222222222EfAn`?5:5`5Df6`DjDdCh188Cj:9:``9992?:==89:9Cn0`:Db2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;BlEb09=08>>77```E`>>9AhAj<Bd=BhBnC`Cf=<Cl<D`<DdDfDhDjDlDn?Cb=;EbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`=CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`5``=0;540001CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj<<C`Cf0Ch0Cj0Cl0Cn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0E`0Cb0Bd0Bn0Eb0EdAn0B`EfEhEjBj0Bl0Bh0Ah0Aj0:C`=0CfChCjClCnD`DbDdDfDhDjDlDnE`000CbBdBnEbEdAnB`EfEhEjBjBlBh00AhAj000<=CfChCjClCnD`DbDdDfDhDjDlDnBdEhEjBjBlBhC`0CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1C`=31>0=;:53210000090=0;4000000=0=252;00==0CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbAnBjBlBhAhAj7`C`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj9`<:::0GdGfGhGjGlGnH`HbHd3HfHhHjHlHnI`IbIdIfIhIj<IlInGdGfJ`JbGjGlJdJfJh??JjHl;6JlJnH`K`KbKd7I`KfInKhKjKlL`021Lb0Ld012`````````Lj00`0000000000000````000Gb000``Ll101111111010100110101010Ln0M`Mb1Md2310Mf00`0000000000```````````0000NjNd`````0Nf````1021`1MnMlNbN`Nh7Lh7Lf7654329180753640878787654329109110065432918076543291807110532`42`6455335558701106543291807654329180765432918076543532ObO`111111110101100100010000000010011111111100000001110111111010000000000110001011111000110111011111111111110101111110110000001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"````````{{}b}00{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000{cc{}}000{{}c{}}000{hb}{hj}{lj}{{lh}b}333{hn}{{A`bb}A`}{Abb}{Abl}{Abj}2{AbA`}{A`Ab}{{A`b}Ab}{A`j}{nj}{{nb}A`}{nb}{c{{Ad{e}}}{}{}}000{{}{{Ad{c}}}{}}000{dAf}000````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Ah}{AjAl}{{{d{An}}}{{Bb{{d{B`}}}}}}{Bd{{d{Bf}}}}{{{d{An}}}{{d{Bf}}}}{{{d{Bh}}}{{d{Bf}}}}{{BjBl}Bn}{d{{d{c}}}{}}00000000000000000000000000000{{{d{f}}}{{d{fc}}}{}}00000000000000000000000000000{{C`BjBl}Bn}{{{d{Bn}}}{{d{{Cd{Cb}}}}}}{{{d{Cf}}}Cf}{{{d{Ch}}}Ch}{{{d{Cj}}}Cj}{{{d{Cl}}}Cl}{{{d{Cn}}}Cn}{{{d{D`}}}D`}{{{d{Db}}}Db}{{{d{Dd}}}Dd}{{{d{Df}}}Df}{{{d{Dh}}}Dh}{{{d{Dj}}}Dj}{{{d{Dl}}}Dl}{{{d{Dn}}}Dn}{{{d{E`}}}E`}{{{d{Cb}}}Cb}{{{d{Bd}}}Bd}{{{d{Bn}}}Bn}{{{d{Eb}}}Eb}{{{d{Ed}}}Ed}{{{d{An}}}An}{{{d{B`}}}B`}{{{d{Ef}}}Ef}{{{d{Eh}}}Eh}{{{d{Ej}}}Ej}{{{d{Bj}}}Bj}{{{d{Bl}}}Bl}{{{d{Bh}}}Bh}{{{d{Ah}}}Ah}{{{d{Aj}}}Aj}{{d{d{fc}}}j{}}0000000000000000000000000000{{dEl}j}0000000000000000000000000000{{C`{d{Bf}}}C`}{BjEn}``{{{d{Bn}}c}F`{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{C`D`}C`}{{}Ed}{{}Bj}{{}Bl}{C`C`}0{{C`Cn{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Aj}}}F`}{{{d{Cf}}{d{Cf}}}Fd}{{{d{Ch}}{d{Ch}}}Fd}{{{d{Cj}}{d{Cj}}}Fd}{{{d{Cl}}{d{Cl}}}Fd}{{{d{Cn}}{d{Cn}}}Fd}{{{d{D`}}{d{D`}}}Fd}{{{d{Db}}{d{Db}}}Fd}{{{d{Dd}}{d{Dd}}}Fd}{{{d{Df}}{d{Df}}}Fd}{{{d{Dh}}{d{Dh}}}Fd}{{{d{Dj}}{d{Dj}}}Fd}{{{d{Dl}}{d{Dl}}}Fd}{{{d{Dn}}{d{Dn}}}Fd}{{{d{E`}}{d{E`}}}Fd}{{{d{Cb}}{d{Cb}}}Fd}{{{d{Bd}}{d{Bd}}}Fd}{{{d{Bn}}{d{Bn}}}Fd}{{{d{Eb}}{d{Eb}}}Fd}{{{d{Ed}}{d{Ed}}}Fd}{{{d{An}}{d{An}}}Fd}{{{d{B`}}{d{B`}}}Fd}{{{d{Ef}}{d{Ef}}}Fd}{{{d{Eh}}{d{Eh}}}Fd}{{{d{Ej}}{d{Ej}}}Fd}{{{d{Bj}}{d{Bj}}}Fd}{{{d{Bl}}{d{Bl}}}Fd}{{{d{Bh}}{d{Bh}}}Fd}{{{d{Ah}}{d{Ah}}}Fd}{{{d{Aj}}{d{Aj}}}Fd}{{{d{Bn}}c}{{Al{{d{Cb}}}}}{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{{d{Bn}}c}{{Bb{{d{Cb}}}}}{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{C`{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Cf}}{d{fFh}}}Fj}0{{{d{Ch}}{d{fFh}}}Fj}0{{{d{Cj}}{d{fFh}}}Fj}0{{{d{Cl}}{d{fFh}}}Fj}0{{{d{Cn}}{d{fFh}}}Fj}0{{{d{D`}}{d{fFh}}}Fj}0{{{d{Db}}{d{fFh}}}Fj}0{{{d{Dd}}{d{fFh}}}Fj}0{{{d{Df}}{d{fFh}}}Fj}0{{{d{Dh}}{d{fFh}}}Fj}0{{{d{Dj}}{d{fFh}}}Fj}0{{{d{Dl}}{d{fFh}}}Fj}0{{{d{Dn}}{d{fFh}}}Fj}0{{{d{E`}}{d{fFh}}}Fj}0{{{d{Cb}}{d{fFh}}}Fj}0{{{d{Bd}}{d{fFh}}}Fj}0{{{d{Bn}}{d{fFh}}}Fj}0{{{d{Eb}}{d{fFh}}}Fj}0{{{d{Ed}}{d{fFh}}}Fj}{{{d{An}}{d{fFh}}}Fj}0{{{d{B`}}{d{fFh}}}Fj}{{{d{Ef}}{d{fFh}}}Fj}{{{d{Eh}}{d{fFh}}}Fj}{{{d{Ej}}{d{fFh}}}Fj}{{{d{Bj}}{d{fFh}}}Fj}0{{{d{Bl}}{d{fFh}}}Fj}0{{{d{Bh}}{d{fFh}}}Fj}0{{{d{Ah}}{d{fFh}}}Fj}0{{{d{Aj}}{d{fFh}}}Fj}0{{{d{Ed}}Bl}Ed}{{}C`}{{Cj{Bb{An}}BjBl}Bn}{cc{}}00000000000000{AjE`}{BhE`}{AnE`}333333333333{{{d{Bf}}}Bh}4{FlBh}5{FlAj}6{BhAj}{{{d{Bf}}}Aj}{{{d{Bn}}c}Fd{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{{d{Bd}}}Fd}{{{d{Cf}}{d{fc}}}jFn}{{{d{Ch}}{d{fc}}}jFn}{{{d{Cj}}{d{fc}}}jFn}{{{d{Cl}}{d{fc}}}jFn}{{{d{Cn}}{d{fc}}}jFn}{{{d{D`}}{d{fc}}}jFn}{{{d{Db}}{d{fc}}}jFn}{{{d{Dd}}{d{fc}}}jFn}{{{d{Df}}{d{fc}}}jFn}{{{d{Dh}}{d{fc}}}jFn}{{{d{Dj}}{d{fc}}}jFn}{{{d{Dl}}{d{fc}}}jFn}{{{d{Dn}}{d{fc}}}jFn}{{{d{Bd}}{d{fc}}}jFn}{{{d{Eh}}{d{fc}}}jFn}{{{d{Ej}}{d{fc}}}jFn}{{{d{Bj}}{d{fc}}}jFn}{{{d{Bl}}{d{fc}}}jFn}{{{d{Bh}}{d{fc}}}jFn}{{C`{d{Bf}}}C`}{{}c{}}00000000000000000000000000000{{BnBl}Bn}{{{d{Ah}}}Fd}{{{d{Aj}}}Fd}{BlFd}{{{d{Cb}}}Fd}{{{d{Bd}}}Fd}1111211101110{{{d{An}}}Fd}2224221511111{{{d{Bn}}}Bd}{B`Ef}{{{d{Bn}}}Bl}{{{d{Ed}}}Bl}{{{d{Ed}}}Fd}{AhBb}{BjEn}{{{d{Bn}}}Bj}2{{C`Ch{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Bn}}}{{d{Bf}}}}{{{d{Bh}}}{{d{Bf}}}}{{{d{Aj}}}{{d{Bf}}}}{{BdBl}{{d{Bf}}}}{BdC`}{{Bd{d{Bf}}{Al{Cb}}BjBl}Bn}{{FdBl}Ed}{{c{d{Ed}}}An{{G`{Fl}}}}{{EnEn}Bj}{cBh{{G`{Fl}}}}{{{Bb{An}}{Bb{An}}{Bb{An}}}Ah}{cAj{{G`{Fl}}}}{C`C`}{{C`b}C`}{{C`{d{Bf}}}C`}20{B`Fl}{{}C`}{{{Bb{D`}}BjBl}Bn}1{EdFd}{Bl{{d{Bf}}}}{{C`{d{{Cd{{d{Bf}}}}}}}C`}{{C`Db}C`}{{C`Cf{d{{Cd{{d{Bf}}}}}}}C`}{{C`Cj{Bb{{d{Bf}}}}}C`}{{C`Cj}C`}{{C`Cj{Al{Cl}}{Bb{{d{Bf}}}}}C`}{{{d{fBn}}Bl}j}6{{Bd{d{Bf}}BjBl}Bn}{AnAh}{{}Bj}{AhBb}{BlEd}??{{BjBl}Bn}0{{}C`}{dc{}}0000000000000000000000000000{dFl}00000000000000000000000{{{d{Bn}}Bl}Fl}`{c{{Ad{e}}}{}{}}00000000000000000000000000000{{}{{Ad{c}}}{}}00000000000000000000000000000{dAf}00000000000000000000000000000{cAn{{G`{Fl}}}}`{{{d{Bn}}}{{Ad{j{Al{Gb}}}}}}{{EdBl}Ed}{{EdFd}Ed}<{{c{Al{Ah}}}Aj{{G`{Fl}}}}{GdBb}{GfBb}{GhBh}{GjBb}{GlBb}{GnAn}{H`Bb}{HbCn}{HdAn}{GnBb}{HfAn}{HhAl}{HjAl}{HlAl}{HnAl}{I`Al}{IbAl}{IdAl}{IfAl}{IhAl}{IjAl}{HbAl}{IlAl}{InAl}{GdAl}{GfAl}{J`Al}{JbAl}{GjCj}{GlCj}{JdAn}{JfAn}{JhAn}{IbBb}0{JjBb}{HlBb}{InBb}{GjAl}{JlAn}{JnBb}{H`Bh}{K`An}{KbAn}{KdAn}{JjDf}{I`Cf}{KfAn}:{KhAn}{KjAl}{KlKn}{L`Kn}0{KjFl}{KlAl}{LbKn}{LbEh}{LdEj}{LdKn}36{{{d{Lf}}BjBl{d{Ed}}}{{Ad{BnEb}}}}{{{d{Lh}}{d{Ed}}}{{Ad{CbEb}}}}{{{d{Bf}}}{{Ad{CnEb}}}}{{{d{Bf}}}{{Ad{BdEb}}}}{{{d{Bf}}{d{Ed}}}{{Ad{{Al{E`}}Eb}}}}{{{d{Bf}}{d{Ed}}}{{Ad{CbEb}}}}0{{{d{Bf}}}{{Ad{CfEb}}}}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Lj}}}Lj}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Lj}}{d{Lj}}}Fd}{{{d{Lj}}{d{fFh}}}Fj}0{EbLj}{cc{}}{{}c{}}{dc{}}{dFl}{{{d{Bf}}}{{Ad{FlLj}}}}{{{d{Bf}}Ed}{{Ad{BnLj}}}}10{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}``````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Gb}}}Gb}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Gb}}{d{Gb}}}Fd}{{{d{Gb}}{d{fFh}}}Fj}0??>>{{{d{Ll}}{d{Cb}}}{{Ad{jGb}}}}{BdLl}?>;;::99{{{d{Ll}}{d{{Cd{Cb}}}}}{{Ad{j{Al{Gb}}}}}}{LnFl}0{M`Fl}{MbAl}1{MdFl}23{MbFl}1````>={{{d{Mf}}}Mf}<;{{}Mf}{{{d{Mf}}{d{Mf}}}Fd}{{{d{Mf}}{d{fFh}}}Fj}{cc{}}{{}c{}}{MhFd}{{{d{Bf}}}{{Mj{{d{Bf}}{d{Bf}}}}}}000000{{{d{Bf}}}Fl}11{dc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}```````````````````{d{{d{c}}}{}}000000000{{{d{f}}}{{d{fc}}}{}}000000000{MlMn}{N`Nb}{{}Ml}{{}N`}{LfAl}{{{d{Nd}}}Nd}{{{d{Nf}}}Nf}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Mn}7{{}Nb}7{{}Nh}{{{d{Nj}}{d{Nj}}}Fd}{{{d{Lh}}{d{Lh}}}Fd}{{{d{Lf}}{d{Lf}}}Fd}{{{d{Nj}}{d{fFh}}}Fj}{{{d{Lh}}{d{fFh}}}Fj}0{{{d{Lf}}{d{fFh}}}Fj}0{cc{}}000000000{{}c{}}000000000{LhNj}{LhNl}{LfNl}{{}Ml}{{}N`}{{NbMn}Nh}`{{{d{Nb}}{d{Bf}}{d{Mn}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Nh}}{d{Bf}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Bf}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Mn}}{d{Bf}}}{{Mj{{d{Bf}}{Al{Lh}}}}}}{{{d{Nb}}{Nl{Bf}}{d{Bf}}{d{Mn}}}{{Mj{{d{Bf}}Lf}}}}{{Ml{d{Bf}}}Ml}{{Ml{d{Bf}}{Nn{{Nl{Bf}}{d{Bf}}}{{Fb{{Mj{{d{Bf}}Lh}}}}}}}Ml}{{N`{d{Bf}}{Nn{{Nl{Bf}}{d{Bf}}{d{Mn}}}{{Fb{{Mj{{d{Bf}}Lf}}}}}}}N`}{{N`{d{Bf}}}N`}3{{Ml{d{Bf}}Nd}Ml}{{{d{fMl}}{d{Bf}}Nd}{{d{fMl}}}}{dc{}}0{{{d{Lf}}}Fl}{{{d{Lh}}}Fl}{dFl}0{c{{Ad{e}}}{}{}}000000000{{}{{Ad{c}}}{}}000000000{dAf}000000000{{MnFd}Mn}{{MlFd}Ml}{{NbFd}Nb}{{N`Fd}N`}{{MlNd}Ml}{{N`Nf}N`}{{NhMf}Nh}```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{O`{{d{Bf}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{}Mn}{{{d{Ob}}}Ob}{{{d{O`}}}O`}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Nb}{{{d{Ob}}{d{Ob}}}Fd}{{{d{O`}}{d{O`}}}Fd}{{{d{Ob}}{d{fFh}}}Fj}{{{d{O`}}{d{fFh}}}Fj}{cc{}}0{{{d{Ob}}{d{fc}}}jFn}{{{d{O`}}{d{fc}}}jFn}{{}c{}}0{Ob{{d{Bf}}}}{{}Nh}{ObNd}{dc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0","D":"DGb","p":[[1,"i32"],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[1,"unit"],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[8,"c_char",1561],[5,"OmpDirective",4],[6,"Result",1562,null,1],[5,"TypeId",1563],[5,"ArraySection",59,1564],[5,"Variable",59,1564],[5,"Vec",1565],[6,"Expression",59,1566],[5,"ExpressionAst",59,1566],[6,"Option",1567,null,1],[6,"DirectiveKind",59,1568],[1,"str"],[5,"Identifier",59,1564],[5,"SourceLocation",59,1569],[6,"Language",59,1569],[5,"DirectiveIR",59,1568],[5,"DirectiveBuilder",59,1570],[6,"ClauseData",59,1571],[1,"slice"],[6,"ReductionOperator",59,1571],[6,"MapType",59,1571],[6,"ScheduleKind",59,1571],[6,"ScheduleModifier",59,1571],[6,"DependType",59,1571],[6,"DefaultKind",59,1571],[6,"ProcBind",59,1571],[6,"MemoryOrder",59,1571],[6,"AtomicOp",59,1571],[6,"DeviceType",59,1571],[6,"LinearModifier",59,1571],[6,"LastprivateModifier",59,1571],[6,"OrderKind",59,1571],[6,"ClauseItem",59,1571],[6,"ConversionError",59,1572],[5,"ParserConfig",59,1566],[6,"ExpressionKind",59,1566],[6,"BinaryOperator",59,1566],[6,"UnaryOperator",59,1566],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1573],[5,"Formatter",1574],[8,"Result",1574],[5,"String",1575],[10,"Hasher",1576],[10,"Into",1577,null,1],[6,"ValidationError",1045],[15,"Aligned",950],[15,"Allocate",950],[15,"Allocator",950],[15,"Schedule",950],[15,"DistSchedule",950],[15,"If",950],[15,"Generic",950],[15,"Depend",950],[15,"Device",950],[15,"Grainsize",950],[15,"Private",950],[15,"Firstprivate",950],[15,"Lastprivate",950],[15,"Shared",950],[15,"Reduction",950],[15,"Map",950],[15,"UseDevicePtr",950],[15,"UseDeviceAddr",950],[15,"IsDevicePtr",950],[15,"HasDeviceAddr",950],[15,"Affinity",950],[15,"Linear",950],[15,"Copyin",950],[15,"Copyprivate",950],[15,"Safelen",950],[15,"Simdlen",950],[15,"ThreadLimit",950],[15,"AtomicOperation",950],[15,"Collapse",950],[15,"Ordered",950],[15,"NumThreads",950],[15,"NumTeams",950],[15,"NumTasks",950],[15,"Priority",950],[15,"Filter",950],[15,"Call",1000],[15,"ArrayAccess",1000],[5,"Box",1578,null,1],[15,"Conditional",1000],[15,"BinaryOp",1000],[15,"UnaryOp",1000],[5,"Directive",1115,1579],[5,"Clause",1115,1580],[6,"TranslationError",1021],[5,"ValidationContext",1045],[15,"ConflictingClauses",1076],[15,"ClauseNotAllowed",1076],[15,"InvalidCombination",1076],[15,"MissingRequiredClause",1076],[6,"Language",1086],[1,"char"],[8,"IResult",1581],[5,"ClauseRegistryBuilder",1115,1580],[5,"ClauseRegistry",1115,1580],[5,"DirectiveRegistryBuilder",1115,1579],[5,"DirectiveRegistry",1115,1579],[6,"ClauseRule",1115,1580],[6,"DirectiveRule",1115,1579],[5,"Parser",1115],[6,"ClauseKind",1115,1580],[6,"Cow",1582],[1,"fn"],[6,"OpenMpDirective",1260],[6,"OpenMpClause",1260]],"r":[[59,1571],[60,1571],[61,1571],[62,1566],[63,1566],[64,1571],[65,1571],[66,1571],[67,1571],[68,1568],[69,1571],[70,1568],[71,1566],[72,1571],[73,1566],[74,1564],[75,1568],[76,1568],[77,1568],[78,1568],[79,1568],[80,1571],[81,1571],[82,1571],[83,1568],[84,1568],[85,1568],[86,1571],[87,1571],[88,1568],[89,1568],[90,1568],[91,1568],[92,1568],[93,1566],[94,1566],[95,1571],[96,1566],[97,1566],[98,1571],[99,1566],[100,1571],[101,1566],[102,1569],[103,1566],[104,1568],[105,1568],[106,1571],[107,1571],[108,1571],[109,1571],[110,1571],[111,1566],[112,1571],[113,1571],[114,1566],[115,1572],[116,1571],[117,1571],[118,1569],[119,1568],[120,1571],[121,1568],[122,1568],[123,1568],[124,1568],[125,1568],[126,1568],[127,1571],[128,1571],[129,1571],[130,1571],[131,1571],[132,1571],[133,1568],[134,1566],[135,1571],[136,1571],[137,1571],[138,1570],[139,1568],[140,1568],[141,1568],[142,1571],[143,1568],[144,1568],[145,1568],[146,1568],[147,1568],[148,1568],[149,1568],[150,1568],[151,1566],[152,1568],[153,1568],[154,1571],[155,1568],[156,1568],[157,1566],[158,1568],[159,1566],[160,1571],[161,1571],[162,1566],[163,1566],[164,1571],[165,1571],[166,1571],[167,1568],[168,1568],[169,1568],[170,1569],[171,1571],[172,1568],[173,1566],[174,1571],[175,1571],[176,1568],[177,1566],[178,1571],[179,1571],[180,1571],[181,1564],[182,1571],[183,1566],[184,1571],[185,1571],[186,1571],[187,1566],[188,1568],[189,1568],[190,1572],[191,1571],[192,1571],[193,1569],[194,1571],[195,1571],[196,1566],[197,1571],[198,1571],[199,1571],[200,1566],[201,1571],[202,1568],[203,1566],[204,1571],[205,1571],[206,1568],[207,1568],[208,1568],[209,1571],[210,1568],[211,1571],[212,1571],[213,1568],[214,1571],[215,1571],[216,1566],[217,1571],[218,1566],[219,1571],[220,1571],[221,1566],[222,1566],[223,1571],[224,1571],[225,1571],[226,1568],[227,1571],[228,1571],[229,1571],[230,1566],[231,1571],[232,1571],[233,1571],[234,1568],[235,1571],[236,1568],[237,1568],[238,1568],[239,1568],[240,1568],[241,1568],[242,1568],[243,1568],[244,1568],[245,1568],[246,1568],[247,1568],[248,1568],[249,1568],[250,1568],[251,1566],[252,1566],[253,1566],[254,1571],[255,1571],[256,1571],[257,1571],[258,1571],[259,1571],[260,1571],[261,1571],[262,1571],[263,1571],[264,1571],[265,1571],[266,1571],[267,1568],[268,1568],[269,1571],[270,1571],[271,1568],[272,1571],[273,1571],[274,1571],[275,1568],[276,1568],[277,1568],[278,1571],[279,1571],[280,1571],[281,1566],[282,1566],[283,1571],[284,1568],[285,1571],[286,1568],[287,1571],[288,1571],[289,1569],[290,1568],[291,1571],[292,1571],[293,1568],[294,1566],[295,1571],[296,1568],[297,1568],[298,1568],[299,1568],[300,1568],[301,1568],[302,1568],[303,1568],[304,1568],[305,1568],[306,1568],[307,1568],[308,1568],[309,1568],[310,1568],[311,1568],[312,1568],[313,1568],[314,1568],[315,1568],[316,1568],[317,1568],[318,1568],[319,1568],[320,1568],[321,1568],[322,1568],[323,1568],[324,1568],[325,1568],[326,1568],[327,1568],[328,1568],[329,1568],[330,1568],[331,1568],[332,1568],[333,1568],[334,1568],[335,1568],[336,1568],[337,1568],[338,1568],[339,1568],[340,1568],[341,1571],[342,1568],[343,1568],[344,1571],[345,1571],[346,1566],[347,1566],[348,1568],[349,1569],[350,1572],[351,1572],[352,1566],[353,1568],[354,1572],[355,1571],[356,1571],[357,1571],[358,1571],[359,1571],[360,1045],[361,1045],[362,1564],[363,1571],[364,1568],[365,1568],[366,1571],[367,1564],[368,1564],[369,1566],[370,1568],[371,1566],[372,1564],[373,1568],[374,1570],[375,1571],[376,1571],[377,1571],[378,1571],[379,1571],[380,1571],[381,1571],[382,1571],[383,1571],[384,1571],[385,1571],[386,1571],[387,1571],[388,1571],[389,1571],[390,1568],[391,1568],[392,1572],[393,1566],[394,1566],[395,1566],[396,1566],[397,1566],[398,1566],[399,1569],[400,1569],[401,1564],[402,1564],[403,1564],[404,1570],[405,1571],[406,1571],[407,1571],[408,1571],[409,1571],[410,1571],[411,1571],[412,1571],[413,1571],[414,1571],[415,1571],[416,1571],[417,1571],[418,1571],[419,1571],[420,1568],[421,1568],[422,1572],[423,1566],[424,1566],[425,1566],[426,1566],[427,1566],[428,1566],[429,1569],[430,1569],[431,1564],[432,1564],[433,1564],[434,1570],[435,1568],[436,1571],[437,1571],[438,1571],[439,1571],[440,1571],[441,1571],[442,1571],[443,1571],[444,1571],[445,1571],[446,1571],[447,1571],[448,1571],[449,1571],[450,1571],[451,1568],[452,1568],[453,1572],[454,1566],[455,1566],[456,1566],[457,1566],[458,1566],[459,1566],[460,1569],[461,1569],[462,1564],[463,1564],[464,1564],[465,1571],[466,1571],[467,1571],[468,1571],[469,1571],[470,1571],[471,1571],[472,1571],[473,1571],[474,1571],[475,1571],[476,1571],[477,1571],[478,1571],[479,1571],[480,1568],[481,1568],[482,1572],[483,1566],[484,1566],[485,1566],[486,1566],[487,1566],[488,1566],[489,1569],[490,1569],[491,1564],[492,1564],[493,1564],[494,1571],[495,1571],[496,1571],[497,1571],[498,1571],[499,1571],[500,1571],[501,1571],[502,1571],[503,1571],[504,1571],[505,1571],[506,1571],[507,1571],[508,1571],[509,1568],[510,1568],[511,1572],[512,1566],[513,1566],[514,1566],[515,1566],[516,1566],[517,1566],[518,1569],[519,1569],[520,1564],[521,1564],[522,1564],[523,1570],[524,1569],[526,1012],[527,1568],[528,1570],[529,1566],[530,1569],[531,1569],[532,1570],[533,1570],[534,1570],[535,1564],[536,1571],[537,1571],[538,1571],[539,1571],[540,1571],[541,1571],[542,1571],[543,1571],[544,1571],[545,1571],[546,1571],[547,1571],[548,1571],[549,1571],[550,1571],[551,1568],[552,1568],[553,1572],[554,1566],[555,1566],[556,1566],[557,1566],[558,1566],[559,1566],[560,1569],[561,1569],[562,1564],[563,1564],[564,1564],[565,1568],[566,1568],[567,1570],[568,1571],[569,1571],[570,1571],[571,1571],[572,1571],[573,1571],[574,1571],[575,1571],[576,1571],[577,1571],[578,1571],[579,1571],[580,1571],[581,1571],[582,1571],[583,1571],[584,1571],[585,1571],[586,1571],[587,1571],[588,1571],[589,1571],[590,1571],[591,1571],[592,1571],[593,1571],[594,1571],[595,1571],[596,1571],[597,1571],[598,1568],[599,1568],[600,1568],[601,1568],[602,1572],[603,1572],[604,1566],[605,1566],[606,1566],[607,1566],[608,1566],[609,1566],[610,1566],[611,1569],[612,1569],[613,1569],[614,1569],[615,1564],[616,1564],[617,1564],[618,1564],[619,1564],[620,1564],[621,1566],[622,1570],[623,1568],[624,1570],[625,1571],[626,1571],[627,1571],[628,1571],[629,1571],[630,1571],[631,1571],[632,1571],[633,1571],[634,1571],[635,1571],[636,1571],[637,1571],[638,1571],[639,1571],[640,1571],[641,1571],[642,1571],[643,1568],[644,1568],[645,1572],[646,1566],[647,1566],[648,1566],[649,1566],[650,1566],[651,1566],[652,1569],[653,1569],[654,1564],[655,1564],[656,1564],[657,1564],[658,1564],[659,1564],[660,1564],[661,1564],[662,1568],[663,1568],[664,1571],[665,1571],[666,1571],[667,1571],[668,1571],[669,1571],[670,1571],[671,1571],[672,1571],[673,1571],[674,1571],[675,1571],[676,1571],[677,1568],[678,1566],[679,1566],[680,1569],[681,1569],[682,1564],[683,1570],[684,1570],[685,1571],[686,1571],[687,1571],[688,1571],[689,1571],[690,1571],[691,1571],[692,1571],[693,1571],[694,1571],[695,1571],[696,1571],[697,1571],[698,1571],[699,1571],[700,1568],[701,1568],[702,1572],[703,1566],[704,1566],[705,1566],[706,1566],[707,1566],[708,1566],[709,1569],[710,1569],[711,1564],[712,1564],[713,1564],[714,1568],[715,1564],[716,1564],[717,1569],[718,1571],[719,1568],[720,1571],[721,1571],[722,1571],[723,1571],[724,1569],[725,1571],[726,1571],[727,1571],[728,1568],[729,1571],[730,1571],[731,1571],[732,1568],[733,1566],[734,1571],[735,1571],[736,1571],[737,1564],[738,1571],[739,1571],[740,1568],[741,1564],[742,1568],[743,1568],[744,1568],[745,1568],[746,1568],[747,1568],[748,1566],[749,1568],[750,1566],[751,1566],[752,1564],[753,1569],[754,1568],[755,1564],[756,1570],[757,1568],[758,1564],[759,1564],[760,1568],[761,1570],[762,1568],[763,1566],[764,1566],[765,1569],[766,1564],[767,1564],[768,1564],[769,1570],[770,1570],[771,1570],[772,1570],[773,1570],[774,1566],[775,1570],[776,1568],[777,1570],[778,1566],[779,1569],[780,1570],[781,1570],[782,1570],[783,1570],[784,1570],[785,1570],[786,1568],[787,1570],[788,1568],[789,1564],[790,1569],[791,1564],[792,1566],[793,1570],[794,1570],[795,1568],[796,1568],[797,1570],[798,1571],[799,1571],[800,1571],[801,1571],[802,1571],[803,1571],[804,1571],[805,1571],[806,1571],[807,1571],[808,1571],[809,1571],[810,1571],[811,1571],[812,1571],[813,1568],[814,1568],[815,1572],[816,1566],[817,1566],[818,1566],[819,1566],[820,1566],[821,1566],[822,1569],[823,1569],[824,1564],[825,1564],[826,1564],[827,1571],[828,1571],[829,1571],[830,1571],[831,1571],[832,1571],[833,1571],[834,1571],[835,1571],[836,1571],[837,1571],[838,1571],[839,1571],[840,1571],[841,1571],[842,1568],[843,1568],[844,1572],[845,1566],[846,1569],[847,1569],[848,1564],[849,1564],[850,1564],[851,1568],[853,1570],[854,1571],[855,1571],[856,1571],[857,1571],[858,1571],[859,1571],[860,1571],[861,1571],[862,1571],[863,1571],[864,1571],[865,1571],[866,1571],[867,1571],[868,1571],[869,1568],[870,1568],[871,1572],[872,1566],[873,1566],[874,1566],[875,1566],[876,1566],[877,1566],[878,1569],[879,1569],[880,1564],[881,1564],[882,1564],[883,1570],[884,1571],[885,1571],[886,1571],[887,1571],[888,1571],[889,1571],[890,1571],[891,1571],[892,1571],[893,1571],[894,1571],[895,1571],[896,1571],[897,1571],[898,1571],[899,1568],[900,1568],[901,1572],[902,1566],[903,1566],[904,1566],[905,1566],[906,1566],[907,1566],[908,1569],[909,1569],[910,1564],[911,1564],[912,1564],[913,1570],[914,1571],[915,1571],[916,1571],[917,1571],[918,1571],[919,1571],[920,1571],[921,1571],[922,1571],[923,1571],[924,1571],[925,1571],[926,1571],[927,1571],[928,1571],[929,1568],[930,1568],[931,1572],[932,1566],[933,1566],[934,1566],[935,1566],[936,1566],[937,1566],[938,1569],[939,1569],[940,1564],[941,1564],[942,1564],[943,1566],[945,1568],[946,1566],[947,1566],[948,1566],[949,1564],[1115,1580],[1116,1580],[1117,1580],[1118,1580],[1119,1580],[1120,1580],[1121,1580],[1122,1580],[1123,1579],[1124,1579],[1125,1579],[1126,1579],[1127,1579],[1128,1580],[1129,1579],[1130,1580],[1131,1580],[1133,1580],[1134,1580],[1135,1580],[1136,1579],[1137,1579],[1139,1580],[1140,1580],[1141,1580],[1142,1579],[1143,1579],[1144,1580],[1145,1580],[1146,1579],[1147,1579],[1149,1580],[1150,1580],[1151,1580],[1152,1579],[1153,1579],[1154,1580],[1155,1579],[1156,1580],[1157,1579],[1158,1579],[1159,1580],[1160,1579],[1161,1580],[1162,1579],[1163,1580],[1164,1579],[1165,1580],[1166,1580],[1167,1579],[1168,1579],[1170,1580],[1171,1580],[1172,1579],[1173,1580],[1174,1580],[1175,1580],[1176,1579],[1177,1579],[1178,1580],[1179,1580],[1180,1579],[1181,1579],[1183,1580],[1184,1580],[1185,1580],[1186,1579],[1187,1579],[1188,1580],[1189,1580],[1190,1579],[1191,1579],[1193,1580],[1194,1580],[1195,1580],[1196,1579],[1197,1579],[1198,1580],[1199,1580],[1200,1579],[1201,1580],[1202,1579],[1205,1579],[1208,1580],[1209,1579],[1210,1580],[1211,1580],[1212,1579],[1213,1579],[1214,1580],[1215,1580],[1216,1580],[1217,1580],[1218,1579],[1219,1579],[1220,1580],[1221,1580],[1222,1579],[1223,1580],[1224,1580],[1225,1579],[1226,1579],[1228,1580],[1229,1580],[1230,1580],[1231,1579],[1232,1579],[1233,1580],[1234,1580],[1235,1579],[1236,1579],[1238,1580],[1239,1580],[1240,1580],[1241,1579],[1242,1579],[1243,1580],[1244,1580],[1245,1579],[1246,1579],[1248,1580],[1249,1580],[1250,1580],[1251,1579],[1252,1579],[1253,1580],[1254,1580],[1255,1579],[1256,1579],[1257,1580],[1258,1579]],"b":[[568,"impl-Debug-for-ReductionOperator"],[569,"impl-Display-for-ReductionOperator"],[570,"impl-Debug-for-MapType"],[571,"impl-Display-for-MapType"],[572,"impl-Debug-for-ScheduleKind"],[573,"impl-Display-for-ScheduleKind"],[574,"impl-Debug-for-ScheduleModifier"],[575,"impl-Display-for-ScheduleModifier"],[576,"impl-Display-for-DependType"],[577,"impl-Debug-for-DependType"],[578,"impl-Debug-for-DefaultKind"],[579,"impl-Display-for-DefaultKind"],[580,"impl-Display-for-ProcBind"],[581,"impl-Debug-for-ProcBind"],[582,"impl-Display-for-MemoryOrder"],[583,"impl-Debug-for-MemoryOrder"],[584,"impl-Debug-for-AtomicOp"],[585,"impl-Display-for-AtomicOp"],[586,"impl-Debug-for-DeviceType"],[587,"impl-Display-for-DeviceType"],[588,"impl-Debug-for-LinearModifier"],[589,"impl-Display-for-LinearModifier"],[590,"impl-Debug-for-LastprivateModifier"],[591,"impl-Display-for-LastprivateModifier"],[592,"impl-Display-for-OrderKind"],[593,"impl-Debug-for-OrderKind"],[594,"impl-Debug-for-ClauseItem"],[595,"impl-Display-for-ClauseItem"],[596,"impl-Debug-for-ClauseData"],[597,"impl-Display-for-ClauseData"],[598,"impl-Debug-for-DirectiveKind"],[599,"impl-Display-for-DirectiveKind"],[600,"impl-Display-for-DirectiveIR"],[601,"impl-Debug-for-DirectiveIR"],[602,"impl-Debug-for-ConversionError"],[603,"impl-Display-for-ConversionError"],[605,"impl-Debug-for-Expression"],[606,"impl-Display-for-Expression"],[611,"impl-Debug-for-SourceLocation"],[612,"impl-Display-for-SourceLocation"],[613,"impl-Debug-for-Language"],[614,"impl-Display-for-Language"],[615,"impl-Debug-for-Identifier"],[616,"impl-Display-for-Identifier"],[617,"impl-Display-for-ArraySection"],[618,"impl-Debug-for-ArraySection"],[619,"impl-Debug-for-Variable"],[620,"impl-Display-for-Variable"],[639,"impl-From%3CVariable%3E-for-ClauseItem"],[640,"impl-From%3CIdentifier%3E-for-ClauseItem"],[641,"impl-From%3CExpression%3E-for-ClauseItem"],[654,"impl-From%3C%26str%3E-for-Identifier"],[656,"impl-From%3CString%3E-for-Identifier"],[658,"impl-From%3CString%3E-for-Variable"],[660,"impl-From%3CIdentifier%3E-for-Variable"],[661,"impl-From%3C%26str%3E-for-Variable"],[1031,"impl-Debug-for-TranslationError"],[1032,"impl-Display-for-TranslationError"],[1059,"impl-Debug-for-ValidationError"],[1060,"impl-Display-for-ValidationError"],[1174,"impl-Display-for-Clause%3C\'_%3E"],[1175,"impl-Debug-for-Clause%3C\'a%3E"],[1176,"impl-Display-for-Directive%3C\'_%3E"],[1177,"impl-Debug-for-Directive%3C\'a%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAOADMwADAAEADAAHADAACwA+AAIASAAAAGAABgB5AAAAhwAAAJgAAACeAAAArgAAALIAAADFAAAAyAACAMwAAADUAAAA1wACANsAAQDeAAEA5wAAABoBAQAnAQEAaQEBAHcBOwC1AVYADwIAABkCHAA5AisAZgIAAGgCAQBrAgEAgAICAI8CAACRAgAAkwIAAJUCAQCZAhIAHwM0AFYDWQC3Az0AAgQIAA0EAQATBAIAHAQJACwEBwA1BAkAQwQHAFgEQgCvBFkBCwYBAA8GCgA=","P":[[11,"T"],[23,"U"],[27,""],[47,"U,T"],[51,"U"],[55,""],[374,"T"],[434,""],[465,"T"],[494,""],[527,"F"],[528,""],[565,"F"],[567,""],[624,"T"],[639,""],[642,"T"],[654,""],[655,"T"],[656,""],[657,"T"],[658,""],[659,"T"],[660,""],[662,"F"],[663,""],[664,"__H"],[683,""],[684,"U"],[714,""],[798,"T"],[827,""],[853,"U,T"],[883,"U"],[913,""],[1025,"T"],[1027,""],[1028,"T"],[1029,""],[1034,"T"],[1035,"U"],[1036,"T"],[1037,""],[1042,"U,T"],[1043,"U"],[1044,""],[1051,"T"],[1055,""],[1056,"T"],[1057,""],[1061,"T"],[1063,"U"],[1065,""],[1067,"T"],[1068,""],[1069,"U,T"],[1071,"U"],[1073,""],[1090,"T"],[1092,""],[1093,"T"],[1094,""],[1098,"T"],[1099,"U"],[1100,""],[1111,"T"],[1112,"U,T"],[1113,"U"],[1114,""],[1134,"T"],[1154,""],[1161,"T"],[1163,""],[1178,"T"],[1188,"U"],[1198,""],[1217,"T"],[1219,""],[1223,"U,T"],[1233,"U"],[1243,""],[1528,"T"],[1532,""],[1535,"T"],[1537,""],[1544,"T"],[1546,"__H"],[1548,"U"],[1550,""],[1553,"T"],[1555,"U,T"],[1557,"U"],[1559,""]]}],["roup_roundtrip",{"t":"H","n":["main"],"q":[[0,"roup_roundtrip"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1059,43825,189,173]}