var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","calculate_combined_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_acc_clause_mappings","parse_acc_directive_mappings","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[17,"alloc::string"],[18,"core::option"],[19,"syn::expr"],[20,"core::ops::function"],[21,"syn::stmt"],[22,"alloc::vec"]],"i":"`````````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{}{{An{{j{hf}}}}}}0{{{n{Ah}}}{{Ab{{j{hf}}}}}}101","D":"B`","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",17],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",18,null,1],[6,"Expr",19],[0,"mut"],[5,"Arm",19],[10,"FnMut",20],[6,"Stmt",21],[5,"Vec",22]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[8,"F"],[10,""]]}],["roup",{"t":"CCCCFFFFFFFFSSSHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHHHHHNNNNPPFGFFGPPGFFFGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCCNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","AccClause","AccClauseIterator","AccDirective","AccStringList","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","acc_clause_expression_at","acc_clause_expressions_count","acc_clause_iterator_free","acc_clause_iterator_next","acc_clause_kind","acc_directive_clause_count","acc_directive_clauses_iter","acc_directive_free","acc_directive_kind","acc_directive_name","acc_parse","acc_parse_with_language","acc_string_list_free","borrow","","","","","","","","borrow_mut","","","","","","","","from","","","","","","","","into","","","","","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","","","","","try_into","","","","","","","","type_id","","","","","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_acc","lex_clause","lex_dialect_keyword","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_fixed_sentinel_with_prefix","lex_fortran_free_sentinel","lex_fortran_free_sentinel_with_prefix","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Dialect","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","OpenAcc","OpenMp","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","","borrow_mut","","","","","","","","","","","build","","builder","","clauses","clone","","","clone_into","","","clone_to_uninit","","","default","","","","","eq","","","","fmt","","","","","","from","","","","","","","","","","","into","","","","","","","","","","","kind","name","","new","","","openacc","openmp","parse","","parse_acc_directive","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","","to_pragma_string","to_pragma_string_with_prefix","to_source_string","to_string","","try_from","","","","","","","","","","","try_into","","","","","","","","","","","type_id","","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_dialect","with_language","ALL","","Async","Atomic","Attach","Auto","Bind","Cache","Capture","Collapse","Copy","Copyin","Copyout","Create","DType","Data","Declare","Default","DefaultAsync","Delete","Detach","Device","DeviceNum","DeviceResident","DeviceType","Deviceptr","End","EnterData","EnterDataUnderscore","ExitData","ExitDataUnderscore","Finalize","Firstprivate","Gang","Host","HostData","HostDataSpace","If","IfPresent","Independent","Init","Kernels","KernelsLoop","Link","Loop","NoCreate","Nohost","NumGangs","NumWorkers","OpenAccClause","OpenAccDirective","PCopy","PCopyIn","PCopyOut","PCreate","Parallel","ParallelLoop","Present","PresentOrCopy","PresentOrCopyIn","PresentOrCopyOut","PresentOrCreate","Private","Read","Reduction","Routine","SelfClause","Seq","Serial","SerialLoop","Set","Shutdown","Tile","Update","","UseDevice","Vector","VectorLength","Wait","","Worker","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id","","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndAssumes","EndDeclareTarget","EndDeclareVariant","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","MasterTaskloop","MasterTaskloopSimd","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[104,"roup::ir"],[995,"roup::ir::ClauseData"],[1045,"roup::ir::ExpressionKind"],[1057,"roup::ir::convert"],[1066,"roup::ir::translate"],[1090,"roup::ir::validate"],[1121,"roup::ir::validate::ValidationError"],[1131,"roup::lexer"],[1164,"roup::parser"],[1329,"roup::parser::openacc"],[1445,"roup::parser::openmp"],[1746,"std::os::raw"],[1747,"core::result"],[1748,"core::any"],[1749,"roup::ir::variable"],[1750,"alloc::vec"],[1751,"roup::ir::expression"],[1752,"core::option"],[1753,"roup::ir::directive"],[1754,"roup::ir::types"],[1755,"roup::ir::builder"],[1756,"roup::ir::clause"],[1757,"roup::ir::error"],[1758,"core::ops::function"],[1759,"core::fmt"],[1760,"alloc::string"],[1761,"core::hash"],[1762,"core::convert"],[1763,"alloc::boxed"],[1764,"roup::parser::directive"],[1765,"roup::parser::clause"],[1766,"nom::internal"],[1767,"alloc::borrow"]],"i":"````````````````````````````AjAdAfAhldhn765432107654321076543210````````````````````765432107654321076543210Dl0CnF`FbCj0D`1Bl204E`En`222224`4222Db5333331`8768787Cd244Dn``Dj84EfEd6`::48=888888:`9:`Df9<;`;```9;99999999=99699=9`Eh<``<Dh=;;;7<;?==;?8=:`19=229;;Ej>>`>`F`?`CnFb1?2Cj`Bl00;03`0334Dd54953E`81233363`32:222222222222222EnBf`?5:5`5Dn6`EbDlD`188Db:9:``9992?:==89:9Df0`:Dj2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;CdEj09=08>>77```Eh>>9B`Bb<Bl=C`CfChCn=<Dd<Dh<DlDnE`EbEdEf?Cj=;EjElBfBhEnF`FbCbCdC`B`BbChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCh=CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCh5``=0;540001CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`Bb<<ChCn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0E`0Eb0Ed0Ef0Eh0Cj0Bl0Cf0Ej0ElBf0BhEnF`FbCb0Cd0C`0B`0Bb0:Ch=0CnD`DbDdDfDhDjDlDnE`EbEdEfEh000CjBlCfEjElBfBhEnF`FbCbCdC`00B`Bb000<=CnD`DbDdDfDhDjDlDnE`EbEdEfBlF`FbCbCdC`Ch0CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`Bb<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1Ch=31>0=;:53210000090=0;4000000=0=252;00==0CnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjBfCbCdC`B`Bb7`ChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`BbChCnD`DbDdDfDhDjDlDnE`EbEdEfEhCjBlCfEjElBfBhEnF`FbCbCdC`B`Bb9`<:::0GlGnH`HbHdHfHhHjHl3HnI`IbIdIfIhIjIlInJ`Jb<JdJfGlGnJhJjHbHdJlJnK`??KbId;6KdKfHhKhKjKl7IhKnJfL`LbLdLh021Lj0Ll012`````````Mb00`0000000000000````000Gj000``Md101111111010100110101010Mf0MhMj1Ml2310Mn00`0000000000```````````````0000OdNl`````0Nn`````10O`032`2NfNdNjNhOb8M`8Ln8765432:190875364098798798765432:107:1100765432:1908765432:19087110532``42``6455335559870011065432:1908765432:1908765432:1908765435322OlOj10111011111110011111111100000111100111000101111``111100111111110110000110111101101010`101010`10101010101`110101010A@`On111111110101100100010000000010011111111100000001110111111010000000000110001011111000110111011111111111110101111110110000001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"````````````{{}b}00{{db}f}{db}{hj}{{hd}b}2{lb}{lh}{lj}2{lf}{fl}{{fb}l}{nj}{A`{{A`{c}}}{}}0000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000{cc{}}0000000{{}c{}}0000000{Adb}{Adj}{Afj}{{AfAd}b}333{AdAh}{{fbb}f}{Ajb}{AjAf}{Ajj}2{Ajf}{fAj}{{fb}Aj}{fj}{Ahj}{{Ahb}f}{Ahb}{c{{Al{e}}}{}{}}0000000{{}{{Al{c}}}{}}0000000{A`An}0000000````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}B`}{BbBd}{{{A`{Bf}}}{{Bj{{A`{Bh}}}}}}{Bl{{A`{Bn}}}}{{{A`{Bf}}}{{A`{Bn}}}}{{{A`{C`}}}{{A`{Bn}}}}{{CbCd}Cf}{A`{{A`{c}}}{}}00000000000000000000000000000{{{A`{Ab}}}{{A`{Abc}}}{}}00000000000000000000000000000{{ChCbCd}Cf}{{{A`{Cf}}}{{A`{{Cl{Cj}}}}}}{{{A`{Cn}}}Cn}{{{A`{D`}}}D`}{{{A`{Db}}}Db}{{{A`{Dd}}}Dd}{{{A`{Df}}}Df}{{{A`{Dh}}}Dh}{{{A`{Dj}}}Dj}{{{A`{Dl}}}Dl}{{{A`{Dn}}}Dn}{{{A`{E`}}}E`}{{{A`{Eb}}}Eb}{{{A`{Ed}}}Ed}{{{A`{Ef}}}Ef}{{{A`{Eh}}}Eh}{{{A`{Cj}}}Cj}{{{A`{Bl}}}Bl}{{{A`{Cf}}}Cf}{{{A`{Ej}}}Ej}{{{A`{El}}}El}{{{A`{Bf}}}Bf}{{{A`{Bh}}}Bh}{{{A`{En}}}En}{{{A`{F`}}}F`}{{{A`{Fb}}}Fb}{{{A`{Cb}}}Cb}{{{A`{Cd}}}Cd}{{{A`{C`}}}C`}{{{A`{B`}}}B`}{{{A`{Bb}}}Bb}{{A`{A`{Abc}}}j{}}0000000000000000000000000000{{A`Fd}j}0000000000000000000000000000{{Ch{A`{Bn}}}Ch}{CbFf}``{{{A`{Cf}}c}Fh{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{ChDh}Ch}{{}El}{{}Cb}{{}Cd}{ChCh}0{{ChDf{A`{{Cl{{A`{Bn}}}}}}}Ch}{{{A`{Bb}}}Fh}{{{A`{Cn}}{A`{Cn}}}Fl}{{{A`{D`}}{A`{D`}}}Fl}{{{A`{Db}}{A`{Db}}}Fl}{{{A`{Dd}}{A`{Dd}}}Fl}{{{A`{Df}}{A`{Df}}}Fl}{{{A`{Dh}}{A`{Dh}}}Fl}{{{A`{Dj}}{A`{Dj}}}Fl}{{{A`{Dl}}{A`{Dl}}}Fl}{{{A`{Dn}}{A`{Dn}}}Fl}{{{A`{E`}}{A`{E`}}}Fl}{{{A`{Eb}}{A`{Eb}}}Fl}{{{A`{Ed}}{A`{Ed}}}Fl}{{{A`{Ef}}{A`{Ef}}}Fl}{{{A`{Eh}}{A`{Eh}}}Fl}{{{A`{Cj}}{A`{Cj}}}Fl}{{{A`{Bl}}{A`{Bl}}}Fl}{{{A`{Cf}}{A`{Cf}}}Fl}{{{A`{Ej}}{A`{Ej}}}Fl}{{{A`{El}}{A`{El}}}Fl}{{{A`{Bf}}{A`{Bf}}}Fl}{{{A`{Bh}}{A`{Bh}}}Fl}{{{A`{En}}{A`{En}}}Fl}{{{A`{F`}}{A`{F`}}}Fl}{{{A`{Fb}}{A`{Fb}}}Fl}{{{A`{Cb}}{A`{Cb}}}Fl}{{{A`{Cd}}{A`{Cd}}}Fl}{{{A`{C`}}{A`{C`}}}Fl}{{{A`{B`}}{A`{B`}}}Fl}{{{A`{Bb}}{A`{Bb}}}Fl}{{{A`{Cf}}c}{{Bd{{A`{Cj}}}}}{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{{A`{Cf}}c}{{Bj{{A`{Cj}}}}}{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{Ch{A`{{Cl{{A`{Bn}}}}}}}Ch}{{{A`{Cn}}{A`{AbG`}}}Gb}0{{{A`{D`}}{A`{AbG`}}}Gb}0{{{A`{Db}}{A`{AbG`}}}Gb}0{{{A`{Dd}}{A`{AbG`}}}Gb}0{{{A`{Df}}{A`{AbG`}}}Gb}0{{{A`{Dh}}{A`{AbG`}}}Gb}0{{{A`{Dj}}{A`{AbG`}}}Gb}0{{{A`{Dl}}{A`{AbG`}}}Gb}0{{{A`{Dn}}{A`{AbG`}}}Gb}0{{{A`{E`}}{A`{AbG`}}}Gb}0{{{A`{Eb}}{A`{AbG`}}}Gb}0{{{A`{Ed}}{A`{AbG`}}}Gb}0{{{A`{Ef}}{A`{AbG`}}}Gb}0{{{A`{Eh}}{A`{AbG`}}}Gb}0{{{A`{Cj}}{A`{AbG`}}}Gb}0{{{A`{Bl}}{A`{AbG`}}}Gb}0{{{A`{Cf}}{A`{AbG`}}}Gb}0{{{A`{Ej}}{A`{AbG`}}}Gb}0{{{A`{El}}{A`{AbG`}}}Gb}{{{A`{Bf}}{A`{AbG`}}}Gb}0{{{A`{Bh}}{A`{AbG`}}}Gb}{{{A`{En}}{A`{AbG`}}}Gb}{{{A`{F`}}{A`{AbG`}}}Gb}{{{A`{Fb}}{A`{AbG`}}}Gb}{{{A`{Cb}}{A`{AbG`}}}Gb}0{{{A`{Cd}}{A`{AbG`}}}Gb}0{{{A`{C`}}{A`{AbG`}}}Gb}0{{{A`{B`}}{A`{AbG`}}}Gb}0{{{A`{Bb}}{A`{AbG`}}}Gb}0{{{A`{El}}Cd}El}{{}Ch}{{Db{Bj{Bf}}CbCd}Cf}{cc{}}0000000000000{BfEh}{BbEh}{C`Eh}3333333333333{GdC`}4{{{A`{Bn}}}C`}5{GdBb}{C`Bb}{{{A`{Bn}}}Bb}8{{{A`{Cf}}c}Fl{{Fn{{A`{Cj}}}{{Fj{Fl}}}}}}{{{A`{Bl}}}Fl}{{{A`{Cn}}{A`{Abc}}}jGf}{{{A`{D`}}{A`{Abc}}}jGf}{{{A`{Db}}{A`{Abc}}}jGf}{{{A`{Dd}}{A`{Abc}}}jGf}{{{A`{Df}}{A`{Abc}}}jGf}{{{A`{Dh}}{A`{Abc}}}jGf}{{{A`{Dj}}{A`{Abc}}}jGf}{{{A`{Dl}}{A`{Abc}}}jGf}{{{A`{Dn}}{A`{Abc}}}jGf}{{{A`{E`}}{A`{Abc}}}jGf}{{{A`{Eb}}{A`{Abc}}}jGf}{{{A`{Ed}}{A`{Abc}}}jGf}{{{A`{Ef}}{A`{Abc}}}jGf}{{{A`{Bl}}{A`{Abc}}}jGf}{{{A`{F`}}{A`{Abc}}}jGf}{{{A`{Fb}}{A`{Abc}}}jGf}{{{A`{Cb}}{A`{Abc}}}jGf}{{{A`{Cd}}{A`{Abc}}}jGf}{{{A`{C`}}{A`{Abc}}}jGf}{{Ch{A`{Bn}}}Ch}{{}c{}}00000000000000000000000000000{{CfCd}Cf}{{{A`{B`}}}Fl}{{{A`{Bb}}}Fl}{CdFl}{{{A`{Cj}}}Fl}{{{A`{Bl}}}Fl}1111211101110{{{A`{Bf}}}Fl}2224221511111{{{A`{Cf}}}Bl}{BhEn}{{{A`{Cf}}}Cd}{{{A`{El}}}Cd}{{{A`{El}}}Fl}{B`Bj}{CbFf}{{{A`{Cf}}}Cb}2{{ChD`{A`{{Cl{{A`{Bn}}}}}}}Ch}{{{A`{Cf}}}{{A`{Bn}}}}{{{A`{C`}}}{{A`{Bn}}}}{{{A`{Bb}}}{{A`{Bn}}}}{{BlCd}{{A`{Bn}}}}{BlCh}{{Bl{A`{Bn}}{Bd{Cj}}CbCd}Cf}{{FlCd}El}{{c{A`{El}}}Bf{{Gh{Gd}}}}{{FfFf}Cb}{cC`{{Gh{Gd}}}}{{{Bj{Bf}}{Bj{Bf}}{Bj{Bf}}}B`}{cBb{{Gh{Gd}}}}{ChCh}{{Chb}Ch}{{Ch{A`{Bn}}}Ch}20{BhGd}{{}Ch}{{{Bj{Dh}}CbCd}Cf}1{ElFl}{Cd{{A`{Bn}}}}{{Ch{A`{{Cl{{A`{Bn}}}}}}}Ch}{{ChDj}Ch}{{ChCn{A`{{Cl{{A`{Bn}}}}}}}Ch}{{ChDb{Bj{{A`{Bn}}}}}Ch}{{ChDb}Ch}{{ChDb{Bd{Dd}}{Bj{{A`{Bn}}}}}Ch}{{{A`{AbCf}}Cd}j}6{{Bl{A`{Bn}}CbCd}Cf}{BfB`}{{}Cb}{B`Bj}{CdEl}??{{CbCd}Cf}0{{}Ch}{A`c{}}0000000000000000000000000000{A`Gd}00000000000000000000000{{{A`{Cf}}Cd}Gd}`{c{{Al{e}}}{}{}}00000000000000000000000000000{{}{{Al{c}}}{}}00000000000000000000000000000{A`An}00000000000000000000000000000{cBf{{Gh{Gd}}}}`{{{A`{Cf}}}{{Al{j{Bd{Gj}}}}}}{{ElCd}El}{{ElFl}El}<{{c{Bd{B`}}}Bb{{Gh{Gd}}}}{GlBj}{GnBj}{H`C`}{HbBj}{HdBj}{HfBf}{HhBj}{HjDf}{HlBf}{HfBj}{HnBf}{I`Bd}{IbBd}{IdBd}{IfBd}{IhBd}{IjBd}{IlBd}{InBd}{J`Bd}{JbBd}{HjBd}{JdBd}{JfBd}{GlBd}{GnBd}{JhBd}{JjBd}{HbDb}{HdDb}{JlBf}{JnBf}{K`Bf}{IjBj}0{KbBj}{IdBj}{JfBj}{HbBd}{KdBf}{KfBj}{HhC`}{KhBf}{KjBf}{KlBf}{KbDn}{IhCn}{KnBf}:{L`Bf}{LbBd}{LdLf}{LhLf}0{LbGd}{LdBd}{LjLf}{LjF`}{LlFb}{LlLf}36{{{A`{Ln}}CbCd{A`{El}}}{{Al{CfEj}}}}{{{A`{M`}}{A`{El}}}{{Al{CjEj}}}}{{{A`{Bn}}}{{Al{DfEj}}}}{{{A`{Bn}}}{{Al{BlEj}}}}{{{A`{Bn}}{A`{El}}}{{Al{{Bd{Eh}}Ej}}}}{{{A`{Bn}}{A`{El}}}{{Al{CjEj}}}}0{{{A`{Bn}}}{{Al{CnEj}}}}1````{A`{{A`{c}}}{}}{{{A`{Ab}}}{{A`{Abc}}}{}}{{{A`{Mb}}}Mb}{{A`{A`{Abc}}}j{}}{{A`Fd}j}{{{A`{Mb}}{A`{Mb}}}Fl}{{{A`{Mb}}{A`{AbG`}}}Gb}0{cc{}}{EjMb}{{}c{}}{A`c{}}{A`Gd}{{{A`{Bn}}}{{Al{GdMb}}}}{{{A`{Bn}}El}{{Al{CfMb}}}}10{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{Gj}}}Gj}{{A`{A`{Abc}}}j{}}{{A`Fd}j}{{{A`{Gj}}{A`{Gj}}}Fl}{{{A`{Gj}}{A`{AbG`}}}Gb}0{cc{}}0??{{{A`{Md}}{A`{Cj}}}{{Al{jGj}}}}{BlMd}{A`c{}}{A`Gd}>>==<<{{{A`{Md}}{A`{{Cl{Cj}}}}}{{Al{j{Bd{Gj}}}}}}{MfGd}0{MhGd}{MjBd}1{MlGd}23{MjGd}1````{A`{{A`{c}}}{}}{{{A`{Ab}}}{{A`{Abc}}}{}}{{{A`{Mn}}}Mn}{{A`{A`{Abc}}}j{}}{{A`Fd}j}{{}Mn}{{{A`{Mn}}{A`{Mn}}}Fl}{{{A`{Mn}}{A`{AbG`}}}Gb}{cc{}}{{}c{}}{N`Fl}{{{A`{Bn}}}{{Nb{{A`{Bn}}{A`{Bn}}}}}}0{{{A`{Bn}}{A`{Bn}}}{{Nb{{A`{Bn}}{A`{Bn}}}}}}11010111{{{A`{Bn}}}Gd}22{A`c{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````````````````````{A`{{A`{c}}}{}}0000000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000000{NdNf}{NhNj}{{}Nd}{{}Nh}{LnBd}{{{A`{Nl}}}Nl}{{{A`{Nn}}}Nn}{{{A`{O`}}}O`}{{A`{A`{Abc}}}j{}}00{{A`Fd}j}00{{}Nf}8{{}Nj}8{{}Ob}{{{A`{Od}}{A`{Od}}}Fl}{{{A`{M`}}{A`{M`}}}Fl}{{{A`{Ln}}{A`{Ln}}}Fl}{{{A`{O`}}{A`{O`}}}Fl}{{{A`{Od}}{A`{AbG`}}}Gb}{{{A`{M`}}{A`{AbG`}}}Gb}0{{{A`{Ln}}{A`{AbG`}}}Gb}0{{{A`{O`}}{A`{AbG`}}}Gb}{cc{}}0000000000{{}c{}}0000000000{M`Od}{M`Of}{LnOf}{{}Nd}{{}Nh}{{NjNf}Ob}``{{{A`{Nj}}{A`{Bn}}{A`{Nf}}}{{Nb{{A`{Bn}}Ln}}}}{{{A`{Ob}}{A`{Bn}}}{{Nb{{A`{Bn}}Ln}}}}{{{A`{Bn}}}{{Nb{{A`{Bn}}Ln}}}}0{{{A`{Nf}}{A`{Bn}}}{{Nb{{A`{Bn}}{Bd{M`}}}}}}{{{A`{Nj}}{Of{Bn}}{A`{Bn}}{A`{Nf}}}{{Nb{{A`{Bn}}Ln}}}}{{Nd{A`{Bn}}}Nd}{{Nd{A`{Bn}}{Oh{{Of{Bn}}{A`{Bn}}}{{Fj{{Nb{{A`{Bn}}M`}}}}}}}Nd}{{Nh{A`{Bn}}{Oh{{Of{Bn}}{A`{Bn}}{A`{Nf}}}{{Fj{{Nb{{A`{Bn}}Ln}}}}}}}Nh}{{Nh{A`{Bn}}}Nh}3{{Nd{A`{Bn}}Nl}Nd}{{{A`{AbNd}}{A`{Bn}}Nl}{{A`{AbNd}}}}{A`c{}}00{{{A`{Ln}}}Gd}{{{A`{Ln}}{A`{Bn}}}Gd}{{{A`{M`}}}Gd}{A`Gd}0{c{{Al{e}}}{}{}}0000000000{{}{{Al{c}}}{}}0000000000{A`An}0000000000{{NfFl}Nf}{{NdFl}Nd}{{NjFl}Nj}{{NhFl}Nh}{{NdNl}Nd}{{NhNn}Nh}{{ObO`}Ob}{{ObMn}Ob}``````````````````````````````````````````````````````````````````````````````````{Oj{{A`{Bn}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Nf}{{{A`{Ol}}}Ol}{{{A`{Oj}}}Oj}{{A`{A`{Abc}}}j{}}0{{A`Fd}j}0{{}Nj}{{{A`{Ol}}{A`{Ol}}}Fl}{{{A`{Oj}}{A`{Oj}}}Fl}{{{A`{Ol}}{A`{AbG`}}}Gb}{{{A`{Oj}}{A`{AbG`}}}Gb}{cc{}}0{{{A`{Ol}}{A`{Abc}}}jGf}{{{A`{Oj}}{A`{Abc}}}jGf}{{}c{}}0{Ol{{A`{Bn}}}}{{}Ob}{OlNl}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{On{{A`{Bn}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Nf}{{{A`{A@`}}}A@`}{{{A`{On}}}On}{{A`{A`{Abc}}}j{}}0{{A`Fd}j}0{{}Nj}{{{A`{A@`}}{A`{A@`}}}Fl}{{{A`{On}}{A`{On}}}Fl}{{{A`{A@`}}{A`{AbG`}}}Gb}{{{A`{On}}{A`{AbG`}}}Gb}{cc{}}0{{{A`{A@`}}{A`{Abc}}}jGf}{{{A`{On}}{A`{Abc}}}jGf}{{}c{}}0{A@`{{A`{Bn}}}}{{}Ob}{A@`Nl}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0","D":"DKj","p":[[1,"i32"],[5,"AccClause",4],[8,"c_char",1746],[5,"AccClauseIterator",4],[1,"unit"],[5,"AccDirective",4],[5,"AccStringList",4],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[5,"OmpDirective",4],[6,"Result",1747,null,1],[5,"TypeId",1748],[5,"ArraySection",104,1749],[5,"Variable",104,1749],[5,"Vec",1750],[6,"Expression",104,1751],[5,"ExpressionAst",104,1751],[6,"Option",1752,null,1],[6,"DirectiveKind",104,1753],[1,"str"],[5,"Identifier",104,1749],[5,"SourceLocation",104,1754],[6,"Language",104,1754],[5,"DirectiveIR",104,1753],[5,"DirectiveBuilder",104,1755],[6,"ClauseData",104,1756],[1,"slice"],[6,"ReductionOperator",104,1756],[6,"MapType",104,1756],[6,"ScheduleKind",104,1756],[6,"ScheduleModifier",104,1756],[6,"DependType",104,1756],[6,"DefaultKind",104,1756],[6,"ProcBind",104,1756],[6,"MemoryOrder",104,1756],[6,"AtomicOp",104,1756],[6,"DeviceType",104,1756],[6,"LinearModifier",104,1756],[6,"LastprivateModifier",104,1756],[6,"OrderKind",104,1756],[6,"ClauseItem",104,1756],[6,"ConversionError",104,1757],[5,"ParserConfig",104,1751],[6,"ExpressionKind",104,1751],[6,"BinaryOperator",104,1751],[6,"UnaryOperator",104,1751],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1758],[5,"Formatter",1759],[8,"Result",1759],[5,"String",1760],[10,"Hasher",1761],[10,"Into",1762,null,1],[6,"ValidationError",1090],[15,"Aligned",995],[15,"Allocate",995],[15,"Allocator",995],[15,"Schedule",995],[15,"DistSchedule",995],[15,"If",995],[15,"Generic",995],[15,"Depend",995],[15,"Device",995],[15,"Grainsize",995],[15,"Private",995],[15,"Firstprivate",995],[15,"Lastprivate",995],[15,"Shared",995],[15,"Reduction",995],[15,"Map",995],[15,"UseDevicePtr",995],[15,"UseDeviceAddr",995],[15,"IsDevicePtr",995],[15,"HasDeviceAddr",995],[15,"Affinity",995],[15,"Linear",995],[15,"Copyin",995],[15,"Copyprivate",995],[15,"Safelen",995],[15,"Simdlen",995],[15,"ThreadLimit",995],[15,"AtomicOperation",995],[15,"Collapse",995],[15,"Ordered",995],[15,"NumThreads",995],[15,"NumTeams",995],[15,"NumTasks",995],[15,"Priority",995],[15,"Filter",995],[15,"Call",1045],[15,"ArrayAccess",1045],[5,"Box",1763,null,1],[15,"Conditional",1045],[15,"BinaryOp",1045],[15,"UnaryOp",1045],[5,"Directive",1164,1764],[5,"Clause",1164,1765],[6,"TranslationError",1066],[5,"ValidationContext",1090],[15,"ConflictingClauses",1121],[15,"ClauseNotAllowed",1121],[15,"InvalidCombination",1121],[15,"MissingRequiredClause",1121],[6,"Language",1131],[1,"char"],[8,"IResult",1766],[5,"ClauseRegistryBuilder",1164,1765],[5,"ClauseRegistry",1164,1765],[5,"DirectiveRegistryBuilder",1164,1764],[5,"DirectiveRegistry",1164,1764],[6,"ClauseRule",1164,1765],[6,"DirectiveRule",1164,1764],[6,"Dialect",1164],[5,"Parser",1164],[6,"ClauseKind",1164,1765],[6,"Cow",1767],[1,"fn"],[6,"OpenAccDirective",1329],[6,"OpenAccClause",1329],[6,"OpenMpDirective",1445],[6,"OpenMpClause",1445]],"r":[[104,1756],[105,1756],[106,1756],[107,1751],[108,1751],[109,1756],[110,1756],[111,1756],[112,1756],[113,1753],[114,1756],[115,1753],[116,1751],[117,1756],[118,1751],[119,1749],[120,1753],[121,1753],[122,1753],[123,1753],[124,1753],[125,1756],[126,1756],[127,1756],[128,1753],[129,1753],[130,1753],[131,1756],[132,1756],[133,1753],[134,1753],[135,1753],[136,1753],[137,1753],[138,1751],[139,1751],[140,1756],[141,1751],[142,1751],[143,1756],[144,1751],[145,1756],[146,1751],[147,1754],[148,1751],[149,1753],[150,1753],[151,1756],[152,1756],[153,1756],[154,1756],[155,1756],[156,1751],[157,1756],[158,1756],[159,1751],[160,1757],[161,1756],[162,1756],[163,1754],[164,1753],[165,1756],[166,1753],[167,1753],[168,1753],[169,1753],[170,1753],[171,1753],[172,1756],[173,1756],[174,1756],[175,1756],[176,1756],[177,1756],[178,1753],[179,1751],[180,1756],[181,1756],[182,1756],[183,1755],[184,1753],[185,1753],[186,1753],[187,1756],[188,1753],[189,1753],[190,1753],[191,1753],[192,1753],[193,1753],[194,1753],[195,1753],[196,1751],[197,1753],[198,1753],[199,1756],[200,1753],[201,1753],[202,1751],[203,1753],[204,1751],[205,1756],[206,1756],[207,1751],[208,1751],[209,1756],[210,1756],[211,1756],[212,1753],[213,1753],[214,1753],[215,1754],[216,1756],[217,1753],[218,1751],[219,1756],[220,1756],[221,1753],[222,1751],[223,1756],[224,1756],[225,1756],[226,1749],[227,1756],[228,1751],[229,1756],[230,1756],[231,1756],[232,1751],[233,1753],[234,1753],[235,1757],[236,1756],[237,1756],[238,1754],[239,1756],[240,1756],[241,1751],[242,1756],[243,1756],[244,1756],[245,1751],[246,1756],[247,1753],[248,1751],[249,1756],[250,1756],[251,1753],[252,1753],[253,1753],[254,1756],[255,1753],[256,1756],[257,1756],[258,1753],[259,1756],[260,1756],[261,1751],[262,1756],[263,1751],[264,1756],[265,1756],[266,1751],[267,1751],[268,1756],[269,1756],[270,1756],[271,1753],[272,1756],[273,1756],[274,1756],[275,1751],[276,1756],[277,1756],[278,1756],[279,1753],[280,1756],[281,1753],[282,1753],[283,1753],[284,1753],[285,1753],[286,1753],[287,1753],[288,1753],[289,1753],[290,1753],[291,1753],[292,1753],[293,1753],[294,1753],[295,1753],[296,1751],[297,1751],[298,1751],[299,1756],[300,1756],[301,1756],[302,1756],[303,1756],[304,1756],[305,1756],[306,1756],[307,1756],[308,1756],[309,1756],[310,1756],[311,1756],[312,1753],[313,1753],[314,1756],[315,1756],[316,1753],[317,1756],[318,1756],[319,1756],[320,1753],[321,1753],[322,1753],[323,1756],[324,1756],[325,1756],[326,1751],[327,1751],[328,1756],[329,1753],[330,1756],[331,1753],[332,1756],[333,1756],[334,1754],[335,1753],[336,1756],[337,1756],[338,1753],[339,1751],[340,1756],[341,1753],[342,1753],[343,1753],[344,1753],[345,1753],[346,1753],[347,1753],[348,1753],[349,1753],[350,1753],[351,1753],[352,1753],[353,1753],[354,1753],[355,1753],[356,1753],[357,1753],[358,1753],[359,1753],[360,1753],[361,1753],[362,1753],[363,1753],[364,1753],[365,1753],[366,1753],[367,1753],[368,1753],[369,1753],[370,1753],[371,1753],[372,1753],[373,1753],[374,1753],[375,1753],[376,1753],[377,1753],[378,1753],[379,1753],[380,1753],[381,1753],[382,1753],[383,1753],[384,1753],[385,1753],[386,1756],[387,1753],[388,1753],[389,1756],[390,1756],[391,1751],[392,1751],[393,1753],[394,1754],[395,1757],[396,1757],[397,1751],[398,1753],[399,1757],[400,1756],[401,1756],[402,1756],[403,1756],[404,1756],[405,1090],[406,1090],[407,1749],[408,1756],[409,1753],[410,1753],[411,1756],[412,1749],[413,1749],[414,1751],[415,1753],[416,1751],[417,1749],[418,1753],[419,1755],[420,1756],[421,1756],[422,1756],[423,1756],[424,1756],[425,1756],[426,1756],[427,1756],[428,1756],[429,1756],[430,1756],[431,1756],[432,1756],[433,1756],[434,1756],[435,1753],[436,1753],[437,1757],[438,1751],[439,1751],[440,1751],[441,1751],[442,1751],[443,1751],[444,1754],[445,1754],[446,1749],[447,1749],[448,1749],[449,1755],[450,1756],[451,1756],[452,1756],[453,1756],[454,1756],[455,1756],[456,1756],[457,1756],[458,1756],[459,1756],[460,1756],[461,1756],[462,1756],[463,1756],[464,1756],[465,1753],[466,1753],[467,1757],[468,1751],[469,1751],[470,1751],[471,1751],[472,1751],[473,1751],[474,1754],[475,1754],[476,1749],[477,1749],[478,1749],[479,1755],[480,1753],[481,1756],[482,1756],[483,1756],[484,1756],[485,1756],[486,1756],[487,1756],[488,1756],[489,1756],[490,1756],[491,1756],[492,1756],[493,1756],[494,1756],[495,1756],[496,1753],[497,1753],[498,1757],[499,1751],[500,1751],[501,1751],[502,1751],[503,1751],[504,1751],[505,1754],[506,1754],[507,1749],[508,1749],[509,1749],[510,1756],[511,1756],[512,1756],[513,1756],[514,1756],[515,1756],[516,1756],[517,1756],[518,1756],[519,1756],[520,1756],[521,1756],[522,1756],[523,1756],[524,1756],[525,1753],[526,1753],[527,1757],[528,1751],[529,1751],[530,1751],[531,1751],[532,1751],[533,1751],[534,1754],[535,1754],[536,1749],[537,1749],[538,1749],[539,1756],[540,1756],[541,1756],[542,1756],[543,1756],[544,1756],[545,1756],[546,1756],[547,1756],[548,1756],[549,1756],[550,1756],[551,1756],[552,1756],[553,1756],[554,1753],[555,1753],[556,1757],[557,1751],[558,1751],[559,1751],[560,1751],[561,1751],[562,1751],[563,1754],[564,1754],[565,1749],[566,1749],[567,1749],[568,1755],[569,1754],[571,1057],[572,1753],[573,1755],[574,1751],[575,1754],[576,1754],[577,1755],[578,1755],[579,1755],[580,1749],[581,1756],[582,1756],[583,1756],[584,1756],[585,1756],[586,1756],[587,1756],[588,1756],[589,1756],[590,1756],[591,1756],[592,1756],[593,1756],[594,1756],[595,1756],[596,1753],[597,1753],[598,1757],[599,1751],[600,1751],[601,1751],[602,1751],[603,1751],[604,1751],[605,1754],[606,1754],[607,1749],[608,1749],[609,1749],[610,1753],[611,1753],[612,1755],[613,1756],[614,1756],[615,1756],[616,1756],[617,1756],[618,1756],[619,1756],[620,1756],[621,1756],[622,1756],[623,1756],[624,1756],[625,1756],[626,1756],[627,1756],[628,1756],[629,1756],[630,1756],[631,1756],[632,1756],[633,1756],[634,1756],[635,1756],[636,1756],[637,1756],[638,1756],[639,1756],[640,1756],[641,1756],[642,1756],[643,1753],[644,1753],[645,1753],[646,1753],[647,1757],[648,1757],[649,1751],[650,1751],[651,1751],[652,1751],[653,1751],[654,1751],[655,1751],[656,1754],[657,1754],[658,1754],[659,1754],[660,1749],[661,1749],[662,1749],[663,1749],[664,1749],[665,1749],[666,1751],[667,1755],[668,1753],[669,1755],[670,1756],[671,1756],[672,1756],[673,1756],[674,1756],[675,1756],[676,1756],[677,1756],[678,1756],[679,1756],[680,1756],[681,1756],[682,1756],[683,1756],[684,1756],[685,1756],[686,1756],[687,1756],[688,1753],[689,1753],[690,1757],[691,1751],[692,1751],[693,1751],[694,1751],[695,1751],[696,1751],[697,1754],[698,1754],[699,1749],[700,1749],[701,1749],[702,1749],[703,1749],[704,1749],[705,1749],[706,1749],[707,1753],[708,1753],[709,1756],[710,1756],[711,1756],[712,1756],[713,1756],[714,1756],[715,1756],[716,1756],[717,1756],[718,1756],[719,1756],[720,1756],[721,1756],[722,1753],[723,1751],[724,1751],[725,1754],[726,1754],[727,1749],[728,1755],[729,1755],[730,1756],[731,1756],[732,1756],[733,1756],[734,1756],[735,1756],[736,1756],[737,1756],[738,1756],[739,1756],[740,1756],[741,1756],[742,1756],[743,1756],[744,1756],[745,1753],[746,1753],[747,1757],[748,1751],[749,1751],[750,1751],[751,1751],[752,1751],[753,1751],[754,1754],[755,1754],[756,1749],[757,1749],[758,1749],[759,1753],[760,1749],[761,1749],[762,1754],[763,1756],[764,1753],[765,1756],[766,1756],[767,1756],[768,1756],[769,1754],[770,1756],[771,1756],[772,1756],[773,1753],[774,1756],[775,1756],[776,1756],[777,1753],[778,1751],[779,1756],[780,1756],[781,1756],[782,1749],[783,1756],[784,1756],[785,1753],[786,1749],[787,1753],[788,1753],[789,1753],[790,1753],[791,1753],[792,1753],[793,1751],[794,1753],[795,1751],[796,1751],[797,1749],[798,1754],[799,1753],[800,1749],[801,1755],[802,1753],[803,1749],[804,1749],[805,1753],[806,1755],[807,1753],[808,1751],[809,1751],[810,1754],[811,1749],[812,1749],[813,1749],[814,1755],[815,1755],[816,1755],[817,1755],[818,1755],[819,1751],[820,1755],[821,1753],[822,1755],[823,1751],[824,1754],[825,1755],[826,1755],[827,1755],[828,1755],[829,1755],[830,1755],[831,1753],[832,1755],[833,1753],[834,1749],[835,1754],[836,1749],[837,1751],[838,1755],[839,1755],[840,1753],[841,1753],[842,1755],[843,1756],[844,1756],[845,1756],[846,1756],[847,1756],[848,1756],[849,1756],[850,1756],[851,1756],[852,1756],[853,1756],[854,1756],[855,1756],[856,1756],[857,1756],[858,1753],[859,1753],[860,1757],[861,1751],[862,1751],[863,1751],[864,1751],[865,1751],[866,1751],[867,1754],[868,1754],[869,1749],[870,1749],[871,1749],[872,1756],[873,1756],[874,1756],[875,1756],[876,1756],[877,1756],[878,1756],[879,1756],[880,1756],[881,1756],[882,1756],[883,1756],[884,1756],[885,1756],[886,1756],[887,1753],[888,1753],[889,1757],[890,1751],[891,1754],[892,1754],[893,1749],[894,1749],[895,1749],[896,1753],[898,1755],[899,1756],[900,1756],[901,1756],[902,1756],[903,1756],[904,1756],[905,1756],[906,1756],[907,1756],[908,1756],[909,1756],[910,1756],[911,1756],[912,1756],[913,1756],[914,1753],[915,1753],[916,1757],[917,1751],[918,1751],[919,1751],[920,1751],[921,1751],[922,1751],[923,1754],[924,1754],[925,1749],[926,1749],[927,1749],[928,1755],[929,1756],[930,1756],[931,1756],[932,1756],[933,1756],[934,1756],[935,1756],[936,1756],[937,1756],[938,1756],[939,1756],[940,1756],[941,1756],[942,1756],[943,1756],[944,1753],[945,1753],[946,1757],[947,1751],[948,1751],[949,1751],[950,1751],[951,1751],[952,1751],[953,1754],[954,1754],[955,1749],[956,1749],[957,1749],[958,1755],[959,1756],[960,1756],[961,1756],[962,1756],[963,1756],[964,1756],[965,1756],[966,1756],[967,1756],[968,1756],[969,1756],[970,1756],[971,1756],[972,1756],[973,1756],[974,1753],[975,1753],[976,1757],[977,1751],[978,1751],[979,1751],[980,1751],[981,1751],[982,1751],[983,1754],[984,1754],[985,1749],[986,1749],[987,1749],[988,1751],[990,1753],[991,1751],[992,1751],[993,1751],[994,1749],[1164,1765],[1165,1765],[1166,1765],[1167,1765],[1168,1765],[1169,1765],[1170,1765],[1171,1765],[1172,1764],[1174,1764],[1175,1764],[1176,1764],[1177,1764],[1178,1765],[1179,1764],[1182,1765],[1183,1765],[1185,1765],[1186,1765],[1187,1765],[1188,1764],[1189,1764],[1191,1765],[1192,1765],[1193,1765],[1194,1764],[1195,1764],[1197,1765],[1198,1765],[1199,1764],[1200,1764],[1202,1765],[1203,1765],[1204,1765],[1205,1764],[1206,1764],[1208,1765],[1209,1764],[1210,1765],[1211,1764],[1212,1764],[1213,1765],[1214,1764],[1216,1765],[1217,1764],[1219,1765],[1220,1764],[1222,1765],[1223,1765],[1224,1764],[1225,1764],[1227,1765],[1228,1765],[1229,1764],[1231,1765],[1232,1765],[1233,1765],[1234,1764],[1235,1764],[1237,1765],[1238,1765],[1239,1764],[1240,1764],[1242,1765],[1243,1765],[1244,1765],[1245,1764],[1246,1764],[1248,1765],[1249,1765],[1250,1764],[1251,1764],[1253,1765],[1254,1765],[1255,1765],[1256,1764],[1257,1764],[1259,1765],[1260,1765],[1261,1764],[1262,1765],[1263,1764],[1267,1764],[1271,1765],[1272,1764],[1273,1765],[1274,1765],[1275,1764],[1276,1764],[1277,1765],[1278,1765],[1279,1765],[1280,1765],[1281,1764],[1283,1764],[1284,1764],[1285,1765],[1286,1765],[1287,1764],[1288,1765],[1289,1765],[1290,1764],[1291,1764],[1293,1765],[1294,1765],[1295,1765],[1296,1764],[1297,1764],[1299,1765],[1300,1765],[1301,1764],[1302,1764],[1304,1765],[1305,1765],[1306,1765],[1307,1764],[1308,1764],[1310,1765],[1311,1765],[1312,1764],[1313,1764],[1315,1765],[1316,1765],[1317,1765],[1318,1764],[1319,1764],[1321,1765],[1322,1765],[1323,1764],[1324,1764],[1325,1765],[1326,1764]],"b":[[613,"impl-Display-for-ReductionOperator"],[614,"impl-Debug-for-ReductionOperator"],[615,"impl-Display-for-MapType"],[616,"impl-Debug-for-MapType"],[617,"impl-Debug-for-ScheduleKind"],[618,"impl-Display-for-ScheduleKind"],[619,"impl-Debug-for-ScheduleModifier"],[620,"impl-Display-for-ScheduleModifier"],[621,"impl-Debug-for-DependType"],[622,"impl-Display-for-DependType"],[623,"impl-Debug-for-DefaultKind"],[624,"impl-Display-for-DefaultKind"],[625,"impl-Display-for-ProcBind"],[626,"impl-Debug-for-ProcBind"],[627,"impl-Display-for-MemoryOrder"],[628,"impl-Debug-for-MemoryOrder"],[629,"impl-Debug-for-AtomicOp"],[630,"impl-Display-for-AtomicOp"],[631,"impl-Display-for-DeviceType"],[632,"impl-Debug-for-DeviceType"],[633,"impl-Display-for-LinearModifier"],[634,"impl-Debug-for-LinearModifier"],[635,"impl-Display-for-LastprivateModifier"],[636,"impl-Debug-for-LastprivateModifier"],[637,"impl-Debug-for-OrderKind"],[638,"impl-Display-for-OrderKind"],[639,"impl-Display-for-ClauseItem"],[640,"impl-Debug-for-ClauseItem"],[641,"impl-Display-for-ClauseData"],[642,"impl-Debug-for-ClauseData"],[643,"impl-Display-for-DirectiveKind"],[644,"impl-Debug-for-DirectiveKind"],[645,"impl-Display-for-DirectiveIR"],[646,"impl-Debug-for-DirectiveIR"],[647,"impl-Debug-for-ConversionError"],[648,"impl-Display-for-ConversionError"],[650,"impl-Display-for-Expression"],[651,"impl-Debug-for-Expression"],[656,"impl-Debug-for-SourceLocation"],[657,"impl-Display-for-SourceLocation"],[658,"impl-Debug-for-Language"],[659,"impl-Display-for-Language"],[660,"impl-Debug-for-Identifier"],[661,"impl-Display-for-Identifier"],[662,"impl-Display-for-ArraySection"],[663,"impl-Debug-for-ArraySection"],[664,"impl-Debug-for-Variable"],[665,"impl-Display-for-Variable"],[683,"impl-From%3CExpression%3E-for-ClauseItem"],[684,"impl-From%3CVariable%3E-for-ClauseItem"],[685,"impl-From%3CIdentifier%3E-for-ClauseItem"],[699,"impl-From%3CString%3E-for-Identifier"],[701,"impl-From%3C%26str%3E-for-Identifier"],[703,"impl-From%3CString%3E-for-Variable"],[704,"impl-From%3CIdentifier%3E-for-Variable"],[705,"impl-From%3C%26str%3E-for-Variable"],[1076,"impl-Display-for-TranslationError"],[1077,"impl-Debug-for-TranslationError"],[1104,"impl-Display-for-ValidationError"],[1105,"impl-Debug-for-ValidationError"],[1232,"impl-Display-for-Clause%3C\'_%3E"],[1233,"impl-Debug-for-Clause%3C\'a%3E"],[1234,"impl-Display-for-Directive%3C\'_%3E"],[1235,"impl-Debug-for-Directive%3C\'a%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAHUENgADAAEAHQAPAFEAFwBrAAIAdQAAAI0ABgCmAAAAtAAAAMUAAADLAAAA2wAAAN8AAADyAAAA9QACAPkAAAABAQAABAECAAgBAQALAQEAFAEAAEcBAQBUAQEAlgEBAKQBOwDiAVYAPAIAAEYCHABmAisAkwIAAJUCAQCYAgEArAICALwCAAC+AgAAwAICAMYCEgBMAzQAgwNZAOQDPQAvBAcAOAQAADoEAQBABAIASQQJAFkEBwBiBAkAcAQHAIkETADsBBgABgWOAJcFAQCbBSYBxAYBAMgGCgA=","P":[[28,"T"],[52,"U"],[60,""],[80,"U,T"],[88,"U"],[96,""],[419,"T"],[479,""],[510,"T"],[539,""],[572,"F"],[573,""],[610,"F"],[612,""],[669,"T"],[683,""],[686,"T"],[699,""],[700,"T"],[701,""],[702,"T"],[703,""],[706,"T"],[707,"F"],[708,""],[709,"__H"],[728,""],[729,"U"],[759,""],[843,"T"],[872,""],[898,"U,T"],[928,"U"],[958,""],[1070,"T"],[1072,""],[1073,"T"],[1074,""],[1078,"T"],[1079,""],[1080,"U"],[1081,"T"],[1082,""],[1087,"U,T"],[1088,"U"],[1089,""],[1096,"T"],[1100,""],[1101,"T"],[1102,""],[1106,"T"],[1108,"U"],[1110,""],[1112,"T"],[1113,""],[1114,"U,T"],[1116,"U"],[1118,""],[1135,"T"],[1137,""],[1138,"T"],[1139,""],[1143,"T"],[1144,"U"],[1145,""],[1160,"T"],[1161,"U,T"],[1162,"U"],[1163,""],[1186,"T"],[1208,""],[1216,"T"],[1219,""],[1237,"T"],[1248,"U"],[1259,""],[1280,"T"],[1283,""],[1288,"U,T"],[1299,"U"],[1310,""],[1412,"T"],[1416,""],[1419,"T"],[1421,""],[1428,"T"],[1430,"__H"],[1432,"U"],[1434,""],[1437,"T"],[1439,"U,T"],[1441,"U"],[1443,""],[1713,"T"],[1717,""],[1720,"T"],[1722,""],[1729,"T"],[1731,"__H"],[1733,"U"],[1735,""],[1738,"T"],[1740,"U,T"],[1742,"U"],[1744,""]]}],["roup_roundtrip",{"t":"H","n":["main"],"q":[[0,"roup_roundtrip"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1230,47697,189,173]}