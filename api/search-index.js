var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","calculate_combined_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_acc_clause_mappings","parse_acc_directive_mappings","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[17,"alloc::string"],[18,"core::option"],[19,"syn::expr"],[20,"core::ops::function"],[21,"syn::stmt"],[22,"alloc::vec"]],"i":"`````````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{}{{An{{j{hf}}}}}}0{{{n{Ah}}}{{Ab{{j{hf}}}}}}101","D":"B`","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",17],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",18,null,1],[6,"Expr",19],[0,"mut"],[5,"Arm",19],[10,"FnMut",20],[6,"Stmt",21],[5,"Vec",22]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[8,"F"],[10,""]]}],["roup",{"t":"CCCCCFFFFFFFFSSSHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNPPPFGIFFPPPPPPPPPPPPPPPPPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNOOONONOOHNNOONNNNNNNNNNNNNNNNNNNNNOONNNNNOONOHHOONNNNNNONNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHHHHHNNNNPPFGFFGPPGFFFGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCCONNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","debugger","ir","lexer","parser","AccClause","AccClauseIterator","AccDirective","AccStringList","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","acc_clause_expression_at","acc_clause_expressions_count","acc_clause_iterator_free","acc_clause_iterator_next","acc_clause_kind","acc_directive_clause_count","acc_directive_clauses_iter","acc_directive_free","acc_directive_kind","acc_directive_name","acc_parse","acc_parse_with_language","acc_string_list_free","borrow","","","","","","","","borrow_mut","","","","","","","","from","","","","","","","","into","","","","","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","","","","","try_into","","","","","","","","type_id","","","","","","","","ClauseArguments","ClauseName","Complete","DebugConfig","DebugError","DebugResult","DebugSession","DebugStep","DirectiveName","DirectiveParameter","Err","Error","First","GoToStep","Help","Invalid","InvalidInput","IoError","Last","Next","Ok","ParseError","PragmaPrefix","Previous","Quit","ShowAst","ShowHistory","ShowInput","ShowStep","SkipWhitespace","StepKind","UserCommand","as_str","borrow","","","","","","borrow_mut","","","","","","clone","","","","clone_into","","","","clone_to_uninit","","","","config","consumed","context_stack","current_step","current_step_index","default","description","dialect","display_ast_tree","eq","","error","final_directive","fmt","","","","","","","from","","","","","","","from_input","into","","","","","","kind","language","new","","next_step","openacc","openmp","original_input","position","prev_step","remaining","run_interactive_session","run_non_interactive","step_number","steps","steps_so_far","to_owned","","","","to_string","token_info","total_steps","try_from","","","","","","try_into","","","","","","type_id","","","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","EndTarget","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_acc","lex_clause","lex_dialect_keyword","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_fixed_sentinel_with_prefix","lex_fortran_free_sentinel","lex_fortran_free_sentinel_with_prefix","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Dialect","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","OpenAcc","OpenMp","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","","borrow_mut","","","","","","","","","","","build","","builder","","clauses","clone","","","clone_into","","","clone_to_uninit","","","default","","","","","eq","","","","fmt","","","","","","from","","","","","","","","","","","into","","","","","","","","","","","kind","name","","new","","","openacc","openmp","parameter","parse","","parse_acc_directive","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","","to_pragma_string","to_pragma_string_with_prefix","to_pragma_string_with_prefix_and_separator","to_source_string","to_string","","try_from","","","","","","","","","","","try_into","","","","","","","","","","","type_id","","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_dialect","with_language","ALL","","Async","Atomic","Attach","Auto","Bind","Cache","Capture","Collapse","Copy","Copyin","Copyout","Create","DType","Data","Declare","Default","DefaultAsync","Delete","Detach","Device","DeviceNum","DeviceResident","DeviceType","Deviceptr","End","EnterData","EnterDataUnderscore","ExitData","ExitDataUnderscore","Finalize","Firstprivate","Gang","Host","HostData","HostDataSpace","If","IfPresent","Independent","Init","Kernels","KernelsLoop","Link","Loop","NoCreate","Nohost","NumGangs","NumWorkers","OpenAccClause","OpenAccDirective","PCopy","PCopyIn","PCopyOut","PCreate","Parallel","ParallelLoop","Present","PresentOrCopy","PresentOrCopyIn","PresentOrCopyOut","PresentOrCreate","Private","Read","Reduction","Routine","SelfClause","Seq","Serial","SerialLoop","Set","Shutdown","Tile","Update","","UseDevice","Vector","VectorLength","Wait","","Worker","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id","","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndAssumes","EndDeclareTarget","EndDeclareVariant","EndTarget","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","MasterTaskloop","MasterTaskloopSimd","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[5,"roup::c_api"],[105,"roup::debugger"],[237,"roup::ir"],[1129,"roup::ir::ClauseData"],[1179,"roup::ir::ExpressionKind"],[1191,"roup::ir::convert"],[1200,"roup::ir::translate"],[1224,"roup::ir::validate"],[1255,"roup::ir::validate::ValidationError"],[1265,"roup::lexer"],[1298,"roup::parser"],[1465,"roup::parser::openacc"],[1581,"roup::parser::openmp"],[1883,"std::os::raw"],[1884,"core::result"],[1885,"core::any"],[1886,"roup::debugger::stepper"],[1887,"roup::debugger::ui"],[1888,"alloc::string"],[1889,"alloc::vec"],[1890,"core::option"],[1891,"roup::parser::directive"],[1892,"core::fmt"],[1893,"std::io::error"],[1894,"roup::ir::variable"],[1895,"roup::ir::expression"],[1896,"roup::ir::directive"],[1897,"roup::ir::types"],[1898,"roup::ir::builder"],[1899,"roup::ir::clause"],[1900,"roup::ir::error"],[1901,"core::ops::function"],[1902,"core::hash"],[1903,"core::convert"],[1904,"alloc::boxed"],[1905,"roup::parser::clause"],[1906,"nom::internal"],[1907,"alloc::borrow"],[1908,"roup::debugger::ast_display"]],"i":"`````````````````````````````AjAdAfAhldhn765432107654321076543210````````````````````765432107654321076543210B`00`````00Df1Bf000D`0112031111113``3Bd4Bl32Bh26143026402640264012211020`641126143302614330426143020101001212``2112640321261430261430261430Fn0F`HbHdEn0Fb1Eb204GbH``222224`4222Fd5333331`8768787Eh244G```Fl84GhGf6`::48=888888:`9:`Fh9<;`;```9;99999999=996999=9`Gj<``<Fj=;;;7<;?==;?8=:`19=229;;Gl>>`>`Hb?`F`Hd1?2En`Eb00;03`0334Ff54953Gb81233363`32:222222222222222H`Dn`?5:5`5G`6`GdFnFb188Fd:9:``9992?:==89:9Fh0`:Fl2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;EhGl09=08>>77```Gj>>9DjDl<Eb=EdEjElF`=<Ff<Fj<FnG`GbGdGfGh?En=;GlGnDnE`H`HbHdEfEhEdDjDlElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlEl=F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlEl5``=0;540001F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDl<<ElF`0Fb0Fd0Ff0Fh0Fj0Fl0Fn0G`0Gb0Gd0Gf0Gh0Gj0En0Eb0Ej0Gl0GnDn0E`H`HbHdEf0Eh0Ed0Dj0Dl0:El=0F`FbFdFfFhFjFlFnG`GbGdGfGhGj000EnEbEjGlGnDnE`H`HbHdEfEhEd00DjDl000<=F`FbFdFfFhFjFlFnG`GbGdGfGhEbHbHdEfEhEdEl0F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDl<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1El=31>0=;:53210000090=0;4000000=0=252;00==0F`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlDnEfEhEdDjDl7`ElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDlElF`FbFdFfFhFjFlFnG`GbGdGfGhGjEnEbEjGlGnDnE`H`HbHdEfEhEdDjDl9`<:::0IbIdIfIhIjIlInJ`Jb3JdJfJhJjJlJnK`KbKdKfKh<KjKlIbIdKnL`IhIjLbLdLf??LhJj;6LjLlInLnM`Mb7JnMdKlMfMhMjMn021N`0Nb012`````````Nf00`0000000000000````000I`000``Nh101111111010100110101010Nj0NlNn1O`2310Dd00`0000000000```````````````0000A@dOn`````0A@``````10Cf032`2OhOfOlOjA@b8Nd8Ch8765432:190875364098798798765432:107:1100765432:1908765432:19087110532``042``64553355598700011065432:1908765432:1908765432:1908765435322A@lA@j10111011111110011111111100000111100111000101111``111100111111110110000110111101101010`101010`10101010101`110101010AA`A@n1111111101011001000100000000100111111111000000011101111110100000000001100001011111000110111011111111111110101111110110000001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"`````````````{{}b}00{{db}f}{db}{hj}{{hd}b}2{lb}{lh}{lj}2{lf}{fl}{{fb}l}{nj}{A`{{A`{c}}}{}}0000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000{cc{}}0000000{{}c{}}0000000{Adb}{Adj}{Afj}{{AfAd}b}333{AdAh}{{fbb}f}{Ajb}{AjAf}{Ajj}2{Ajf}{fAj}{{fb}Aj}{fj}{Ahj}{{Ahb}f}{Ahb}{c{{Al{e}}}{}{}}0000000{{}{{Al{c}}}{}}0000000{A`An}0000000````````````````````````````````{{{A`{B`}}}{{A`{Bb}}}}{A`{{A`{c}}}{}}00000{{{A`{Ab}}}{{A`{Abc}}}{}}00000{{{A`{Bd}}}Bd}{{{A`{B`}}}B`}{{{A`{Bf}}}Bf}{{{A`{Bh}}}Bh}{{A`{A`{Abc}}}j{}}000{{A`Bj}j}000{BlBh}{BdBn}{BdC`}{{{A`{Bl}}}{{Cb{{A`{Bd}}}}}}{BlCd}{{}Bh}4{BhCf}{{{A`{Ch}}}Bn}{{{A`{B`}}{A`{B`}}}Cj}{{{A`{Bf}}{A`{Bf}}}Cj}{BlCb}0{{{A`{Bd}}{A`{AbCl}}}Cn}{{{A`{B`}}{A`{AbCl}}}Cn}{{{A`{Bl}}{A`{AbCl}}}Cn}{{{A`{Bf}}{A`{AbCl}}}Cn}{{{A`{D`}}{A`{AbCl}}}Cn}0{{{A`{Bh}}{A`{AbCl}}}Cn}{cc{}}0000{DbD`}1{{{A`{Bb}}}Bf}{{}c{}}00000{BdB`}{BhDd}{{{A`{Bb}}Bh}{{Df{Bl}}}}{{CfDd}Bh}{{{A`{AbBl}}}Cj}{{}Bh}0{BlBn}{BdCd}3{BdBn}{Bl{{Df{j}}}}{{{A`{Bl}}}j}3{BlC`}{{{A`{Bl}}}{{A`{{Dh{Bd}}}}}}{A`c{}}000{A`Bn}{BdCb}{{{A`{Bl}}}Cd}{c{{Al{e}}}{}{}}00000{{}{{Al{c}}}{}}00000{A`An}00000`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Dj}{DlC`}{{{A`{Dn}}}{{Cb{{A`{E`}}}}}}{Eb{{A`{Bb}}}}{{{A`{Dn}}}{{A`{Bb}}}}{{{A`{Ed}}}{{A`{Bb}}}}{{EfEh}Ej}{A`{{A`{c}}}{}}00000000000000000000000000000{{{A`{Ab}}}{{A`{Abc}}}{}}00000000000000000000000000000{{ElEfEh}Ej}{{{A`{Ej}}}{{A`{{Dh{En}}}}}}{{{A`{F`}}}F`}{{{A`{Fb}}}Fb}{{{A`{Fd}}}Fd}{{{A`{Ff}}}Ff}{{{A`{Fh}}}Fh}{{{A`{Fj}}}Fj}{{{A`{Fl}}}Fl}{{{A`{Fn}}}Fn}{{{A`{G`}}}G`}{{{A`{Gb}}}Gb}{{{A`{Gd}}}Gd}{{{A`{Gf}}}Gf}{{{A`{Gh}}}Gh}{{{A`{Gj}}}Gj}{{{A`{En}}}En}{{{A`{Eb}}}Eb}{{{A`{Ej}}}Ej}{{{A`{Gl}}}Gl}{{{A`{Gn}}}Gn}{{{A`{Dn}}}Dn}{{{A`{E`}}}E`}{{{A`{H`}}}H`}{{{A`{Hb}}}Hb}{{{A`{Hd}}}Hd}{{{A`{Ef}}}Ef}{{{A`{Eh}}}Eh}{{{A`{Ed}}}Ed}{{{A`{Dj}}}Dj}{{{A`{Dl}}}Dl}{{A`{A`{Abc}}}j{}}0000000000000000000000000000{{A`Bj}j}0000000000000000000000000000{{El{A`{Bb}}}El}{EfHf}``{{{A`{Ej}}c}Cd{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{ElFj}El}{{}Gn}{{}Ef}{{}Eh}{ElEl}0{{ElFh{A`{{Dh{{A`{Bb}}}}}}}El}{{{A`{Dl}}}Cd}{{{A`{F`}}{A`{F`}}}Cj}{{{A`{Fb}}{A`{Fb}}}Cj}{{{A`{Fd}}{A`{Fd}}}Cj}{{{A`{Ff}}{A`{Ff}}}Cj}{{{A`{Fh}}{A`{Fh}}}Cj}{{{A`{Fj}}{A`{Fj}}}Cj}{{{A`{Fl}}{A`{Fl}}}Cj}{{{A`{Fn}}{A`{Fn}}}Cj}{{{A`{G`}}{A`{G`}}}Cj}{{{A`{Gb}}{A`{Gb}}}Cj}{{{A`{Gd}}{A`{Gd}}}Cj}{{{A`{Gf}}{A`{Gf}}}Cj}{{{A`{Gh}}{A`{Gh}}}Cj}{{{A`{Gj}}{A`{Gj}}}Cj}{{{A`{En}}{A`{En}}}Cj}{{{A`{Eb}}{A`{Eb}}}Cj}{{{A`{Ej}}{A`{Ej}}}Cj}{{{A`{Gl}}{A`{Gl}}}Cj}{{{A`{Gn}}{A`{Gn}}}Cj}{{{A`{Dn}}{A`{Dn}}}Cj}{{{A`{E`}}{A`{E`}}}Cj}{{{A`{H`}}{A`{H`}}}Cj}{{{A`{Hb}}{A`{Hb}}}Cj}{{{A`{Hd}}{A`{Hd}}}Cj}{{{A`{Ef}}{A`{Ef}}}Cj}{{{A`{Eh}}{A`{Eh}}}Cj}{{{A`{Ed}}{A`{Ed}}}Cj}{{{A`{Dj}}{A`{Dj}}}Cj}{{{A`{Dl}}{A`{Dl}}}Cj}{{{A`{Ej}}c}{{C`{{A`{En}}}}}{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{{A`{Ej}}c}{{Cb{{A`{En}}}}}{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{El{A`{{Dh{{A`{Bb}}}}}}}El}{{{A`{F`}}{A`{AbCl}}}Cn}0{{{A`{Fb}}{A`{AbCl}}}Cn}0{{{A`{Fd}}{A`{AbCl}}}Cn}0{{{A`{Ff}}{A`{AbCl}}}Cn}0{{{A`{Fh}}{A`{AbCl}}}Cn}0{{{A`{Fj}}{A`{AbCl}}}Cn}0{{{A`{Fl}}{A`{AbCl}}}Cn}0{{{A`{Fn}}{A`{AbCl}}}Cn}0{{{A`{G`}}{A`{AbCl}}}Cn}0{{{A`{Gb}}{A`{AbCl}}}Cn}0{{{A`{Gd}}{A`{AbCl}}}Cn}0{{{A`{Gf}}{A`{AbCl}}}Cn}0{{{A`{Gh}}{A`{AbCl}}}Cn}0{{{A`{Gj}}{A`{AbCl}}}Cn}0{{{A`{En}}{A`{AbCl}}}Cn}0{{{A`{Eb}}{A`{AbCl}}}Cn}0{{{A`{Ej}}{A`{AbCl}}}Cn}0{{{A`{Gl}}{A`{AbCl}}}Cn}0{{{A`{Gn}}{A`{AbCl}}}Cn}{{{A`{Dn}}{A`{AbCl}}}Cn}0{{{A`{E`}}{A`{AbCl}}}Cn}{{{A`{H`}}{A`{AbCl}}}Cn}{{{A`{Hb}}{A`{AbCl}}}Cn}{{{A`{Hd}}{A`{AbCl}}}Cn}{{{A`{Ef}}{A`{AbCl}}}Cn}0{{{A`{Eh}}{A`{AbCl}}}Cn}0{{{A`{Ed}}{A`{AbCl}}}Cn}0{{{A`{Dj}}{A`{AbCl}}}Cn}0{{{A`{Dl}}{A`{AbCl}}}Cn}0{{{A`{Gn}}Eh}Gn}{{}El}{{Fd{Cb{Dn}}EfEh}Ej}{cc{}}00000000000000{DlGj}{EdGj}{DnGj}333333333333{BnEd}{{{A`{Bb}}}Ed}55{{{A`{Bb}}}Dl}{BnDl}{EdDl}8{{{A`{Ej}}c}Cj{{Hj{{A`{En}}}{{Hh{Cj}}}}}}{{{A`{Eb}}}Cj}{{{A`{F`}}{A`{Abc}}}jHl}{{{A`{Fb}}{A`{Abc}}}jHl}{{{A`{Fd}}{A`{Abc}}}jHl}{{{A`{Ff}}{A`{Abc}}}jHl}{{{A`{Fh}}{A`{Abc}}}jHl}{{{A`{Fj}}{A`{Abc}}}jHl}{{{A`{Fl}}{A`{Abc}}}jHl}{{{A`{Fn}}{A`{Abc}}}jHl}{{{A`{G`}}{A`{Abc}}}jHl}{{{A`{Gb}}{A`{Abc}}}jHl}{{{A`{Gd}}{A`{Abc}}}jHl}{{{A`{Gf}}{A`{Abc}}}jHl}{{{A`{Gh}}{A`{Abc}}}jHl}{{{A`{Eb}}{A`{Abc}}}jHl}{{{A`{Hb}}{A`{Abc}}}jHl}{{{A`{Hd}}{A`{Abc}}}jHl}{{{A`{Ef}}{A`{Abc}}}jHl}{{{A`{Eh}}{A`{Abc}}}jHl}{{{A`{Ed}}{A`{Abc}}}jHl}{{El{A`{Bb}}}El}{{}c{}}00000000000000000000000000000{{EjEh}Ej}{{{A`{Dj}}}Cj}{{{A`{Dl}}}Cj}{EhCj}{{{A`{En}}}Cj}{{{A`{Eb}}}Cj}1111211101110{{{A`{Dn}}}Cj}2224221511111{{{A`{Ej}}}Eb}{E`H`}{{{A`{Ej}}}Eh}{{{A`{Gn}}}Eh}{{{A`{Gn}}}Cj}{DjCb}{EfHf}{{{A`{Ej}}}Ef}2{{ElFb{A`{{Dh{{A`{Bb}}}}}}}El}{{{A`{Ej}}}{{A`{Bb}}}}{{{A`{Ed}}}{{A`{Bb}}}}{{{A`{Dl}}}{{A`{Bb}}}}{{EbEh}{{A`{Bb}}}}{EbEl}{{Eb{A`{Bb}}{C`{En}}EfEh}Ej}{{CjEh}Gn}{{c{A`{Gn}}}Dn{{Hn{Bn}}}}{{HfHf}Ef}{cEd{{Hn{Bn}}}}{{{Cb{Dn}}{Cb{Dn}}{Cb{Dn}}}Dj}{cDl{{Hn{Bn}}}}{ElEl}{{Elb}El}{{El{A`{Bb}}}El}20{E`Bn}{{}El}{{{Cb{Fj}}EfEh}Ej}1{GnCj}{Eh{{A`{Bb}}}}{{El{A`{{Dh{{A`{Bb}}}}}}}El}{{ElFl}El}{{ElF`{A`{{Dh{{A`{Bb}}}}}}}El}{{ElFd{Cb{{A`{Bb}}}}}El}{{ElFd}El}{{ElFd{C`{Ff}}{Cb{{A`{Bb}}}}}El}{{{A`{AbEj}}Eh}j}6{{Eb{A`{Bb}}EfEh}Ej}{DnDj}{{}Ef}{DjCb}{EhGn}??{{EfEh}Ej}0{{}El}{A`c{}}0000000000000000000000000000{A`Bn}00000000000000000000000{{{A`{Ej}}Eh}Bn}`{c{{Al{e}}}{}{}}00000000000000000000000000000{{}{{Al{c}}}{}}00000000000000000000000000000{A`An}00000000000000000000000000000{cDn{{Hn{Bn}}}}`{{{A`{Ej}}}{{Al{j{C`{I`}}}}}}{{GnEh}Gn}{{GnCj}Gn}<{{c{C`{Dj}}}Dl{{Hn{Bn}}}}{IbCb}{IdCb}{IfEd}{IhCb}{IjCb}{IlDn}{InCb}{J`Fh}{JbDn}{IlCb}{JdDn}{JfC`}{JhC`}{JjC`}{JlC`}{JnC`}{K`C`}{KbC`}{KdC`}{KfC`}{KhC`}{J`C`}{KjC`}{KlC`}{IbC`}{IdC`}{KnC`}{L`C`}{IhFd}{IjFd}{LbDn}{LdDn}{LfDn}{K`Cb}0{LhCb}{JjCb}{KlCb}{IhC`}{LjDn}{LlCb}{InEd}{LnDn}{M`Dn}{MbDn}{LhG`}{JnF`}{MdDn}:{MfDn}{MhC`}{MjMl}{MnMl}0{MhBn}{MjC`}{N`Ml}{N`Hb}{NbHd}{NbMl}36{{{A`{Ch}}EfEh{A`{Gn}}}{{Al{EjGl}}}}{{{A`{Nd}}{A`{Gn}}}{{Al{EnGl}}}}{{{A`{Bb}}}{{Al{FhGl}}}}{{{A`{Bb}}}{{Al{EbGl}}}}{{{A`{Bb}}{A`{Gn}}}{{Al{{C`{Gj}}Gl}}}}{{{A`{Bb}}{A`{Gn}}}{{Al{EnGl}}}}0{{{A`{Bb}}}{{Al{F`Gl}}}}1````{A`{{A`{c}}}{}}{{{A`{Ab}}}{{A`{Abc}}}{}}{{{A`{Nf}}}Nf}{{A`{A`{Abc}}}j{}}{{A`Bj}j}{{{A`{Nf}}{A`{Nf}}}Cj}{{{A`{Nf}}{A`{AbCl}}}Cn}0{GlNf}{cc{}}{{}c{}}{A`c{}}{A`Bn}{{{A`{Bb}}}{{Al{BnNf}}}}{{{A`{Bb}}Gn}{{Al{EjNf}}}}10{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{I`}}}I`}{{A`{A`{Abc}}}j{}}{{A`Bj}j}{{{A`{I`}}{A`{I`}}}Cj}{{{A`{I`}}{A`{AbCl}}}Cn}0??>>{{{A`{Nh}}{A`{En}}}{{Al{jI`}}}}{EbNh}?>;;::99{{{A`{Nh}}{A`{{Dh{En}}}}}{{Al{j{C`{I`}}}}}}{NjBn}0{NlBn}{NnC`}1{O`Bn}23{NnBn}1````>={{{A`{Dd}}}Dd}<;{{}Dd}{{{A`{Dd}}{A`{Dd}}}Cj}{{{A`{Dd}}{A`{AbCl}}}Cn}{cc{}}{{}c{}}{ObCj}{{{A`{Bb}}}{{Od{{A`{Bb}}{A`{Bb}}}}}}0{{{A`{Bb}}{A`{Bb}}}{{Od{{A`{Bb}}{A`{Bb}}}}}}11010111{{{A`{Bb}}}Bn}22{A`c{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{A`An}``````````````````````{A`{{A`{c}}}{}}0000000000{{{A`{Ab}}}{{A`{Abc}}}{}}0000000000{OfOh}{OjOl}{{}Of}{{}Oj}{ChC`}{{{A`{On}}}On}{{{A`{A@`}}}A@`}{{{A`{Cf}}}Cf}{{A`{A`{Abc}}}j{}}00{{A`Bj}j}00{{}Oh}8{{}Ol}8{{}A@b}{{{A`{A@d}}{A`{A@d}}}Cj}{{{A`{Nd}}{A`{Nd}}}Cj}{{{A`{Ch}}{A`{Ch}}}Cj}{{{A`{Cf}}{A`{Cf}}}Cj}{{{A`{A@d}}{A`{AbCl}}}Cn}{{{A`{Nd}}{A`{AbCl}}}Cn}0{{{A`{Ch}}{A`{AbCl}}}Cn}0{{{A`{Cf}}{A`{AbCl}}}Cn}{cc{}}0000000000{{}c{}}0000000000{NdA@d}{NdA@f}{ChA@f}{{}Of}{{}Oj}{{OlOh}A@b}``{ChCb}{{{A`{Ol}}{A`{Bb}}{A`{Oh}}}{{Od{{A`{Bb}}Ch}}}}{{{A`{A@b}}{A`{Bb}}}{{Od{{A`{Bb}}Ch}}}}{{{A`{Bb}}}{{Od{{A`{Bb}}Ch}}}}0{{{A`{Oh}}{A`{Bb}}}{{Od{{A`{Bb}}{C`{Nd}}}}}}{{{A`{Ol}}{A@f{Bb}}{A`{Bb}}{A`{Oh}}}{{Od{{A`{Bb}}Ch}}}}{{Of{A`{Bb}}}Of}{{Of{A`{Bb}}{A@h{{A@f{Bb}}{A`{Bb}}}{{Hh{{Od{{A`{Bb}}Nd}}}}}}}Of}{{Oj{A`{Bb}}{A@h{{A@f{Bb}}{A`{Bb}}{A`{Oh}}}{{Hh{{Od{{A`{Bb}}Ch}}}}}}}Oj}{{Oj{A`{Bb}}}Oj}3{{Of{A`{Bb}}On}Of}{{{A`{AbOf}}{A`{Bb}}On}{{A`{AbOf}}}}{A`c{}}00{{{A`{Ch}}}Bn}{{{A`{Ch}}{A`{Bb}}}Bn}{{{A`{Ch}}{A`{Bb}}Cj}Bn}{{{A`{Nd}}}Bn}{A`Bn}0{c{{Al{e}}}{}{}}0000000000{{}{{Al{c}}}{}}0000000000{A`An}0000000000{{OhCj}Oh}{{OfCj}Of}{{OlCj}Ol}{{OjCj}Oj}{{OfOn}Of}{{OjA@`}Oj}{{A@bCf}A@b}{{A@bDd}A@b}``````````````````````````````````````````````````````````````````````````````````{A@j{{A`{Bb}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Oh}{{{A`{A@l}}}A@l}{{{A`{A@j}}}A@j}{{A`{A`{Abc}}}j{}}0{{A`Bj}j}0{{}Ol}{{{A`{A@l}}{A`{A@l}}}Cj}{{{A`{A@j}}{A`{A@j}}}Cj}{{{A`{A@l}}{A`{AbCl}}}Cn}{{{A`{A@j}}{A`{AbCl}}}Cn}{cc{}}0{{{A`{A@l}}{A`{Abc}}}jHl}{{{A`{A@j}}{A`{Abc}}}jHl}{{}c{}}0{A@l{{A`{Bb}}}}{{}A@b}{A@lOn}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{A@n{{A`{Bb}}}}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{}Oh}{{{A`{AA`}}}AA`}{{{A`{A@n}}}A@n}{{A`{A`{Abc}}}j{}}0{{A`Bj}j}0{{}Ol}{{{A`{AA`}}{A`{AA`}}}Cj}{{{A`{A@n}}{A`{A@n}}}Cj}{{{A`{AA`}}{A`{AbCl}}}Cn}{{{A`{A@n}}{A`{AbCl}}}Cn}{cc{}}0{{{A`{AA`}}{A`{Abc}}}jHl}{{{A`{A@n}}{A`{Abc}}}jHl}{{}c{}}0{AA`{{A`{Bb}}}}{{}A@b}{AA`On}{A`c{}}0{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`An}0","D":"EDh","p":[[1,"i32"],[5,"AccClause",5],[8,"c_char",1883],[5,"AccClauseIterator",5],[1,"unit"],[5,"AccDirective",5],[5,"AccStringList",5],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",5],[5,"OmpClauseIterator",5],[5,"OmpStringList",5],[5,"OmpDirective",5],[6,"Result",1884,null,1],[5,"TypeId",1885],[6,"StepKind",105,1886],[1,"str"],[5,"DebugStep",105,1886],[6,"UserCommand",105,1887],[5,"DebugConfig",105],[1,"u8"],[5,"DebugSession",105,1886],[5,"String",1888],[5,"Vec",1889],[6,"Option",1890,null,1],[1,"usize"],[6,"Dialect",1298],[5,"Directive",1298,1891],[1,"bool"],[5,"Formatter",1892],[8,"Result",1892],[6,"DebugError",105],[5,"Error",1893],[6,"Language",1265],[8,"DebugResult",105],[1,"slice"],[5,"ArraySection",237,1894],[5,"Variable",237,1894],[6,"Expression",237,1895],[5,"ExpressionAst",237,1895],[6,"DirectiveKind",237,1896],[5,"Identifier",237,1894],[5,"SourceLocation",237,1897],[6,"Language",237,1897],[5,"DirectiveIR",237,1896],[5,"DirectiveBuilder",237,1898],[6,"ClauseData",237,1899],[6,"ReductionOperator",237,1899],[6,"MapType",237,1899],[6,"ScheduleKind",237,1899],[6,"ScheduleModifier",237,1899],[6,"DependType",237,1899],[6,"DefaultKind",237,1899],[6,"ProcBind",237,1899],[6,"MemoryOrder",237,1899],[6,"AtomicOp",237,1899],[6,"DeviceType",237,1899],[6,"LinearModifier",237,1899],[6,"LastprivateModifier",237,1899],[6,"OrderKind",237,1899],[6,"ClauseItem",237,1899],[6,"ConversionError",237,1900],[5,"ParserConfig",237,1895],[6,"ExpressionKind",237,1895],[6,"BinaryOperator",237,1895],[6,"UnaryOperator",237,1895],[1,"u32"],[17,"Output"],[10,"Fn",1901],[10,"Hasher",1902],[10,"Into",1903,null,1],[6,"ValidationError",1224],[15,"Aligned",1129],[15,"Allocate",1129],[15,"Allocator",1129],[15,"Schedule",1129],[15,"DistSchedule",1129],[15,"If",1129],[15,"Generic",1129],[15,"Depend",1129],[15,"Device",1129],[15,"Grainsize",1129],[15,"Private",1129],[15,"Firstprivate",1129],[15,"Lastprivate",1129],[15,"Shared",1129],[15,"Reduction",1129],[15,"Map",1129],[15,"UseDevicePtr",1129],[15,"UseDeviceAddr",1129],[15,"IsDevicePtr",1129],[15,"HasDeviceAddr",1129],[15,"Affinity",1129],[15,"Linear",1129],[15,"Copyin",1129],[15,"Copyprivate",1129],[15,"Safelen",1129],[15,"Simdlen",1129],[15,"ThreadLimit",1129],[15,"AtomicOperation",1129],[15,"Collapse",1129],[15,"Ordered",1129],[15,"NumThreads",1129],[15,"NumTeams",1129],[15,"NumTasks",1129],[15,"Priority",1129],[15,"Filter",1129],[15,"Call",1179],[15,"ArrayAccess",1179],[5,"Box",1904,null,1],[15,"Conditional",1179],[15,"BinaryOp",1179],[15,"UnaryOp",1179],[5,"Clause",1298,1905],[6,"TranslationError",1200],[5,"ValidationContext",1224],[15,"ConflictingClauses",1255],[15,"ClauseNotAllowed",1255],[15,"InvalidCombination",1255],[15,"MissingRequiredClause",1255],[1,"char"],[8,"IResult",1906],[5,"ClauseRegistryBuilder",1298,1905],[5,"ClauseRegistry",1298,1905],[5,"DirectiveRegistryBuilder",1298,1891],[5,"DirectiveRegistry",1298,1891],[6,"ClauseRule",1298,1905],[6,"DirectiveRule",1298,1891],[5,"Parser",1298],[6,"ClauseKind",1298,1905],[6,"Cow",1907],[1,"fn"],[6,"OpenAccDirective",1465],[6,"OpenAccClause",1465],[6,"OpenMpDirective",1581],[6,"OpenMpClause",1581]],"r":[[105,1886],[106,1886],[107,1886],[111,1886],[112,1886],[113,1886],[114,1886],[116,1886],[117,1887],[118,1887],[119,1887],[120,1887],[123,1887],[124,1887],[127,1886],[128,1887],[129,1887],[130,1887],[131,1887],[132,1887],[133,1887],[134,1886],[135,1886],[136,1887],[137,1886],[138,1886],[139,1886],[140,1886],[141,1887],[144,1886],[145,1886],[146,1886],[147,1887],[150,1886],[151,1886],[152,1887],[154,1886],[155,1886],[156,1887],[158,1886],[159,1886],[160,1887],[162,1886],[163,1886],[164,1886],[165,1886],[166,1886],[168,1886],[170,1908],[171,1886],[172,1887],[173,1886],[174,1886],[175,1886],[176,1886],[177,1886],[178,1887],[182,1886],[183,1886],[184,1886],[185,1887],[189,1887],[190,1886],[191,1886],[192,1886],[193,1887],[196,1886],[198,1886],[200,1886],[203,1886],[204,1886],[205,1886],[206,1886],[207,1887],[208,1887],[209,1886],[210,1886],[211,1886],[212,1886],[213,1886],[214,1887],[217,1886],[218,1886],[219,1886],[220,1886],[221,1886],[222,1887],[225,1886],[226,1886],[227,1886],[228,1887],[231,1886],[232,1886],[233,1886],[234,1887],[237,1899],[238,1899],[239,1899],[240,1895],[241,1895],[242,1899],[243,1899],[244,1899],[245,1899],[246,1896],[247,1899],[248,1896],[249,1895],[250,1899],[251,1895],[252,1894],[253,1896],[254,1896],[255,1896],[256,1896],[257,1896],[258,1899],[259,1899],[260,1899],[261,1896],[262,1896],[263,1896],[264,1899],[265,1899],[266,1896],[267,1896],[268,1896],[269,1896],[270,1896],[271,1895],[272,1895],[273,1899],[274,1895],[275,1895],[276,1899],[277,1895],[278,1899],[279,1895],[280,1897],[281,1895],[282,1896],[283,1896],[284,1899],[285,1899],[286,1899],[287,1899],[288,1899],[289,1895],[290,1899],[291,1899],[292,1895],[293,1900],[294,1899],[295,1899],[296,1897],[297,1896],[298,1899],[299,1896],[300,1896],[301,1896],[302,1896],[303,1896],[304,1896],[305,1899],[306,1899],[307,1899],[308,1899],[309,1899],[310,1899],[311,1896],[312,1895],[313,1899],[314,1899],[315,1899],[316,1898],[317,1896],[318,1896],[319,1896],[320,1899],[321,1896],[322,1896],[323,1896],[324,1896],[325,1896],[326,1896],[327,1896],[328,1896],[329,1895],[330,1896],[331,1896],[332,1899],[333,1896],[334,1896],[335,1896],[336,1895],[337,1896],[338,1895],[339,1899],[340,1899],[341,1895],[342,1895],[343,1899],[344,1899],[345,1899],[346,1896],[347,1896],[348,1896],[349,1897],[350,1899],[351,1896],[352,1895],[353,1899],[354,1899],[355,1896],[356,1895],[357,1899],[358,1899],[359,1899],[360,1894],[361,1899],[362,1895],[363,1899],[364,1899],[365,1899],[366,1895],[367,1896],[368,1896],[369,1900],[370,1899],[371,1899],[372,1897],[373,1899],[374,1899],[375,1895],[376,1899],[377,1899],[378,1899],[379,1895],[380,1899],[381,1896],[382,1895],[383,1899],[384,1899],[385,1896],[386,1896],[387,1896],[388,1899],[389,1896],[390,1899],[391,1899],[392,1896],[393,1899],[394,1899],[395,1895],[396,1899],[397,1895],[398,1899],[399,1899],[400,1895],[401,1895],[402,1899],[403,1899],[404,1899],[405,1896],[406,1899],[407,1899],[408,1899],[409,1895],[410,1899],[411,1899],[412,1899],[413,1896],[414,1899],[415,1896],[416,1896],[417,1896],[418,1896],[419,1896],[420,1896],[421,1896],[422,1896],[423,1896],[424,1896],[425,1896],[426,1896],[427,1896],[428,1896],[429,1896],[430,1895],[431,1895],[432,1895],[433,1899],[434,1899],[435,1899],[436,1899],[437,1899],[438,1899],[439,1899],[440,1899],[441,1899],[442,1899],[443,1899],[444,1899],[445,1899],[446,1896],[447,1896],[448,1899],[449,1899],[450,1896],[451,1899],[452,1899],[453,1899],[454,1896],[455,1896],[456,1896],[457,1899],[458,1899],[459,1899],[460,1895],[461,1895],[462,1899],[463,1896],[464,1899],[465,1896],[466,1899],[467,1899],[468,1897],[469,1896],[470,1899],[471,1899],[472,1896],[473,1895],[474,1899],[475,1896],[476,1896],[477,1896],[478,1896],[479,1896],[480,1896],[481,1896],[482,1896],[483,1896],[484,1896],[485,1896],[486,1896],[487,1896],[488,1896],[489,1896],[490,1896],[491,1896],[492,1896],[493,1896],[494,1896],[495,1896],[496,1896],[497,1896],[498,1896],[499,1896],[500,1896],[501,1896],[502,1896],[503,1896],[504,1896],[505,1896],[506,1896],[507,1896],[508,1896],[509,1896],[510,1896],[511,1896],[512,1896],[513,1896],[514,1896],[515,1896],[516,1896],[517,1896],[518,1896],[519,1896],[520,1899],[521,1896],[522,1896],[523,1899],[524,1899],[525,1895],[526,1895],[527,1896],[528,1897],[529,1900],[530,1900],[531,1895],[532,1896],[533,1900],[534,1899],[535,1899],[536,1899],[537,1899],[538,1899],[539,1224],[540,1224],[541,1894],[542,1899],[543,1896],[544,1896],[545,1899],[546,1894],[547,1894],[548,1895],[549,1896],[550,1895],[551,1894],[552,1896],[553,1898],[554,1899],[555,1899],[556,1899],[557,1899],[558,1899],[559,1899],[560,1899],[561,1899],[562,1899],[563,1899],[564,1899],[565,1899],[566,1899],[567,1899],[568,1899],[569,1896],[570,1896],[571,1900],[572,1895],[573,1895],[574,1895],[575,1895],[576,1895],[577,1895],[578,1897],[579,1897],[580,1894],[581,1894],[582,1894],[583,1898],[584,1899],[585,1899],[586,1899],[587,1899],[588,1899],[589,1899],[590,1899],[591,1899],[592,1899],[593,1899],[594,1899],[595,1899],[596,1899],[597,1899],[598,1899],[599,1896],[600,1896],[601,1900],[602,1895],[603,1895],[604,1895],[605,1895],[606,1895],[607,1895],[608,1897],[609,1897],[610,1894],[611,1894],[612,1894],[613,1898],[614,1896],[615,1899],[616,1899],[617,1899],[618,1899],[619,1899],[620,1899],[621,1899],[622,1899],[623,1899],[624,1899],[625,1899],[626,1899],[627,1899],[628,1899],[629,1899],[630,1896],[631,1896],[632,1900],[633,1895],[634,1895],[635,1895],[636,1895],[637,1895],[638,1895],[639,1897],[640,1897],[641,1894],[642,1894],[643,1894],[644,1899],[645,1899],[646,1899],[647,1899],[648,1899],[649,1899],[650,1899],[651,1899],[652,1899],[653,1899],[654,1899],[655,1899],[656,1899],[657,1899],[658,1899],[659,1896],[660,1896],[661,1900],[662,1895],[663,1895],[664,1895],[665,1895],[666,1895],[667,1895],[668,1897],[669,1897],[670,1894],[671,1894],[672,1894],[673,1899],[674,1899],[675,1899],[676,1899],[677,1899],[678,1899],[679,1899],[680,1899],[681,1899],[682,1899],[683,1899],[684,1899],[685,1899],[686,1899],[687,1899],[688,1896],[689,1896],[690,1900],[691,1895],[692,1895],[693,1895],[694,1895],[695,1895],[696,1895],[697,1897],[698,1897],[699,1894],[700,1894],[701,1894],[702,1898],[703,1897],[705,1191],[706,1896],[707,1898],[708,1895],[709,1897],[710,1897],[711,1898],[712,1898],[713,1898],[714,1894],[715,1899],[716,1899],[717,1899],[718,1899],[719,1899],[720,1899],[721,1899],[722,1899],[723,1899],[724,1899],[725,1899],[726,1899],[727,1899],[728,1899],[729,1899],[730,1896],[731,1896],[732,1900],[733,1895],[734,1895],[735,1895],[736,1895],[737,1895],[738,1895],[739,1897],[740,1897],[741,1894],[742,1894],[743,1894],[744,1896],[745,1896],[746,1898],[747,1899],[748,1899],[749,1899],[750,1899],[751,1899],[752,1899],[753,1899],[754,1899],[755,1899],[756,1899],[757,1899],[758,1899],[759,1899],[760,1899],[761,1899],[762,1899],[763,1899],[764,1899],[765,1899],[766,1899],[767,1899],[768,1899],[769,1899],[770,1899],[771,1899],[772,1899],[773,1899],[774,1899],[775,1899],[776,1899],[777,1896],[778,1896],[779,1896],[780,1896],[781,1900],[782,1900],[783,1895],[784,1895],[785,1895],[786,1895],[787,1895],[788,1895],[789,1895],[790,1897],[791,1897],[792,1897],[793,1897],[794,1894],[795,1894],[796,1894],[797,1894],[798,1894],[799,1894],[800,1895],[801,1898],[802,1896],[803,1898],[804,1899],[805,1899],[806,1899],[807,1899],[808,1899],[809,1899],[810,1899],[811,1899],[812,1899],[813,1899],[814,1899],[815,1899],[816,1899],[817,1899],[818,1899],[819,1899],[820,1899],[821,1899],[822,1896],[823,1896],[824,1900],[825,1895],[826,1895],[827,1895],[828,1895],[829,1895],[830,1895],[831,1897],[832,1897],[833,1894],[834,1894],[835,1894],[836,1894],[837,1894],[838,1894],[839,1894],[840,1894],[841,1896],[842,1896],[843,1899],[844,1899],[845,1899],[846,1899],[847,1899],[848,1899],[849,1899],[850,1899],[851,1899],[852,1899],[853,1899],[854,1899],[855,1899],[856,1896],[857,1895],[858,1895],[859,1897],[860,1897],[861,1894],[862,1898],[863,1898],[864,1899],[865,1899],[866,1899],[867,1899],[868,1899],[869,1899],[870,1899],[871,1899],[872,1899],[873,1899],[874,1899],[875,1899],[876,1899],[877,1899],[878,1899],[879,1896],[880,1896],[881,1900],[882,1895],[883,1895],[884,1895],[885,1895],[886,1895],[887,1895],[888,1897],[889,1897],[890,1894],[891,1894],[892,1894],[893,1896],[894,1894],[895,1894],[896,1897],[897,1899],[898,1896],[899,1899],[900,1899],[901,1899],[902,1899],[903,1897],[904,1899],[905,1899],[906,1899],[907,1896],[908,1899],[909,1899],[910,1899],[911,1896],[912,1895],[913,1899],[914,1899],[915,1899],[916,1894],[917,1899],[918,1899],[919,1896],[920,1894],[921,1896],[922,1896],[923,1896],[924,1896],[925,1896],[926,1896],[927,1895],[928,1896],[929,1895],[930,1895],[931,1894],[932,1897],[933,1896],[934,1894],[935,1898],[936,1896],[937,1894],[938,1894],[939,1896],[940,1898],[941,1896],[942,1895],[943,1895],[944,1897],[945,1894],[946,1894],[947,1894],[948,1898],[949,1898],[950,1898],[951,1898],[952,1898],[953,1895],[954,1898],[955,1896],[956,1898],[957,1895],[958,1897],[959,1898],[960,1898],[961,1898],[962,1898],[963,1898],[964,1898],[965,1896],[966,1898],[967,1896],[968,1894],[969,1897],[970,1894],[971,1895],[972,1898],[973,1898],[974,1896],[975,1896],[976,1898],[977,1899],[978,1899],[979,1899],[980,1899],[981,1899],[982,1899],[983,1899],[984,1899],[985,1899],[986,1899],[987,1899],[988,1899],[989,1899],[990,1899],[991,1899],[992,1896],[993,1896],[994,1900],[995,1895],[996,1895],[997,1895],[998,1895],[999,1895],[1000,1895],[1001,1897],[1002,1897],[1003,1894],[1004,1894],[1005,1894],[1006,1899],[1007,1899],[1008,1899],[1009,1899],[1010,1899],[1011,1899],[1012,1899],[1013,1899],[1014,1899],[1015,1899],[1016,1899],[1017,1899],[1018,1899],[1019,1899],[1020,1899],[1021,1896],[1022,1896],[1023,1900],[1024,1895],[1025,1897],[1026,1897],[1027,1894],[1028,1894],[1029,1894],[1030,1896],[1032,1898],[1033,1899],[1034,1899],[1035,1899],[1036,1899],[1037,1899],[1038,1899],[1039,1899],[1040,1899],[1041,1899],[1042,1899],[1043,1899],[1044,1899],[1045,1899],[1046,1899],[1047,1899],[1048,1896],[1049,1896],[1050,1900],[1051,1895],[1052,1895],[1053,1895],[1054,1895],[1055,1895],[1056,1895],[1057,1897],[1058,1897],[1059,1894],[1060,1894],[1061,1894],[1062,1898],[1063,1899],[1064,1899],[1065,1899],[1066,1899],[1067,1899],[1068,1899],[1069,1899],[1070,1899],[1071,1899],[1072,1899],[1073,1899],[1074,1899],[1075,1899],[1076,1899],[1077,1899],[1078,1896],[1079,1896],[1080,1900],[1081,1895],[1082,1895],[1083,1895],[1084,1895],[1085,1895],[1086,1895],[1087,1897],[1088,1897],[1089,1894],[1090,1894],[1091,1894],[1092,1898],[1093,1899],[1094,1899],[1095,1899],[1096,1899],[1097,1899],[1098,1899],[1099,1899],[1100,1899],[1101,1899],[1102,1899],[1103,1899],[1104,1899],[1105,1899],[1106,1899],[1107,1899],[1108,1896],[1109,1896],[1110,1900],[1111,1895],[1112,1895],[1113,1895],[1114,1895],[1115,1895],[1116,1895],[1117,1897],[1118,1897],[1119,1894],[1120,1894],[1121,1894],[1122,1895],[1124,1896],[1125,1895],[1126,1895],[1127,1895],[1128,1894],[1298,1905],[1299,1905],[1300,1905],[1301,1905],[1302,1905],[1303,1905],[1304,1905],[1305,1905],[1306,1891],[1308,1891],[1309,1891],[1310,1891],[1311,1891],[1312,1905],[1313,1891],[1316,1905],[1317,1905],[1319,1905],[1320,1905],[1321,1905],[1322,1891],[1323,1891],[1325,1905],[1326,1905],[1327,1905],[1328,1891],[1329,1891],[1331,1905],[1332,1905],[1333,1891],[1334,1891],[1336,1905],[1337,1905],[1338,1905],[1339,1891],[1340,1891],[1342,1905],[1343,1891],[1344,1905],[1345,1891],[1346,1891],[1347,1905],[1348,1891],[1350,1905],[1351,1891],[1353,1905],[1354,1891],[1356,1905],[1357,1905],[1358,1891],[1359,1891],[1361,1905],[1362,1905],[1363,1891],[1365,1905],[1366,1905],[1367,1905],[1368,1891],[1369,1891],[1371,1905],[1372,1905],[1373,1891],[1374,1891],[1376,1905],[1377,1905],[1378,1905],[1379,1891],[1380,1891],[1382,1905],[1383,1905],[1384,1891],[1385,1891],[1387,1905],[1388,1905],[1389,1905],[1390,1891],[1391,1891],[1393,1905],[1394,1905],[1395,1891],[1396,1905],[1397,1891],[1401,1891],[1402,1891],[1406,1905],[1407,1891],[1408,1905],[1409,1905],[1410,1891],[1411,1891],[1412,1905],[1413,1905],[1414,1905],[1415,1905],[1416,1891],[1418,1891],[1419,1891],[1420,1891],[1421,1905],[1422,1905],[1423,1891],[1424,1905],[1425,1905],[1426,1891],[1427,1891],[1429,1905],[1430,1905],[1431,1905],[1432,1891],[1433,1891],[1435,1905],[1436,1905],[1437,1891],[1438,1891],[1440,1905],[1441,1905],[1442,1905],[1443,1891],[1444,1891],[1446,1905],[1447,1905],[1448,1891],[1449,1891],[1451,1905],[1452,1905],[1453,1905],[1454,1891],[1455,1891],[1457,1905],[1458,1905],[1459,1891],[1460,1891],[1461,1905],[1462,1891]],"b":[[179,"impl-Display-for-DebugError"],[180,"impl-Debug-for-DebugError"],[747,"impl-Debug-for-ReductionOperator"],[748,"impl-Display-for-ReductionOperator"],[749,"impl-Display-for-MapType"],[750,"impl-Debug-for-MapType"],[751,"impl-Debug-for-ScheduleKind"],[752,"impl-Display-for-ScheduleKind"],[753,"impl-Display-for-ScheduleModifier"],[754,"impl-Debug-for-ScheduleModifier"],[755,"impl-Display-for-DependType"],[756,"impl-Debug-for-DependType"],[757,"impl-Debug-for-DefaultKind"],[758,"impl-Display-for-DefaultKind"],[759,"impl-Debug-for-ProcBind"],[760,"impl-Display-for-ProcBind"],[761,"impl-Display-for-MemoryOrder"],[762,"impl-Debug-for-MemoryOrder"],[763,"impl-Display-for-AtomicOp"],[764,"impl-Debug-for-AtomicOp"],[765,"impl-Display-for-DeviceType"],[766,"impl-Debug-for-DeviceType"],[767,"impl-Display-for-LinearModifier"],[768,"impl-Debug-for-LinearModifier"],[769,"impl-Debug-for-LastprivateModifier"],[770,"impl-Display-for-LastprivateModifier"],[771,"impl-Display-for-OrderKind"],[772,"impl-Debug-for-OrderKind"],[773,"impl-Display-for-ClauseItem"],[774,"impl-Debug-for-ClauseItem"],[775,"impl-Debug-for-ClauseData"],[776,"impl-Display-for-ClauseData"],[777,"impl-Debug-for-DirectiveKind"],[778,"impl-Display-for-DirectiveKind"],[779,"impl-Display-for-DirectiveIR"],[780,"impl-Debug-for-DirectiveIR"],[781,"impl-Display-for-ConversionError"],[782,"impl-Debug-for-ConversionError"],[784,"impl-Display-for-Expression"],[785,"impl-Debug-for-Expression"],[790,"impl-Display-for-SourceLocation"],[791,"impl-Debug-for-SourceLocation"],[792,"impl-Debug-for-Language"],[793,"impl-Display-for-Language"],[794,"impl-Debug-for-Identifier"],[795,"impl-Display-for-Identifier"],[796,"impl-Debug-for-ArraySection"],[797,"impl-Display-for-ArraySection"],[798,"impl-Debug-for-Variable"],[799,"impl-Display-for-Variable"],[818,"impl-From%3CVariable%3E-for-ClauseItem"],[819,"impl-From%3CIdentifier%3E-for-ClauseItem"],[820,"impl-From%3CExpression%3E-for-ClauseItem"],[833,"impl-From%3CString%3E-for-Identifier"],[834,"impl-From%3C%26str%3E-for-Identifier"],[837,"impl-From%3C%26str%3E-for-Variable"],[838,"impl-From%3CString%3E-for-Variable"],[839,"impl-From%3CIdentifier%3E-for-Variable"],[1210,"impl-Display-for-TranslationError"],[1211,"impl-Debug-for-TranslationError"],[1238,"impl-Display-for-ValidationError"],[1239,"impl-Debug-for-ValidationError"],[1366,"impl-Debug-for-Clause%3C\'a%3E"],[1367,"impl-Display-for-Clause%3C\'_%3E"],[1368,"impl-Debug-for-Directive%3C\'a%3E"],[1369,"impl-Display-for-Directive%3C\'_%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALcEPwAEAAEAHgAPAFIAFwCKABgAqAAAAKoAAACsAAEAsAAGALwAAADGAAAAyAAAAMoAAQDVAAQA3AARAPAAAgD6AAAAEgEGACsBAAA5AQAASgEAAFEBAABhAQAAZQEAAHgBAAB7AQIAfwEAAIcBAACKAQIAjgEBAJEBAQCaAQAAzQEBANoBAQAcAgEAKgI7AGgCVgDCAgAAzAIcAOwCKgAYAwEAGwMCAB8DAAAzAwIAQgMBAEYDAgBMAxIA0gM0AAkEWQBqBD0AtQQIAMAEAQDGBAIAzwQJAN8EBwDoBAkA9gQHAA8FTAByBRkAjgWOAB8GAQAjBicBTQcBAFEHCgA=","P":[[29,"T"],[53,"U"],[61,""],[81,"U,T"],[89,"U"],[97,""],[138,"T"],[150,""],[154,"T"],[158,""],[182,"T"],[187,""],[188,"T"],[189,""],[190,"U"],[196,""],[212,"T"],[216,""],[219,"U,T"],[225,"U"],[231,""],[553,"T"],[613,""],[644,"T"],[673,""],[706,"F"],[707,""],[744,"F"],[746,""],[803,"T"],[818,""],[821,"T"],[833,""],[835,"T"],[837,""],[840,"T"],[841,"F"],[842,""],[843,"__H"],[862,""],[863,"U"],[893,""],[977,"T"],[1006,""],[1032,"U,T"],[1062,"U"],[1092,""],[1204,"T"],[1206,""],[1207,"T"],[1208,""],[1213,"T"],[1214,"U"],[1215,"T"],[1216,""],[1221,"U,T"],[1222,"U"],[1223,""],[1230,"T"],[1234,""],[1235,"T"],[1236,""],[1240,"T"],[1242,"U"],[1244,""],[1246,"T"],[1247,""],[1248,"U,T"],[1250,"U"],[1252,""],[1269,"T"],[1271,""],[1272,"T"],[1273,""],[1277,"T"],[1278,"U"],[1279,""],[1294,"T"],[1295,"U,T"],[1296,"U"],[1297,""],[1320,"T"],[1342,""],[1350,"T"],[1353,""],[1371,"T"],[1382,"U"],[1393,""],[1415,"T"],[1418,""],[1424,"U,T"],[1435,"U"],[1446,""],[1548,"T"],[1552,""],[1555,"T"],[1557,""],[1564,"T"],[1566,"__H"],[1568,"U"],[1570,""],[1573,"T"],[1575,"U,T"],[1577,"U"],[1579,""],[1850,"T"],[1854,""],[1857,"T"],[1859,""],[1866,"T"],[1868,"__H"],[1870,"U"],[1872,""],[1875,"T"],[1877,"U,T"],[1879,"U"],[1881,""]]}],["roup_debug",{"t":"PPPGNNHHNNNHHNNN","n":["C","FortranFixed","FortranFree","InputLanguage","borrow","borrow_mut","detect_language","detect_openacc_language","fmt","from","into","main","print_usage","try_from","try_into","type_id"],"q":[[0,"roup_debug"],[16,"roup::parser"],[17,"alloc::string"],[18,"core::result"],[19,"core::fmt"],[20,"core::any"]],"i":"j00`00``000``000","f":"````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}{{A`{{l{hj}}n}}}}{{{b{f}}}{{A`{{l{jn}}n}}}}{{{b{j}}{b{dAb}}}Ad}{cc{}}{{}c{}}{{}Af}{{{b{f}}}Af}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{bAh}","D":"f","p":[[1,"reference",null,null,1],[0,"mut"],[1,"str"],[6,"Dialect",16],[6,"InputLanguage",0],[1,"tuple",null,null,1],[5,"String",17],[6,"Result",18,null,1],[5,"Formatter",19],[8,"Result",19],[1,"unit"],[5,"TypeId",20]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA0AAgABAAgADAAEAA==","P":[[4,"T"],[6,""],[9,"T"],[10,"U"],[11,""],[13,"U,T"],[14,"U"],[15,""]]}],["roup_roundtrip",{"t":"PGPPGPPNNNNHNNNNNNHNNNNNN","n":["C","Dialect","FortranFixed","FortranFree","InputLanguage","OpenACC","OpenMP","borrow","","borrow_mut","","detect_language","fmt","","from","","into","","main","try_from","","try_into","","type_id",""],"q":[[0,"roup_roundtrip"],[25,"alloc::string"],[26,"core::result"],[27,"core::fmt"],[28,"core::any"]],"i":"h`00`A`00101`010101`010101","f":"```````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}{b{f}}}{{n{{l{hj}}j}}}}{{{b{A`}}{b{dAb}}}Ad}{{{b{h}}{b{dAb}}}Ad}{cc{}}0{{}c{}}0{{}Af}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{bAh}0","D":"h","p":[[1,"reference",null,null,1],[0,"mut"],[1,"str"],[6,"InputLanguage",0],[5,"String",25],[1,"tuple",null,null,1],[6,"Result",26,null,1],[6,"Dialect",0],[5,"Formatter",27],[8,"Result",27],[1,"unit"],[5,"TypeId",28]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABUAAgAAAA4AEwAGAA==","P":[[7,"T"],[11,""],[14,"T"],[16,"U"],[18,""],[19,"U,T"],[21,"U"],[23,""]]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1230,51712,927,944,173]}