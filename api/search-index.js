var searchIndex = new Map(JSON.parse('[["gen",{"t":"CHSSSHHHHHHHHH","n":["constants_gen","main","FNV_OFFSET_BASIS","FNV_PRIME","UNKNOWN_KIND","calculate_checksum","extract_checksum_from_header","find_matches_in_expr","find_matches_in_stmts","normalize_constant_name","parse_clause_arm","parse_clause_mappings","parse_directive_arm","parse_directive_mappings"],"q":[[0,"gen"],[2,"gen::constants_gen"],[14,"alloc::string"],[15,"core::option"],[16,"syn::expr"],[17,"core::ops::function"],[18,"syn::stmt"],[19,"alloc::vec"]],"i":"``````````````","f":"`{{}b}{{}d}0{{}f}{{{n{{l{{j{hf}}}}}}{n{{l{{j{hf}}}}}}}d}{{{n{A`}}}{{Ab{d}}}}{{{n{Ad}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{{l{Al}}}}{n{Afc}}}b{{Aj{{n{{l{Ah}}}}}}}}{{{n{A`}}}h}{{{n{Ah}}}{{Ab{{j{hf}}}}}}{{}{{An{{j{hf}}}}}}10","D":"Aj","p":[[1,"unit"],[1,"u64"],[1,"i32"],[5,"String",14],[1,"tuple",null,null,1],[1,"slice"],[1,"reference",null,null,1],[1,"str"],[6,"Option",15,null,1],[6,"Expr",16],[0,"mut"],[5,"Arm",16],[10,"FnMut",17],[6,"Stmt",18],[5,"Vec",19]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAIABAA=","P":[[7,"F"],[9,""]]}],["roup",{"t":"CCCCFFFFSSSNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHHHHHHHNNNNNNNNNNNNPPPPPPPPPPPPPPPFPPPPPPGPPPPPPPPPPPPGPPPPPPPPPPPPGGPPPPPPGPPPPPPPPPPPPGPPGPPPPGPFFGPPPPPPPPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPGPPGPPPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPFPPPPGPPPGPPPPPPPPPPGGPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPEEFPPPPNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHHHHHHHHHPPPGNNNNNNNNNNNNNHHHHNNNPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOPPPGNNNNNNNNNNHHHHHHHHHHHHHHHNNNNPPFGFFGPPGFFFGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNCCNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNNTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNHNNNNNNHNNNNNNNNNNNHNNNNNNNNN","n":["c_api","ir","lexer","parser","OmpClause","OmpClauseIterator","OmpDirective","OmpStringList","ROUP_LANG_C","ROUP_LANG_FORTRAN_FIXED","ROUP_LANG_FORTRAN_FREE","borrow","","","","borrow_mut","","","","from","","","","into","","","","roup_clause_default_data_sharing","roup_clause_free","roup_clause_iterator_free","roup_clause_iterator_next","roup_clause_kind","roup_clause_reduction_operator","roup_clause_schedule_kind","roup_clause_variables","roup_convert_language","roup_directive_clause_count","roup_directive_clauses_iter","roup_directive_free","roup_directive_kind","roup_directive_name","roup_parse","roup_parse_with_language","roup_string_free","roup_string_list_free","roup_string_list_get","roup_string_list_len","try_from","","","","try_into","","","","type_id","","","","AcqRel","Acquire","Add","","AddressOf","Affinity","Aligned","Alloc","Allocate","","Allocator","Allocators","And","Any","ArrayAccess","ArraySection","Assume","Assumes","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicOp","AtomicOperation","AtomicRead","AtomicUpdate","AtomicWrite","Auto","Bare","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","BinaryOp","BinaryOperator","BitwiseAnd","","BitwiseNot","BitwiseOr","","BitwiseXor","","C","Call","Cancel","CancellationPoint","Capture","ClauseData","ClauseItem","Close","Collapse","Complex","Concurrent","Conditional","","ConversionError","Copyin","Copyprivate","Cpp","Critical","Custom","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","DefaultKind","Delete","Depend","DependType","Depobj","","Deref","Device","DeviceType","","DirectiveBuilder","DirectiveIR","DirectiveKind","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Div","Do","DoSimd","Dynamic","EndDeclareTarget","EndDeclareVariant","Eq","Error","Expression","","","ExpressionAst","ExpressionKind","Filter","Firstprivate","","Flush","For","ForSimd","Fortran","From","Fuse","Ge","Generic","Grainsize","Groupprivate","Gt","Guided","HasDeviceAddr","Host","Identifier","","","If","In","Inout","IntLiteral","Interchange","Interop","InvalidClauseSyntax","IsDevicePtr","ItemList","Language","Lastprivate","LastprivateModifier","Le","Linear","LinearModifier","LogicalAnd","LogicalNot","LogicalOr","Loop","Lt","Map","MapType","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","","Max","MemoryOrder","Metadirective","Min","MinusEqual","Mod","Monotonic","Mul","Multiply","Mutexinoutset","Ne","Negate","Nohost","None","Nonmonotonic","Nothing","NumTasks","NumTeams","NumThreads","Or","Order","OrderKind","Ordered","","Out","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","ParallelWorkshare","Parenthesized","Parsed","ParserConfig","Primary","Priority","Private","","ProcBind","","Read","Reduction","ReductionOperator","Ref","Relaxed","Release","","Requires","Reverse","Runtime","Safelen","Scan","Schedule","ScheduleKind","ScheduleModifier","Scope","Section","Sections","SeqCst","Shared","","ShiftLeft","ShiftRight","Simd","","Simdlen","Single","Sink","Source","SourceLocation","Split","Spread","Static","Stripe","Sub","Subtract","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Tile","To","ToFrom","UnaryOp","UnaryOperator","Unknown","","UnknownClause","UnknownDirective","Unparsed","Unroll","Unsupported","Update","UseDeviceAddr","UseDevicePtr","Uval","Val","ValidationContext","ValidationError","Variable","","Workdistribute","Workshare","Write","all","array_sections","as_ast","as_str","","","barrier","borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build","clauses","clone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","collapse","column","convert","convert_directive","count_clauses","default","","","","default_none","default_shared","depend","dimensions","eq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","filter_clauses","find_clause","firstprivate","fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","for_language","for_loop","","from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has_clause","has_structured_block","hash","","","","","","","","","","","","","","","","","","","if_clause","into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","into_language","is_all","is_array","is_c_family","is_collapse","is_declare","is_default","is_depend","is_device","is_firstprivate","is_fortran","is_if","is_lastprivate","is_linear","is_loop","is_map","is_num_threads","is_ordered","is_parallel","is_parsed","is_private","is_proc_bind","is_reduction","is_scalar","is_schedule","is_shared","is_simd","is_single_index","is_synchronization","is_target","is_task","is_teams","is_worksharing","kind","","language","","language_semantics_enabled","length","line","location","lower_bound","map","name","","","name_for_language","new","","","","","","","","nowait","num_threads","num_threads_expr","ordered","ordered_n","original_source","parallel","","parallel_for","parse_expressions","pragma_prefix","private","proc_bind","reduction","schedule","schedule_simple","schedule_with_modifiers","set_language","shared","simple","single_index","start","stride","string_only","target","task","taskwait","taskyield","teams","to_owned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to_string","","","","","","","","","","","","","","","","","","","","","","","","to_string_for_language","translate","try_from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","try_into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unparsed","validate","","with_language","with_language_semantics","with_parsing","with_sections","alignment","allocator","","chunk_size","","condition","data","depend_type","device_num","directive_name","grain","items","","","","","","","","","","","","","","","","","kind","","length","","limit","map_type","mapper","memory_order","modifier","","modifiers","n","","name","num","","","op","operator","priority","step","thread_num","args","array","condition","else_expr","function","indices","left","op","","operand","right","then_expr","convert_directive","parse_clause_data","parse_depend_type","parse_directive_kind","parse_identifier_list","parse_linear_clause","parse_map_clause","parse_reduction_operator","parse_schedule_clause","ConversionError","EmptyInput","ParseError","TranslationError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","to_owned","to_string","translate_c_to_fortran","translate_c_to_fortran_ir","translate_fortran_to_c","translate_fortran_to_c_ir","try_from","try_into","type_id","ClauseNotAllowed","ConflictingClauses","InvalidCombination","MissingRequiredClause","ValidationContext","ValidationError","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","","from","","into","","is_clause_allowed","new","to_owned","to_string","try_from","","try_into","","type_id","","validate_all","clause1","clause2","clause_name","clauses","directive","","reason","","","required_clause","C","FortranFixed","FortranFree","Language","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","from","into","is_identifier_char","lex_acc","lex_clause","lex_dialect_keyword","lex_directive","lex_fortran_fixed_sentinel","lex_fortran_fixed_sentinel_with_prefix","lex_fortran_free_sentinel","lex_fortran_free_sentinel_with_prefix","lex_identifier_token","lex_omp","lex_pragma","normalize_fortran_identifier","skip_space1_and_comments","skip_space_and_comments","to_owned","try_from","try_into","type_id","Bare","","Clause","ClauseKind","ClauseRegistry","ClauseRegistryBuilder","ClauseRule","Custom","","Dialect","Directive","DirectiveRegistry","DirectiveRegistryBuilder","DirectiveRule","Flexible","Generic","OpenAcc","OpenMp","Parenthesized","","Parser","Unsupported","borrow","","","","","","","","","","","borrow_mut","","","","","","","","","","","build","","builder","","clauses","clone","","","clone_into","","","clone_to_uninit","","","default","","","","","eq","","","","fmt","","","","","","from","","","","","","","","","","","into","","","","","","","","","","","kind","name","","new","","","openacc","openmp","parse","","parse_acc_directive","parse_omp_directive","parse_sequence","parse_with_name","register_bare","register_custom","","register_generic","register_parenthesized","register_with_rule","register_with_rule_mut","to_owned","","","to_pragma_string","to_pragma_string_with_prefix","to_source_string","to_string","","try_from","","","","","","","","","","","try_into","","","","","","","","","","","type_id","","","","","","","","","","","with_case_insensitive","","","","with_default_rule","","with_dialect","with_language","ALL","","Async","Atomic","Attach","Auto","Bind","Cache","Capture","Collapse","Copy","Copyin","Copyout","Create","Data","Declare","Default","DefaultAsync","Delete","Detach","Device","DeviceNum","DeviceResident","DeviceType","Deviceptr","End","EnterData","EnterDataUnderscore","ExitData","ExitDataUnderscore","Finalize","Firstprivate","Gang","Host","HostData","HostDataSpace","If","IfPresent","Independent","Init","Kernels","KernelsLoop","Link","Loop","NoCreate","Nohost","NumGangs","NumWorkers","OpenAccClause","OpenAccDirective","Parallel","ParallelLoop","Present","Private","Read","Reduction","Routine","SelfClause","Seq","Serial","SerialLoop","Set","Shutdown","Tile","Update","","UseDevice","Vector","VectorLength","Wait","","Worker","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id","","ALL","","Absent","AcqRel","Acquire","AdjustArgs","Affinity","Align","Aligned","Allocate","","Allocator","Allocators","AppendArgs","Apply","Assume","Assumes","At","Atomic","AtomicCapture","AtomicCompareCapture","AtomicDefaultMemOrder","AtomicRead","AtomicUpdate","AtomicWrite","Barrier","BeginAssumes","BeginDeclareTarget","BeginDeclareVariant","BeginMetadirective","Bind","Cancel","CancellationPoint","Capture","Collapse","Collector","Combiner","Compare","Contains","Copyin","Copyprivate","Counts","Critical","DeclareInduction","DeclareMapper","DeclareReduction","DeclareSimd","DeclareTarget","DeclareVariant","Default","Defaultmap","Depend","Depobj","Destroy","Detach","Device","DeviceResident","DeviceSafesync","DeviceType","Dispatch","DistSchedule","Distribute","DistributeParallelDo","DistributeParallelDoSimd","DistributeParallelFor","DistributeParallelForSimd","DistributeParallelLoop","DistributeParallelLoopSimd","DistributeSimd","Do","DoSimd","Doacross","DynamicAllocators","EndAssumes","EndDeclareTarget","EndDeclareVariant","Enter","Error","Exclusive","Fail","Filter","Final","Firstprivate","Flush","For","ForSimd","From","Full","Fuse","Grainsize","GraphId","GraphReset","Groupprivate","HasDeviceAddr","Hint","Holds","If","InReduction","Inbranch","Inclusive","Indirect","Induction","Inductor","Init","InitComplete","Initializer","Interchange","Interop","","IsDevicePtr","Label","Lastprivate","Linear","Link","Local","Loop","Looprange","Map","Masked","MaskedTaskloop","MaskedTaskloopSimd","Master","MasterTaskloop","MasterTaskloopSimd","Match","Memscope","Mergeable","Message","Metadirective","NoOpenmp","NoOpenmpConstructs","NoOpenmpRoutines","NoParallelism","Nocontext","Nogroup","Nontemporal","Nothing","Notinbranch","Novariants","Nowait","NumTasks","NumTeams","NumThreads","OpenMpClause","OpenMpDirective","Order","Ordered","","Otherwise","Parallel","ParallelDo","ParallelDoSimd","ParallelFor","ParallelForSimd","ParallelLoop","ParallelLoopSimd","ParallelMasked","ParallelMaskedTaskloop","ParallelMaskedTaskloopSimd","ParallelMaster","ParallelMasterTaskloop","ParallelMasterTaskloopSimd","ParallelSections","Partial","Permutation","Priority","Private","ProcBind","Public","Read","Reduction","Relaxed","Release","Replayable","Reproducible","Requires","Reverse","","ReverseOffload","Safelen","Safesync","Scan","Schedule","Scope","Section","Sections","SelfMaps","SeqCst","Severity","Shared","Simd","","Simdlen","Single","Sizes","Split","Stripe","Target","TargetData","TargetEnterData","TargetExitData","TargetLoop","TargetLoopSimd","TargetParallel","TargetParallelDo","TargetParallelDoSimd","TargetParallelFor","TargetParallelForSimd","TargetParallelLoop","TargetParallelLoopSimd","TargetSimd","TargetTeams","TargetTeamsDistribute","TargetTeamsDistributeParallelDo","TargetTeamsDistributeParallelDoSimd","TargetTeamsDistributeParallelFor","TargetTeamsDistributeParallelForSimd","TargetTeamsDistributeParallelLoop","TargetTeamsDistributeParallelLoopSimd","TargetTeamsDistributeSimd","TargetTeamsLoop","TargetTeamsLoopSimd","TargetUpdate","Task","TaskIteration","TaskReduction","Taskgraph","Taskgroup","Taskloop","TaskloopSimd","Taskwait","Taskyield","Teams","TeamsDistribute","TeamsDistributeParallelDo","TeamsDistributeParallelDoSimd","TeamsDistributeParallelFor","TeamsDistributeParallelForSimd","TeamsDistributeParallelLoop","TeamsDistributeParallelLoopSimd","TeamsDistributeSimd","TeamsLoop","TeamsLoopSimd","ThreadLimit","Threadprivate","Threads","Threadset","Tile","","To","Transparent","UnifiedAddress","UnifiedSharedMemory","Uniform","Unroll","","Untied","Update","Use","UseDeviceAddr","UseDevicePtr","UsesAllocators","Weak","When","Workdistribute","Workshare","Write","as_str","borrow","","borrow_mut","","clause_registry","clone","","clone_into","","clone_to_uninit","","directive_registry","eq","","fmt","","from","","hash","","into","","name","parser","rule","to_owned","","try_from","","try_into","","type_id",""],"q":[[0,"roup"],[4,"roup::c_api"],[59,"roup::ir"],[950,"roup::ir::ClauseData"],[1000,"roup::ir::ExpressionKind"],[1012,"roup::ir::convert"],[1021,"roup::ir::translate"],[1045,"roup::ir::validate"],[1076,"roup::ir::validate::ValidationError"],[1086,"roup::lexer"],[1119,"roup::parser"],[1284,"roup::parser::openacc"],[1391,"roup::parser::openmp"],[1692,"std::os::raw"],[1693,"core::result"],[1694,"core::any"],[1695,"roup::ir::variable"],[1696,"alloc::vec"],[1697,"roup::ir::expression"],[1698,"core::option"],[1699,"roup::ir::directive"],[1700,"roup::ir::types"],[1701,"roup::ir::builder"],[1702,"roup::ir::clause"],[1703,"roup::ir::error"],[1704,"core::ops::function"],[1705,"core::fmt"],[1706,"alloc::string"],[1707,"core::hash"],[1708,"core::convert"],[1709,"alloc::boxed"],[1710,"roup::parser::directive"],[1711,"roup::parser::clause"],[1712,"nom::internal"],[1713,"alloc::borrow"]],"i":"```````````Abhln321032103210````````````````````321032103210Dd0CfEhEjCb0Ch1Bd204DhEf`222224`4222Cj5333331`8768787Bl244Df``Db84DnDl6`::48=888888:`9:`Cn9<;`;```9;99999999=99699=9`E`<``<D`=;;;7<;?==;?8=:`19=229;;Eb>>`>`Eh?`CfEj1?2Cb`Bd00;03`0334Cl54953Dh81233363`32:222222222222222EfAn`?5:5`5Df6`DjDdCh188Cj:9:``9992?:==89:9Cn0`:Db2;?>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<;;338`;BlEb09=08>>77```E`>>9AhAj<Bd=BhBnC`Cf=<Cl<D`<DdDfDhDjDlDn?Cb=;EbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`=CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`5``=0;540001CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj<<C`Cf0Ch0Cj0Cl0Cn0D`0Db0Dd0Df0Dh0Dj0Dl0Dn0E`0Cb0Bd0Bn0Eb0EdAn0B`EfEhEjBj0Bl0Bh0Ah0Aj0:C`=0CfChCjClCnD`DbDdDfDhDjDlDnE`000CbBdBnEbEdAnB`EfEhEjBjBlBh00AhAj000<=CfChCjClCnD`DbDdDfDhDjDlDnBdEhEjBjBlBhC`0CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj<103>=>>>>3>>>=>>>=9>>>0>>=1=====<8<::14<1C`=31>0=;:53210000090=0;4000000=0=252;00==0CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjCfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbAnBjBlBhAhAj7`C`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAjC`CfChCjClCnD`DbDdDfDhDjDlDnE`CbBdBnEbEdAnB`EfEhEjBjBlBhAhAj9`<:::0GdGfGhGjGlGnH`HbHd3HfHhHjHlHnI`IbIdIfIhIj<IlInGdGfJ`JbGjGlJdJfJh??JjHl;6JlJnH`K`KbKd7I`KfInKhKjKlL`021Lb0Ld012`````````Lj00`0000000000000````000Gb000``Ll101111111010100110101010Ln0M`Mb1Md2310Mf00`0000000000```````````````0000NlNd`````0Nf`````10Nh032`2MnMlNbN`Nj8Lh8Lf8765432:190875364098798798765432:107:1100765432:1908765432:19087110532``42``6455335559870011065432:1908765432:1908765432:1908765435322OdOb1011101111110011111111100000111100111000101111``0011110110000110111101101010`101010`10101010101`110101010OhOf111111110101100100010000000010011111111100000001110111111010000000000110001011111000110111011111111111110101111110110000001111011111110111111``1101000000000000001111111111110101110100011111010100000000000000000000000000000010000000000000000010111011111101111111100101010`101010`10101010101`110101010","f":"````````{{}b}00{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000{cc{}}000{{}c{}}000{hb}{hj}{lj}{{lh}b}333{hn}{{A`bb}A`}{Abb}{Abl}{Abj}2{AbA`}{A`Ab}{{A`b}Ab}{A`j}{nj}{{nb}A`}{nb}{c{{Ad{e}}}{}{}}000{{}{{Ad{c}}}{}}000{dAf}000````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}Ah}{AjAl}{{{d{An}}}{{Bb{{d{B`}}}}}}{Bd{{d{Bf}}}}{{{d{An}}}{{d{Bf}}}}{{{d{Bh}}}{{d{Bf}}}}{{BjBl}Bn}{d{{d{c}}}{}}00000000000000000000000000000{{{d{f}}}{{d{fc}}}{}}00000000000000000000000000000{{C`BjBl}Bn}{{{d{Bn}}}{{d{{Cd{Cb}}}}}}{{{d{Cf}}}Cf}{{{d{Ch}}}Ch}{{{d{Cj}}}Cj}{{{d{Cl}}}Cl}{{{d{Cn}}}Cn}{{{d{D`}}}D`}{{{d{Db}}}Db}{{{d{Dd}}}Dd}{{{d{Df}}}Df}{{{d{Dh}}}Dh}{{{d{Dj}}}Dj}{{{d{Dl}}}Dl}{{{d{Dn}}}Dn}{{{d{E`}}}E`}{{{d{Cb}}}Cb}{{{d{Bd}}}Bd}{{{d{Bn}}}Bn}{{{d{Eb}}}Eb}{{{d{Ed}}}Ed}{{{d{An}}}An}{{{d{B`}}}B`}{{{d{Ef}}}Ef}{{{d{Eh}}}Eh}{{{d{Ej}}}Ej}{{{d{Bj}}}Bj}{{{d{Bl}}}Bl}{{{d{Bh}}}Bh}{{{d{Ah}}}Ah}{{{d{Aj}}}Aj}{{d{d{fc}}}j{}}0000000000000000000000000000{{dEl}j}0000000000000000000000000000{{C`{d{Bf}}}C`}{BjEn}``{{{d{Bn}}c}F`{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{C`D`}C`}{{}Ed}{{}Bj}{{}Bl}{C`C`}0{{C`Cn{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Aj}}}F`}{{{d{Cf}}{d{Cf}}}Fd}{{{d{Ch}}{d{Ch}}}Fd}{{{d{Cj}}{d{Cj}}}Fd}{{{d{Cl}}{d{Cl}}}Fd}{{{d{Cn}}{d{Cn}}}Fd}{{{d{D`}}{d{D`}}}Fd}{{{d{Db}}{d{Db}}}Fd}{{{d{Dd}}{d{Dd}}}Fd}{{{d{Df}}{d{Df}}}Fd}{{{d{Dh}}{d{Dh}}}Fd}{{{d{Dj}}{d{Dj}}}Fd}{{{d{Dl}}{d{Dl}}}Fd}{{{d{Dn}}{d{Dn}}}Fd}{{{d{E`}}{d{E`}}}Fd}{{{d{Cb}}{d{Cb}}}Fd}{{{d{Bd}}{d{Bd}}}Fd}{{{d{Bn}}{d{Bn}}}Fd}{{{d{Eb}}{d{Eb}}}Fd}{{{d{Ed}}{d{Ed}}}Fd}{{{d{An}}{d{An}}}Fd}{{{d{B`}}{d{B`}}}Fd}{{{d{Ef}}{d{Ef}}}Fd}{{{d{Eh}}{d{Eh}}}Fd}{{{d{Ej}}{d{Ej}}}Fd}{{{d{Bj}}{d{Bj}}}Fd}{{{d{Bl}}{d{Bl}}}Fd}{{{d{Bh}}{d{Bh}}}Fd}{{{d{Ah}}{d{Ah}}}Fd}{{{d{Aj}}{d{Aj}}}Fd}{{{d{Bn}}c}{{Al{{d{Cb}}}}}{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{{d{Bn}}c}{{Bb{{d{Cb}}}}}{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{C`{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Cf}}{d{fFh}}}Fj}0{{{d{Ch}}{d{fFh}}}Fj}0{{{d{Cj}}{d{fFh}}}Fj}0{{{d{Cl}}{d{fFh}}}Fj}0{{{d{Cn}}{d{fFh}}}Fj}0{{{d{D`}}{d{fFh}}}Fj}0{{{d{Db}}{d{fFh}}}Fj}0{{{d{Dd}}{d{fFh}}}Fj}0{{{d{Df}}{d{fFh}}}Fj}0{{{d{Dh}}{d{fFh}}}Fj}0{{{d{Dj}}{d{fFh}}}Fj}0{{{d{Dl}}{d{fFh}}}Fj}0{{{d{Dn}}{d{fFh}}}Fj}0{{{d{E`}}{d{fFh}}}Fj}0{{{d{Cb}}{d{fFh}}}Fj}0{{{d{Bd}}{d{fFh}}}Fj}0{{{d{Bn}}{d{fFh}}}Fj}0{{{d{Eb}}{d{fFh}}}Fj}0{{{d{Ed}}{d{fFh}}}Fj}{{{d{An}}{d{fFh}}}Fj}0{{{d{B`}}{d{fFh}}}Fj}{{{d{Ef}}{d{fFh}}}Fj}{{{d{Eh}}{d{fFh}}}Fj}{{{d{Ej}}{d{fFh}}}Fj}{{{d{Bj}}{d{fFh}}}Fj}0{{{d{Bl}}{d{fFh}}}Fj}0{{{d{Bh}}{d{fFh}}}Fj}0{{{d{Ah}}{d{fFh}}}Fj}0{{{d{Aj}}{d{fFh}}}Fj}0{{{d{Ed}}Bl}Ed}{{}C`}{{Cj{Bb{An}}BjBl}Bn}{cc{}}0000000000000{BhE`}{AjE`}{AnE`}33333333333333{{{d{Bf}}}Bh}{FlBh}55{{{d{Bf}}}Aj}{FlAj}{BhAj}{{{d{Bn}}c}Fd{{Ff{{d{Cb}}}{{Fb{Fd}}}}}}{{{d{Bd}}}Fd}{{{d{Cf}}{d{fc}}}jFn}{{{d{Ch}}{d{fc}}}jFn}{{{d{Cj}}{d{fc}}}jFn}{{{d{Cl}}{d{fc}}}jFn}{{{d{Cn}}{d{fc}}}jFn}{{{d{D`}}{d{fc}}}jFn}{{{d{Db}}{d{fc}}}jFn}{{{d{Dd}}{d{fc}}}jFn}{{{d{Df}}{d{fc}}}jFn}{{{d{Dh}}{d{fc}}}jFn}{{{d{Dj}}{d{fc}}}jFn}{{{d{Dl}}{d{fc}}}jFn}{{{d{Dn}}{d{fc}}}jFn}{{{d{Bd}}{d{fc}}}jFn}{{{d{Eh}}{d{fc}}}jFn}{{{d{Ej}}{d{fc}}}jFn}{{{d{Bj}}{d{fc}}}jFn}{{{d{Bl}}{d{fc}}}jFn}{{{d{Bh}}{d{fc}}}jFn}{{C`{d{Bf}}}C`}{{}c{}}00000000000000000000000000000{{BnBl}Bn}{{{d{Ah}}}Fd}{{{d{Aj}}}Fd}{BlFd}{{{d{Cb}}}Fd}{{{d{Bd}}}Fd}1111211101110{{{d{An}}}Fd}2224221511111{{{d{Bn}}}Bd}{B`Ef}{{{d{Bn}}}Bl}{{{d{Ed}}}Bl}{{{d{Ed}}}Fd}{AhBb}{BjEn}{{{d{Bn}}}Bj}2{{C`Ch{d{{Cd{{d{Bf}}}}}}}C`}{{{d{Bn}}}{{d{Bf}}}}{{{d{Bh}}}{{d{Bf}}}}{{{d{Aj}}}{{d{Bf}}}}{{BdBl}{{d{Bf}}}}{BdC`}{{Bd{d{Bf}}{Al{Cb}}BjBl}Bn}{{FdBl}Ed}{{c{d{Ed}}}An{{G`{Fl}}}}{{EnEn}Bj}{cBh{{G`{Fl}}}}{{{Bb{An}}{Bb{An}}{Bb{An}}}Ah}{cAj{{G`{Fl}}}}{C`C`}{{C`b}C`}{{C`{d{Bf}}}C`}20{B`Fl}{{}C`}{{{Bb{D`}}BjBl}Bn}1{EdFd}{Bl{{d{Bf}}}}{{C`{d{{Cd{{d{Bf}}}}}}}C`}{{C`Db}C`}{{C`Cf{d{{Cd{{d{Bf}}}}}}}C`}{{C`Cj{Bb{{d{Bf}}}}}C`}{{C`Cj}C`}{{C`Cj{Al{Cl}}{Bb{{d{Bf}}}}}C`}{{{d{fBn}}Bl}j}6{{Bd{d{Bf}}BjBl}Bn}{AnAh}{{}Bj}{AhBb}{BlEd}??{{BjBl}Bn}0{{}C`}{dc{}}0000000000000000000000000000{dFl}00000000000000000000000{{{d{Bn}}Bl}Fl}`{c{{Ad{e}}}{}{}}00000000000000000000000000000{{}{{Ad{c}}}{}}00000000000000000000000000000{dAf}00000000000000000000000000000{cAn{{G`{Fl}}}}`{{{d{Bn}}}{{Ad{j{Al{Gb}}}}}}{{EdBl}Ed}{{EdFd}Ed}<{{c{Al{Ah}}}Aj{{G`{Fl}}}}{GdBb}{GfBb}{GhBh}{GjBb}{GlBb}{GnAn}{H`Bb}{HbCn}{HdAn}{GnBb}{HfAn}{HhAl}{HjAl}{HlAl}{HnAl}{I`Al}{IbAl}{IdAl}{IfAl}{IhAl}{IjAl}{HbAl}{IlAl}{InAl}{GdAl}{GfAl}{J`Al}{JbAl}{GjCj}{GlCj}{JdAn}{JfAn}{JhAn}{IbBb}0{JjBb}{HlBb}{InBb}{GjAl}{JlAn}{JnBb}{H`Bh}{K`An}{KbAn}{KdAn}{JjDf}{I`Cf}{KfAn}:{KhAn}{KjAl}{KlKn}{L`Kn}0{KjFl}{KlAl}{LbKn}{LbEh}{LdEj}{LdKn}36{{{d{Lf}}BjBl{d{Ed}}}{{Ad{BnEb}}}}{{{d{Lh}}{d{Ed}}}{{Ad{CbEb}}}}{{{d{Bf}}}{{Ad{CnEb}}}}{{{d{Bf}}}{{Ad{BdEb}}}}{{{d{Bf}}{d{Ed}}}{{Ad{{Al{E`}}Eb}}}}{{{d{Bf}}{d{Ed}}}{{Ad{CbEb}}}}0{{{d{Bf}}}{{Ad{CfEb}}}}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Lj}}}Lj}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Lj}}{d{Lj}}}Fd}{{{d{Lj}}{d{fFh}}}Fj}0{cc{}}{EbLj}{{}c{}}{dc{}}{dFl}{{{d{Bf}}}{{Ad{FlLj}}}}{{{d{Bf}}Ed}{{Ad{BnLj}}}}10{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}``````{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Gb}}}Gb}{{d{d{fc}}}j{}}{{dEl}j}{{{d{Gb}}{d{Gb}}}Fd}{{{d{Gb}}{d{fFh}}}Fj}0{cc{}}0??{{{d{Ll}}{d{Cb}}}{{Ad{jGb}}}}{BdLl}{dc{}}{dFl}>>==<<{{{d{Ll}}{d{{Cd{Cb}}}}}{{Ad{j{Al{Gb}}}}}}{LnFl}0{M`Fl}{MbAl}1{MdFl}23{MbFl}1````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Mf}}}Mf}{{d{d{fc}}}j{}}{{dEl}j}{{}Mf}{{{d{Mf}}{d{Mf}}}Fd}{{{d{Mf}}{d{fFh}}}Fj}{cc{}}{{}c{}}{MhFd}{{{d{Bf}}}{{Mj{{d{Bf}}{d{Bf}}}}}}0{{{d{Bf}}{d{Bf}}}{{Mj{{d{Bf}}{d{Bf}}}}}}11010111{{{d{Bf}}}Fl}22{dc{}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{dAf}``````````````````````{d{{d{c}}}{}}0000000000{{{d{f}}}{{d{fc}}}{}}0000000000{MlMn}{N`Nb}{{}Ml}{{}N`}{LfAl}{{{d{Nd}}}Nd}{{{d{Nf}}}Nf}{{{d{Nh}}}Nh}{{d{d{fc}}}j{}}00{{dEl}j}00{{}Mn}8{{}Nb}8{{}Nj}{{{d{Nl}}{d{Nl}}}Fd}{{{d{Lh}}{d{Lh}}}Fd}{{{d{Lf}}{d{Lf}}}Fd}{{{d{Nh}}{d{Nh}}}Fd}{{{d{Nl}}{d{fFh}}}Fj}{{{d{Lh}}{d{fFh}}}Fj}0{{{d{Lf}}{d{fFh}}}Fj}0{{{d{Nh}}{d{fFh}}}Fj}{cc{}}0000000000{{}c{}}0000000000{LhNl}{LhNn}{LfNn}{{}Ml}{{}N`}{{NbMn}Nj}``{{{d{Nb}}{d{Bf}}{d{Mn}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Nj}}{d{Bf}}}{{Mj{{d{Bf}}Lf}}}}{{{d{Bf}}}{{Mj{{d{Bf}}Lf}}}}0{{{d{Mn}}{d{Bf}}}{{Mj{{d{Bf}}{Al{Lh}}}}}}{{{d{Nb}}{Nn{Bf}}{d{Bf}}{d{Mn}}}{{Mj{{d{Bf}}Lf}}}}{{Ml{d{Bf}}}Ml}{{Ml{d{Bf}}{O`{{Nn{Bf}}{d{Bf}}}{{Fb{{Mj{{d{Bf}}Lh}}}}}}}Ml}{{N`{d{Bf}}{O`{{Nn{Bf}}{d{Bf}}{d{Mn}}}{{Fb{{Mj{{d{Bf}}Lf}}}}}}}N`}{{N`{d{Bf}}}N`}3{{Ml{d{Bf}}Nd}Ml}{{{d{fMl}}{d{Bf}}Nd}{{d{fMl}}}}{dc{}}00{{{d{Lf}}}Fl}{{{d{Lf}}{d{Bf}}}Fl}{{{d{Lh}}}Fl}{dFl}0{c{{Ad{e}}}{}{}}0000000000{{}{{Ad{c}}}{}}0000000000{dAf}0000000000{{MnFd}Mn}{{MlFd}Ml}{{NbFd}Nb}{{N`Fd}N`}{{MlNd}Ml}{{N`Nf}N`}{{NjNh}Nj}{{NjMf}Nj}`````````````````````````````````````````````````````````````````````````{Ob{{d{Bf}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{}Mn}{{{d{Od}}}Od}{{{d{Ob}}}Ob}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Nb}{{{d{Od}}{d{Od}}}Fd}{{{d{Ob}}{d{Ob}}}Fd}{{{d{Od}}{d{fFh}}}Fj}{{{d{Ob}}{d{fFh}}}Fj}{cc{}}0{{{d{Od}}{d{fc}}}jFn}{{{d{Ob}}{d{fc}}}jFn}{{}c{}}0{Od{{d{Bf}}}}{{}Nj}{OdNd}{dc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{Of{{d{Bf}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{}Mn}{{{d{Oh}}}Oh}{{{d{Of}}}Of}{{d{d{fc}}}j{}}0{{dEl}j}0{{}Nb}{{{d{Oh}}{d{Oh}}}Fd}{{{d{Of}}{d{Of}}}Fd}{{{d{Oh}}{d{fFh}}}Fj}{{{d{Of}}{d{fFh}}}Fj}{cc{}}0{{{d{Oh}}{d{fc}}}jFn}{{{d{Of}}{d{fc}}}jFn}{{}c{}}0{Oh{{d{Bf}}}}{{}Nj}{OhNd}{dc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{dAf}0","D":"DHh","p":[[1,"i32"],[1,"reference",null,null,1],[0,"mut"],[5,"OmpClause",4],[1,"unit"],[5,"OmpClauseIterator",4],[5,"OmpStringList",4],[8,"c_char",1692],[5,"OmpDirective",4],[6,"Result",1693,null,1],[5,"TypeId",1694],[5,"ArraySection",59,1695],[5,"Variable",59,1695],[5,"Vec",1696],[6,"Expression",59,1697],[5,"ExpressionAst",59,1697],[6,"Option",1698,null,1],[6,"DirectiveKind",59,1699],[1,"str"],[5,"Identifier",59,1695],[5,"SourceLocation",59,1700],[6,"Language",59,1700],[5,"DirectiveIR",59,1699],[5,"DirectiveBuilder",59,1701],[6,"ClauseData",59,1702],[1,"slice"],[6,"ReductionOperator",59,1702],[6,"MapType",59,1702],[6,"ScheduleKind",59,1702],[6,"ScheduleModifier",59,1702],[6,"DependType",59,1702],[6,"DefaultKind",59,1702],[6,"ProcBind",59,1702],[6,"MemoryOrder",59,1702],[6,"AtomicOp",59,1702],[6,"DeviceType",59,1702],[6,"LinearModifier",59,1702],[6,"LastprivateModifier",59,1702],[6,"OrderKind",59,1702],[6,"ClauseItem",59,1702],[6,"ConversionError",59,1703],[5,"ParserConfig",59,1697],[6,"ExpressionKind",59,1697],[6,"BinaryOperator",59,1697],[6,"UnaryOperator",59,1697],[1,"u8"],[1,"u32"],[1,"usize"],[17,"Output"],[1,"bool"],[10,"Fn",1704],[5,"Formatter",1705],[8,"Result",1705],[5,"String",1706],[10,"Hasher",1707],[10,"Into",1708,null,1],[6,"ValidationError",1045],[15,"Aligned",950],[15,"Allocate",950],[15,"Allocator",950],[15,"Schedule",950],[15,"DistSchedule",950],[15,"If",950],[15,"Generic",950],[15,"Depend",950],[15,"Device",950],[15,"Grainsize",950],[15,"Private",950],[15,"Firstprivate",950],[15,"Lastprivate",950],[15,"Shared",950],[15,"Reduction",950],[15,"Map",950],[15,"UseDevicePtr",950],[15,"UseDeviceAddr",950],[15,"IsDevicePtr",950],[15,"HasDeviceAddr",950],[15,"Affinity",950],[15,"Linear",950],[15,"Copyin",950],[15,"Copyprivate",950],[15,"Safelen",950],[15,"Simdlen",950],[15,"ThreadLimit",950],[15,"AtomicOperation",950],[15,"Collapse",950],[15,"Ordered",950],[15,"NumThreads",950],[15,"NumTeams",950],[15,"NumTasks",950],[15,"Priority",950],[15,"Filter",950],[15,"Call",1000],[15,"ArrayAccess",1000],[5,"Box",1709,null,1],[15,"Conditional",1000],[15,"BinaryOp",1000],[15,"UnaryOp",1000],[5,"Directive",1119,1710],[5,"Clause",1119,1711],[6,"TranslationError",1021],[5,"ValidationContext",1045],[15,"ConflictingClauses",1076],[15,"ClauseNotAllowed",1076],[15,"InvalidCombination",1076],[15,"MissingRequiredClause",1076],[6,"Language",1086],[1,"char"],[8,"IResult",1712],[5,"ClauseRegistryBuilder",1119,1711],[5,"ClauseRegistry",1119,1711],[5,"DirectiveRegistryBuilder",1119,1710],[5,"DirectiveRegistry",1119,1710],[6,"ClauseRule",1119,1711],[6,"DirectiveRule",1119,1710],[6,"Dialect",1119],[5,"Parser",1119],[6,"ClauseKind",1119,1711],[6,"Cow",1713],[1,"fn"],[6,"OpenAccDirective",1284],[6,"OpenAccClause",1284],[6,"OpenMpDirective",1391],[6,"OpenMpClause",1391]],"r":[[59,1702],[60,1702],[61,1702],[62,1697],[63,1697],[64,1702],[65,1702],[66,1702],[67,1702],[68,1699],[69,1702],[70,1699],[71,1697],[72,1702],[73,1697],[74,1695],[75,1699],[76,1699],[77,1699],[78,1699],[79,1699],[80,1702],[81,1702],[82,1702],[83,1699],[84,1699],[85,1699],[86,1702],[87,1702],[88,1699],[89,1699],[90,1699],[91,1699],[92,1699],[93,1697],[94,1697],[95,1702],[96,1697],[97,1697],[98,1702],[99,1697],[100,1702],[101,1697],[102,1700],[103,1697],[104,1699],[105,1699],[106,1702],[107,1702],[108,1702],[109,1702],[110,1702],[111,1697],[112,1702],[113,1702],[114,1697],[115,1703],[116,1702],[117,1702],[118,1700],[119,1699],[120,1702],[121,1699],[122,1699],[123,1699],[124,1699],[125,1699],[126,1699],[127,1702],[128,1702],[129,1702],[130,1702],[131,1702],[132,1702],[133,1699],[134,1697],[135,1702],[136,1702],[137,1702],[138,1701],[139,1699],[140,1699],[141,1699],[142,1702],[143,1699],[144,1699],[145,1699],[146,1699],[147,1699],[148,1699],[149,1699],[150,1699],[151,1697],[152,1699],[153,1699],[154,1702],[155,1699],[156,1699],[157,1697],[158,1699],[159,1697],[160,1702],[161,1702],[162,1697],[163,1697],[164,1702],[165,1702],[166,1702],[167,1699],[168,1699],[169,1699],[170,1700],[171,1702],[172,1699],[173,1697],[174,1702],[175,1702],[176,1699],[177,1697],[178,1702],[179,1702],[180,1702],[181,1695],[182,1702],[183,1697],[184,1702],[185,1702],[186,1702],[187,1697],[188,1699],[189,1699],[190,1703],[191,1702],[192,1702],[193,1700],[194,1702],[195,1702],[196,1697],[197,1702],[198,1702],[199,1702],[200,1697],[201,1702],[202,1699],[203,1697],[204,1702],[205,1702],[206,1699],[207,1699],[208,1699],[209,1702],[210,1699],[211,1702],[212,1702],[213,1699],[214,1702],[215,1702],[216,1697],[217,1702],[218,1697],[219,1702],[220,1702],[221,1697],[222,1697],[223,1702],[224,1702],[225,1702],[226,1699],[227,1702],[228,1702],[229,1702],[230,1697],[231,1702],[232,1702],[233,1702],[234,1699],[235,1702],[236,1699],[237,1699],[238,1699],[239,1699],[240,1699],[241,1699],[242,1699],[243,1699],[244,1699],[245,1699],[246,1699],[247,1699],[248,1699],[249,1699],[250,1699],[251,1697],[252,1697],[253,1697],[254,1702],[255,1702],[256,1702],[257,1702],[258,1702],[259,1702],[260,1702],[261,1702],[262,1702],[263,1702],[264,1702],[265,1702],[266,1702],[267,1699],[268,1699],[269,1702],[270,1702],[271,1699],[272,1702],[273,1702],[274,1702],[275,1699],[276,1699],[277,1699],[278,1702],[279,1702],[280,1702],[281,1697],[282,1697],[283,1702],[284,1699],[285,1702],[286,1699],[287,1702],[288,1702],[289,1700],[290,1699],[291,1702],[292,1702],[293,1699],[294,1697],[295,1702],[296,1699],[297,1699],[298,1699],[299,1699],[300,1699],[301,1699],[302,1699],[303,1699],[304,1699],[305,1699],[306,1699],[307,1699],[308,1699],[309,1699],[310,1699],[311,1699],[312,1699],[313,1699],[314,1699],[315,1699],[316,1699],[317,1699],[318,1699],[319,1699],[320,1699],[321,1699],[322,1699],[323,1699],[324,1699],[325,1699],[326,1699],[327,1699],[328,1699],[329,1699],[330,1699],[331,1699],[332,1699],[333,1699],[334,1699],[335,1699],[336,1699],[337,1699],[338,1699],[339,1699],[340,1699],[341,1702],[342,1699],[343,1699],[344,1702],[345,1702],[346,1697],[347,1697],[348,1699],[349,1700],[350,1703],[351,1703],[352,1697],[353,1699],[354,1703],[355,1702],[356,1702],[357,1702],[358,1702],[359,1702],[360,1045],[361,1045],[362,1695],[363,1702],[364,1699],[365,1699],[366,1702],[367,1695],[368,1695],[369,1697],[370,1699],[371,1697],[372,1695],[373,1699],[374,1701],[375,1702],[376,1702],[377,1702],[378,1702],[379,1702],[380,1702],[381,1702],[382,1702],[383,1702],[384,1702],[385,1702],[386,1702],[387,1702],[388,1702],[389,1702],[390,1699],[391,1699],[392,1703],[393,1697],[394,1697],[395,1697],[396,1697],[397,1697],[398,1697],[399,1700],[400,1700],[401,1695],[402,1695],[403,1695],[404,1701],[405,1702],[406,1702],[407,1702],[408,1702],[409,1702],[410,1702],[411,1702],[412,1702],[413,1702],[414,1702],[415,1702],[416,1702],[417,1702],[418,1702],[419,1702],[420,1699],[421,1699],[422,1703],[423,1697],[424,1697],[425,1697],[426,1697],[427,1697],[428,1697],[429,1700],[430,1700],[431,1695],[432,1695],[433,1695],[434,1701],[435,1699],[436,1702],[437,1702],[438,1702],[439,1702],[440,1702],[441,1702],[442,1702],[443,1702],[444,1702],[445,1702],[446,1702],[447,1702],[448,1702],[449,1702],[450,1702],[451,1699],[452,1699],[453,1703],[454,1697],[455,1697],[456,1697],[457,1697],[458,1697],[459,1697],[460,1700],[461,1700],[462,1695],[463,1695],[464,1695],[465,1702],[466,1702],[467,1702],[468,1702],[469,1702],[470,1702],[471,1702],[472,1702],[473,1702],[474,1702],[475,1702],[476,1702],[477,1702],[478,1702],[479,1702],[480,1699],[481,1699],[482,1703],[483,1697],[484,1697],[485,1697],[486,1697],[487,1697],[488,1697],[489,1700],[490,1700],[491,1695],[492,1695],[493,1695],[494,1702],[495,1702],[496,1702],[497,1702],[498,1702],[499,1702],[500,1702],[501,1702],[502,1702],[503,1702],[504,1702],[505,1702],[506,1702],[507,1702],[508,1702],[509,1699],[510,1699],[511,1703],[512,1697],[513,1697],[514,1697],[515,1697],[516,1697],[517,1697],[518,1700],[519,1700],[520,1695],[521,1695],[522,1695],[523,1701],[524,1700],[526,1012],[527,1699],[528,1701],[529,1697],[530,1700],[531,1700],[532,1701],[533,1701],[534,1701],[535,1695],[536,1702],[537,1702],[538,1702],[539,1702],[540,1702],[541,1702],[542,1702],[543,1702],[544,1702],[545,1702],[546,1702],[547,1702],[548,1702],[549,1702],[550,1702],[551,1699],[552,1699],[553,1703],[554,1697],[555,1697],[556,1697],[557,1697],[558,1697],[559,1697],[560,1700],[561,1700],[562,1695],[563,1695],[564,1695],[565,1699],[566,1699],[567,1701],[568,1702],[569,1702],[570,1702],[571,1702],[572,1702],[573,1702],[574,1702],[575,1702],[576,1702],[577,1702],[578,1702],[579,1702],[580,1702],[581,1702],[582,1702],[583,1702],[584,1702],[585,1702],[586,1702],[587,1702],[588,1702],[589,1702],[590,1702],[591,1702],[592,1702],[593,1702],[594,1702],[595,1702],[596,1702],[597,1702],[598,1699],[599,1699],[600,1699],[601,1699],[602,1703],[603,1703],[604,1697],[605,1697],[606,1697],[607,1697],[608,1697],[609,1697],[610,1697],[611,1700],[612,1700],[613,1700],[614,1700],[615,1695],[616,1695],[617,1695],[618,1695],[619,1695],[620,1695],[621,1697],[622,1701],[623,1699],[624,1701],[625,1702],[626,1702],[627,1702],[628,1702],[629,1702],[630,1702],[631,1702],[632,1702],[633,1702],[634,1702],[635,1702],[636,1702],[637,1702],[638,1702],[639,1702],[640,1702],[641,1702],[642,1702],[643,1699],[644,1699],[645,1703],[646,1697],[647,1697],[648,1697],[649,1697],[650,1697],[651,1697],[652,1700],[653,1700],[654,1695],[655,1695],[656,1695],[657,1695],[658,1695],[659,1695],[660,1695],[661,1695],[662,1699],[663,1699],[664,1702],[665,1702],[666,1702],[667,1702],[668,1702],[669,1702],[670,1702],[671,1702],[672,1702],[673,1702],[674,1702],[675,1702],[676,1702],[677,1699],[678,1697],[679,1697],[680,1700],[681,1700],[682,1695],[683,1701],[684,1701],[685,1702],[686,1702],[687,1702],[688,1702],[689,1702],[690,1702],[691,1702],[692,1702],[693,1702],[694,1702],[695,1702],[696,1702],[697,1702],[698,1702],[699,1702],[700,1699],[701,1699],[702,1703],[703,1697],[704,1697],[705,1697],[706,1697],[707,1697],[708,1697],[709,1700],[710,1700],[711,1695],[712,1695],[713,1695],[714,1699],[715,1695],[716,1695],[717,1700],[718,1702],[719,1699],[720,1702],[721,1702],[722,1702],[723,1702],[724,1700],[725,1702],[726,1702],[727,1702],[728,1699],[729,1702],[730,1702],[731,1702],[732,1699],[733,1697],[734,1702],[735,1702],[736,1702],[737,1695],[738,1702],[739,1702],[740,1699],[741,1695],[742,1699],[743,1699],[744,1699],[745,1699],[746,1699],[747,1699],[748,1697],[749,1699],[750,1697],[751,1697],[752,1695],[753,1700],[754,1699],[755,1695],[756,1701],[757,1699],[758,1695],[759,1695],[760,1699],[761,1701],[762,1699],[763,1697],[764,1697],[765,1700],[766,1695],[767,1695],[768,1695],[769,1701],[770,1701],[771,1701],[772,1701],[773,1701],[774,1697],[775,1701],[776,1699],[777,1701],[778,1697],[779,1700],[780,1701],[781,1701],[782,1701],[783,1701],[784,1701],[785,1701],[786,1699],[787,1701],[788,1699],[789,1695],[790,1700],[791,1695],[792,1697],[793,1701],[794,1701],[795,1699],[796,1699],[797,1701],[798,1702],[799,1702],[800,1702],[801,1702],[802,1702],[803,1702],[804,1702],[805,1702],[806,1702],[807,1702],[808,1702],[809,1702],[810,1702],[811,1702],[812,1702],[813,1699],[814,1699],[815,1703],[816,1697],[817,1697],[818,1697],[819,1697],[820,1697],[821,1697],[822,1700],[823,1700],[824,1695],[825,1695],[826,1695],[827,1702],[828,1702],[829,1702],[830,1702],[831,1702],[832,1702],[833,1702],[834,1702],[835,1702],[836,1702],[837,1702],[838,1702],[839,1702],[840,1702],[841,1702],[842,1699],[843,1699],[844,1703],[845,1697],[846,1700],[847,1700],[848,1695],[849,1695],[850,1695],[851,1699],[853,1701],[854,1702],[855,1702],[856,1702],[857,1702],[858,1702],[859,1702],[860,1702],[861,1702],[862,1702],[863,1702],[864,1702],[865,1702],[866,1702],[867,1702],[868,1702],[869,1699],[870,1699],[871,1703],[872,1697],[873,1697],[874,1697],[875,1697],[876,1697],[877,1697],[878,1700],[879,1700],[880,1695],[881,1695],[882,1695],[883,1701],[884,1702],[885,1702],[886,1702],[887,1702],[888,1702],[889,1702],[890,1702],[891,1702],[892,1702],[893,1702],[894,1702],[895,1702],[896,1702],[897,1702],[898,1702],[899,1699],[900,1699],[901,1703],[902,1697],[903,1697],[904,1697],[905,1697],[906,1697],[907,1697],[908,1700],[909,1700],[910,1695],[911,1695],[912,1695],[913,1701],[914,1702],[915,1702],[916,1702],[917,1702],[918,1702],[919,1702],[920,1702],[921,1702],[922,1702],[923,1702],[924,1702],[925,1702],[926,1702],[927,1702],[928,1702],[929,1699],[930,1699],[931,1703],[932,1697],[933,1697],[934,1697],[935,1697],[936,1697],[937,1697],[938,1700],[939,1700],[940,1695],[941,1695],[942,1695],[943,1697],[945,1699],[946,1697],[947,1697],[948,1697],[949,1695],[1119,1711],[1120,1711],[1121,1711],[1122,1711],[1123,1711],[1124,1711],[1125,1711],[1126,1711],[1127,1710],[1129,1710],[1130,1710],[1131,1710],[1132,1710],[1133,1711],[1134,1710],[1137,1711],[1138,1711],[1140,1711],[1141,1711],[1142,1711],[1143,1710],[1144,1710],[1146,1711],[1147,1711],[1148,1711],[1149,1710],[1150,1710],[1152,1711],[1153,1711],[1154,1710],[1155,1710],[1157,1711],[1158,1711],[1159,1711],[1160,1710],[1161,1710],[1163,1711],[1164,1710],[1165,1711],[1166,1710],[1167,1710],[1168,1711],[1169,1710],[1171,1711],[1172,1710],[1174,1711],[1175,1710],[1177,1711],[1178,1711],[1179,1710],[1180,1710],[1182,1711],[1183,1711],[1184,1710],[1186,1711],[1187,1711],[1188,1711],[1189,1710],[1190,1710],[1192,1711],[1193,1711],[1194,1710],[1195,1710],[1197,1711],[1198,1711],[1199,1711],[1200,1710],[1201,1710],[1203,1711],[1204,1711],[1205,1710],[1206,1710],[1208,1711],[1209,1711],[1210,1711],[1211,1710],[1212,1710],[1214,1711],[1215,1711],[1216,1710],[1217,1711],[1218,1710],[1222,1710],[1226,1711],[1227,1710],[1228,1711],[1229,1711],[1230,1710],[1231,1710],[1232,1711],[1233,1711],[1234,1711],[1235,1711],[1236,1710],[1238,1710],[1239,1710],[1240,1711],[1241,1711],[1242,1710],[1243,1711],[1244,1711],[1245,1710],[1246,1710],[1248,1711],[1249,1711],[1250,1711],[1251,1710],[1252,1710],[1254,1711],[1255,1711],[1256,1710],[1257,1710],[1259,1711],[1260,1711],[1261,1711],[1262,1710],[1263,1710],[1265,1711],[1266,1711],[1267,1710],[1268,1710],[1270,1711],[1271,1711],[1272,1711],[1273,1710],[1274,1710],[1276,1711],[1277,1711],[1278,1710],[1279,1710],[1280,1711],[1281,1710]],"b":[[568,"impl-Display-for-ReductionOperator"],[569,"impl-Debug-for-ReductionOperator"],[570,"impl-Display-for-MapType"],[571,"impl-Debug-for-MapType"],[572,"impl-Display-for-ScheduleKind"],[573,"impl-Debug-for-ScheduleKind"],[574,"impl-Display-for-ScheduleModifier"],[575,"impl-Debug-for-ScheduleModifier"],[576,"impl-Debug-for-DependType"],[577,"impl-Display-for-DependType"],[578,"impl-Debug-for-DefaultKind"],[579,"impl-Display-for-DefaultKind"],[580,"impl-Display-for-ProcBind"],[581,"impl-Debug-for-ProcBind"],[582,"impl-Debug-for-MemoryOrder"],[583,"impl-Display-for-MemoryOrder"],[584,"impl-Debug-for-AtomicOp"],[585,"impl-Display-for-AtomicOp"],[586,"impl-Display-for-DeviceType"],[587,"impl-Debug-for-DeviceType"],[588,"impl-Display-for-LinearModifier"],[589,"impl-Debug-for-LinearModifier"],[590,"impl-Display-for-LastprivateModifier"],[591,"impl-Debug-for-LastprivateModifier"],[592,"impl-Debug-for-OrderKind"],[593,"impl-Display-for-OrderKind"],[594,"impl-Debug-for-ClauseItem"],[595,"impl-Display-for-ClauseItem"],[596,"impl-Display-for-ClauseData"],[597,"impl-Debug-for-ClauseData"],[598,"impl-Debug-for-DirectiveKind"],[599,"impl-Display-for-DirectiveKind"],[600,"impl-Display-for-DirectiveIR"],[601,"impl-Debug-for-DirectiveIR"],[602,"impl-Display-for-ConversionError"],[603,"impl-Debug-for-ConversionError"],[605,"impl-Display-for-Expression"],[606,"impl-Debug-for-Expression"],[611,"impl-Debug-for-SourceLocation"],[612,"impl-Display-for-SourceLocation"],[613,"impl-Display-for-Language"],[614,"impl-Debug-for-Language"],[615,"impl-Display-for-Identifier"],[616,"impl-Debug-for-Identifier"],[617,"impl-Debug-for-ArraySection"],[618,"impl-Display-for-ArraySection"],[619,"impl-Debug-for-Variable"],[620,"impl-Display-for-Variable"],[638,"impl-From%3CIdentifier%3E-for-ClauseItem"],[639,"impl-From%3CVariable%3E-for-ClauseItem"],[640,"impl-From%3CExpression%3E-for-ClauseItem"],[655,"impl-From%3C%26str%3E-for-Identifier"],[656,"impl-From%3CString%3E-for-Identifier"],[659,"impl-From%3C%26str%3E-for-Variable"],[660,"impl-From%3CString%3E-for-Variable"],[661,"impl-From%3CIdentifier%3E-for-Variable"],[1031,"impl-Display-for-TranslationError"],[1032,"impl-Debug-for-TranslationError"],[1059,"impl-Display-for-ValidationError"],[1060,"impl-Debug-for-ValidationError"],[1187,"impl-Display-for-Clause%3C\'_%3E"],[1188,"impl-Debug-for-Clause%3C\'a%3E"],[1189,"impl-Debug-for-Directive%3C\'a%3E"],[1190,"impl-Display-for-Directive%3C\'_%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFgENAADAAEADAAHADAACwA+AAIASAAAAGAABgB5AAAAhwAAAJgAAACeAAAArgAAALIAAADFAAAAyAACAMwAAADUAAAA1wACANsAAQDeAAEA5wAAABoBAQAnAQEAaQEBAHcBOwC1AVYADwIAABkCHAA5AisAZwIDAGwCAAB/AgIAkAIBAJQCAgCZAhIAHwM0AFYDWQC3Az0AAgQHAAsEAAANBAEAEwQCABwECQAsBAcANQQJAEMEBwBcBEwAvwQYANkEhQBhBQEAZQUmAY4GAQCSBgoA","P":[[11,"T"],[23,"U"],[27,""],[47,"U,T"],[51,"U"],[55,""],[374,"T"],[434,""],[465,"T"],[494,""],[527,"F"],[528,""],[565,"F"],[567,""],[624,"T"],[638,""],[641,"T"],[655,""],[657,"T"],[659,""],[662,"F"],[663,""],[664,"__H"],[683,""],[684,"U"],[714,""],[798,"T"],[827,""],[853,"U,T"],[883,"U"],[913,""],[1025,"T"],[1027,""],[1028,"T"],[1029,""],[1033,"T"],[1034,""],[1035,"U"],[1036,"T"],[1037,""],[1042,"U,T"],[1043,"U"],[1044,""],[1051,"T"],[1055,""],[1056,"T"],[1057,""],[1061,"T"],[1063,"U"],[1065,""],[1067,"T"],[1068,""],[1069,"U,T"],[1071,"U"],[1073,""],[1090,"T"],[1092,""],[1093,"T"],[1094,""],[1098,"T"],[1099,"U"],[1100,""],[1115,"T"],[1116,"U,T"],[1117,"U"],[1118,""],[1141,"T"],[1163,""],[1171,"T"],[1174,""],[1192,"T"],[1203,"U"],[1214,""],[1235,"T"],[1238,""],[1243,"U,T"],[1254,"U"],[1265,""],[1358,"T"],[1362,""],[1365,"T"],[1367,""],[1374,"T"],[1376,"__H"],[1378,"U"],[1380,""],[1383,"T"],[1385,"U,T"],[1387,"U"],[1389,""],[1659,"T"],[1663,""],[1666,"T"],[1668,""],[1675,"T"],[1677,"__H"],[1679,"U"],[1681,""],[1684,"T"],[1686,"U,T"],[1688,"U"],[1690,""]]}],["roup_roundtrip",{"t":"H","n":["main"],"q":[[0,"roup_roundtrip"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}],["tester",{"t":"H","n":["main"],"q":[[0,"tester"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[1059,46170,189,173]}