name: ROUP CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    strategy:
      matrix:
      # Version should be guarded with quotes (1.80 -> "1.80"). Otherwise, 1.80 may be recognized as 1.8, which is a much older version.
        version: ["1.90", "1.89", "1.88", "1.87", "1.86", "1.85"]
        # ubuntu-22.04-arm, ubuntu-24.04-arm and windows-11-arm are not supported yet for private repositories
        os: [ubuntu-24.04, windows-2025, macos-15]
        llvm: ["20"]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # Check supported versions at: https://github.com/KyleMayes/install-llvm-action/blob/master/assets.json
      - name: Set up LLVM on Windows and macOS
        if: ${{ matrix.os != 'ubuntu-24.04' && matrix.os != 'ubuntu-24.04-arm'}}
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ matrix.llvm }}

      - name: Set up LLVM on Ubuntu
        if: ${{ matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm'}}
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository -y 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ matrix.llvm }} main'
          sudo apt-get update
          sudo apt-get install -y \
            clang-${{ matrix.llvm }}

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.version }}
          components: rustfmt

      - name: Check Rust formatting
        run: cargo fmt -- --check

      - name: Build library
        run: cargo build --verbose

      - name: Run Rust tests
        run: cargo test --verbose

      - name: Build C API examples
        if: runner.os == 'Linux'
        run: |
          cargo build --release
          cd examples/c
          make clean
          make BUILD_TYPE=release all
          cd ../..
        shell: bash

      - name: Run C API examples
        if: runner.os == 'Linux'
        run: |
          cd examples/c
          make BUILD_TYPE=release run-all
          cd ../..
        shell: bash

      - name: Build C++ examples
        if: runner.os == 'Linux'
        run: |
          cd examples/cpp
          if [ -f Makefile ]; then
            make clean
            make all
          else
            echo "No C++ examples Makefile found yet"
          fi
          cd ../..
        shell: bash
