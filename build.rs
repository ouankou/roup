//! Build script to generate roup_constants.h from source.
//!
//! **Usage:** Runs automatically during `cargo build`
//!
//! **Source of truth:** `src/c_api.rs` (directive_name_to_kind, convert_clause)
//!
//! For design rationale and maintenance instructions:
//! See [`docs/BUILD_SCRIPT_RATIONALE.md`](../docs/BUILD_SCRIPT_RATIONALE.md)

use std::env;
use std::fs;
use std::path::Path;

// Use #[path] to share code between build.rs and main crate
// This pattern is documented in docs/BUILD_SCRIPT_RATIONALE.md (see section "Dual-purpose #[path] pattern" for rationale and ecosystem examples).
// Rationale: build.rs runs in a separate environment (can't access crate modules), so we use
// #[path] to include constants_gen for both build-time generation and runtime verification.
// Alternative (separate build-utils crate) rejected: adds workspace complexity for several hundred lines.
#[path = "src/constants_gen.rs"]
mod constants_gen;

use constants_gen::*;

/// Generate the header file content
///
/// This function is specific to build.rs and generates the C header with all constants.
/// The gen binary doesn't need this - it only verifies using checksum comparison.
fn generate_header(directives: &[(String, i32)], clauses: &[(String, i32)]) -> String {
    // Generate directive constants
    let mut directive_defs = String::new();
    for (name, num) in directives {
        directive_defs.push_str(&format!("#define ROUP_DIRECTIVE_{name:<20} {num}\n"));
    }
    directive_defs.push_str(&format!(
        "#define ROUP_DIRECTIVE_UNKNOWN       {UNKNOWN_KIND}\n"
    ));

    // Generate clause constants
    let mut clause_defs = String::new();
    for (name, num) in clauses {
        clause_defs.push_str(&format!("#define ROUP_CLAUSE_{name:<15} {num}\n"));
    }
    clause_defs.push_str(&format!(
        "#define ROUP_CLAUSE_UNKNOWN      {UNKNOWN_KIND}\n"
    ));

    // Generate checksum for validation
    let checksum = calculate_checksum(directives, clauses);
    let dir_count = directives.len();
    let clause_count = clauses.len();

    format!(
        r#"/*
 * ROUP C API Constants (Auto-generated)
 *
 * DO NOT EDIT THIS FILE MANUALLY!
 * Generated by build.rs from src/c_api.rs
 *
 * Single source of truth: src/c_api.rs
 * - directive_name_to_kind() for directives
 * - convert_clause() for clauses
 *
 * Copyright (c) 2025 ROUP Project
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef ROUP_CONSTANTS_H
#define ROUP_CONSTANTS_H

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {{
#endif

// ============================================================================
// Synchronization Check
// ============================================================================
// Auto-generated checksum: FNV-1a hash of {dir_count} directives + {clause_count} clauses = 0x{checksum:016X}
// If this doesn't match c_api.rs, rebuild with `cargo clean && cargo build`
#define ROUP_CONSTANTS_CHECKSUM 0x{checksum:016X}

// ============================================================================
// Language Format Constants
// ============================================================================
// Language format for roup_parse_with_language()
#define ROUP_LANG_C                         0  // C/C++ (#pragma omp)
#define ROUP_LANG_FORTRAN_FREE              1  // Fortran free-form (!$OMP)
#define ROUP_LANG_FORTRAN_FIXED             2  // Fortran fixed-form (!$OMP or C$OMP)

// ============================================================================
// Directive Kind Constants
// ============================================================================
// Auto-generated from src/c_api.rs:directive_name_to_kind()

{directive_defs}

// ============================================================================
// Clause Kind Constants
// ============================================================================
// Auto-generated from src/c_api.rs:convert_clause()

{clause_defs}

// ============================================================================
// Validation Constants
// ============================================================================
#define ROUP_MAX_PRAGMA_LENGTH 65536  // 64KB

#ifdef __cplusplus
}}
#endif

#endif /* ROUP_CONSTANTS_H */
"#
    )
}

fn main() {
    // Parse constants from source
    let directives = parse_directive_mappings();
    let clauses = parse_clause_mappings();

    // Get the output directory
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("roup_constants.h");

    // Generate the header
    let header = generate_header(&directives, &clauses);

    // Write to OUT_DIR
    fs::write(&dest_path, &header).expect("Failed to write to OUT_DIR");

    // Also copy to src/ for easier access during development
    let src_dest = Path::new("src").join("roup_constants.h");
    fs::write(&src_dest, &header).expect("Failed to write to src/");

    // Validate checksum by reading back the generated file (Case 1 validation)
    let generated_content =
        fs::read_to_string(&src_dest).expect("Failed to read generated header for validation");

    let extracted_checksum = extract_checksum_from_header(&generated_content);
    let expected_checksum = calculate_checksum(&directives, &clauses);

    let dir_count = directives.len();
    let clause_count = clauses.len();

    match extracted_checksum {
        Some(checksum) => {
            assert_eq!(
                checksum,
                expected_checksum,
                "FATAL: Constants checksum mismatch!\n\
                 Expected: 0x{expected_checksum:08X} (FNV-1a hash of {dir_count} directives + {clause_count} clauses)\n\
                 Found in header: 0x{checksum:08X}\n\
                 The generated header is out of sync with c_api.rs.\n\
                 This should never happen - build.rs generates both values.\n\
                 Please file a bug report."
            );
        }
        None => {
            panic!("FATAL: Could not find ROUP_CONSTANTS_CHECKSUM in generated header");
        }
    }

    println!("cargo:rerun-if-changed=src/c_api.rs");
    println!("cargo:rerun-if-changed=src/constants_gen.rs");
    println!("cargo:rerun-if-changed=build.rs");
}
